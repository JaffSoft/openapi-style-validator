openapi: 3.0.0
info:
  version: 1.0.1
  title: Control Site REST API
  description: >
    This is the API used by the UI in Control Site

    ## Usage

    You can access the api documentation for each environment below

    - [Local](http://localhost:9000/api)
    - [Dev](https://cs-dev.business.stingray.com/api)
    - [Stage](https://cs-stage.business.stingray.com/api)
    - [Prod](https://cs.business.stingray.com/api)

    ## Structure

    ### The Envelope

    Every response is contained by an envelope. That is, each response has a predictable set of keys:
    ```json
    {
        "meta": {
            "code": "..."
        },
        "data": {
            ...
        }
    }
    ```

    #### META

    The ```meta``` key is used to communicate extra information about the response to
    the developer. If all goes well, you'll only ever see a code key with value
    ```OK```. However, sometimes things go wrong, and in that case you might see a
    response like:

    ```json
    {
        "meta": {
            "code": "...",
            "details": "...",
            "exception": "...",
            "errors": [
                {
                  "type": "...",
                  "itemInfo": {}
                  "details": "...",
                  "exception": "..."
                }
              ]
        }
    }
    ```

    The ```errors``` array is not mandatory and can be present even if the code is ```ok```.
    That would mean that the function was able to finish but it encountered one or multiple errors.

    #### DATA

    The ```data``` key is the meat of the response. Most of the time, it will contains an specific
    type of object or an array of a specific object.
  termsOfService: http://business.stingray.com/faq
  contact:
    name: Jean-François Côté
    email: jcote@stingray.com
    url: http://www.stingray.com
  license:
    name: Copyright (C) Stingray Digital - All Rights Reserved
paths:
  /dead-actors:
    post:
      tags:
        - Actor
      summary: Kill an actor in the actor system (MAW)
      operationId: killActor
      requestBody:
        $ref: "#/components/requestBodies/ActorInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /actor-status:
    post:
      tags:
        - Actor
      summary: Request the status of an actor
      operationId: getActorStatus
      requestBody:
        $ref: "#/components/requestBodies/ActorInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /actors/pools:
    put:
      tags:
        - Actor
      summary: Reset the actor pools
      operationId: resetPools
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /users:
    get:
      tags:
        - User
      summary: Returns all users in the system
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
    post:
      tags:
        - User
      summary: Creates a new user in the system
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserDataResponse"
    delete:
      tags:
        - User
      summary: Deletes a user in the system
      operationId: deleteUsers
      parameters:
        - in: query
          name: emails
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /current-user:
    get:
      tags:
        - User
      summary: Return the current user only. Null if there is no connected user.
      operationId: getCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
  /current-user-preferences:
    put:
      tags:
        - User
      summary: Modify the preferences of a user
      operationId: updateUserPreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPreferences"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserDataResponse"
  /user/{user-id}:
    get:
      tags:
        - User
      summary: Returns the given user
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
  /user:
    get:
      tags:
        - User
      summary: Returns a user based on the provided parameters. Either a token or an
        e-mail must be provided, not both.
      operationId: getUserByTokenOrEmail
      parameters:
        - in: query
          name: token
          required: false
          schema:
            type: string
        - in: query
          name: email
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
  /affiliates:
    get:
      tags:
        - Affiliate
      summary: Returns the affiliates
      operationId: getAffiliates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliatesResponse"
    post:
      tags:
        - Affiliate
      summary: Add an affiliate in the system
      operationId: addAffiliate
      requestBody:
        $ref: "#/components/requestBodies/AffiliateCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliateResponse"
  /affiliates/{affiliate-id}:
    get:
      tags:
        - Affiliate
      summary: Returns the given affiliate
      operationId: getAffiliate
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliateResponse"
    put:
      tags:
        - Affiliate
      summary: Edit an affiliate
      operationId: editAffiliate
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        $ref: "#/components/requestBodies/AffiliateCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliateResponse"
  /affiliates/{affiliate-id}/logo:
    put:
      tags:
        - Affiliate
      summary: Update the affiliate logo
      operationId: updateAffiliateLogo
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file-to-upload:
                  type: string
                  format: binary
                language:
                  type: string
              required:
                - file-to-upload
                - language
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /affiliates/{affiliate-id}/roles:
    get:
      tags:
        - Affiliate
      summary: Returns all available roles for the given affiliate
      operationId: getRoles
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliateRolesResponse"
  /affiliates/{affiliate-id}/roles/{role-id}:
    put:
      tags:
        - Affiliate
      summary: Add a related role to the affiliate
      operationId: updateRoleLink
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - $ref: "#/components/parameters/role-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
    delete:
      tags:
        - Affiliate
      summary: Remove a related role from the affiliate
      operationId: removeRoleLink
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - $ref: "#/components/parameters/role-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /affiliates/{affiliate-id}/stations:
    get:
      tags:
        - Affiliate
      summary: Returns all the available stations for the given affiliate
      operationId: getStations
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliateStationsResponse"
    post:
      tags:
        - Affiliate
      summary: Add a station to the given affiliate
      operationId: addStationToAffiliate
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        $ref: "#/components/requestBodies/StationAssignationInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /affiliates/{affiliate-id}/stations/{station-id}:
    delete:
      tags:
        - Affiliate
      summary: Remove a related station from the affiliate
      operationId: removeStationLink
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - $ref: "#/components/parameters/station-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /devices/{device-id}/config-video:
    put:
      tags:
        - Device
      summary: Update the video config of the given device
      operationId: updateVideoConfig
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceVideoConfig"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceVideoConfigResponse"
  /devices/{device-id}/config-audio:
    put:
      tags:
        - Device
      summary: Update the audio config of the given device
      operationId: updateAudioConfig
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceAudioConfig"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceAudioConfigResponse"
  /devices/{device-id}/config-base:
    put:
      tags:
        - Device
      summary: Update the base config of the given device
      operationId: updateBaseConfig
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceBaseConfig"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /devices/{device-id}/outputs-config:
    put:
      tags:
        - Device
      summary: Update the outputs config of the given device
      operationId: updateOutputsConfig
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceOutputsConfig"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceOutputsConfigResponse"
  /devices:
    get:
      tags:
        - Device
      summary: Get a list of device based on the provided filters
      operationId: getDevicesViewData
      parameters:
        - in: query
          name: affiliate-id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: fetch-active-devices
          required: true
          schema:
            type: boolean
        - in: query
          name: fetch-inactive-devices
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesViewDataResponse"
    post:
      tags:
        - Device
      summary: Add a device in the system
      operationId: addDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewDevice"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /devices/{device-id}/logs:
    get:
      tags:
        - Device
      summary: Returns the logs of the given device
      operationId: getDeviceLogs
      parameters:
        - $ref: "#/components/parameters/device-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLogsResponse"
  /devices/{device-id}/playouts:
    get:
      tags:
        - Device
      summary: Returns the playouts of the given device
      operationId: getDevicePlayouts
      parameters:
        - $ref: "#/components/parameters/device-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
        - $ref: "#/components/parameters/use-store-time-zone"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicePlayoutsResponse"
  /outputs/{output-id}/latest-playouts:
    get:
      tags:
        - Output
      summary: Returns the playouts of the given device
      operationId: getLatestPlayouts
      parameters:
        - $ref: "#/components/parameters/output-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicePlayoutsResponse"
  /devices/{device-id}/lifecycle-metrics:
    get:
      tags:
        - Device
      summary: Returns the lifecycle metrics of the given device
      operationId: getDeviceLifecycleMetrics
      parameters:
        - $ref: "#/components/parameters/device-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
        - $ref: "#/components/parameters/use-store-time-zone"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLifecycleMetricsResponse"
  /devices/{device-id}/advanced-logs:
    get:
      tags:
        - Device
      summary: Returns the advanced logs of the given device
      operationId: getDeviceAdvancedLogs
      parameters:
        - $ref: "#/components/parameters/device-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
        - $ref: "#/components/parameters/use-store-time-zone"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceAdvancedLogsResponse"
  /devices/{device-id}/replacement:
    put:
      tags:
        - Device
      summary: Replace the given device
      operationId: replaceDevice
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplacementInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplaceDeviceResponse"
    delete:
      tags:
        - Device
      summary: Cancel the replacement of the device
      operationId: cancelDeviceReplacement
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /devices/{device-id}:
    get:
      tags:
        - Device
      summary: Returns a device
      operationId: getDevice
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceResponse"
    put:
      tags:
        - Device
      summary: Update fields in the device
      operationId: updateDevice
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceResponse"
  /devices/{device-id}/debug-view-data:
    get:
      tags:
        - Device
      summary: Return the data of the given device for the debug view
      operationId: getDeviceDebugViewData
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceDebugViewDataResponse"
  /devices/{device-id}/installation:
    post:
      tags:
        - Device
      summary: Add an installation to a device
      operationId: addInstallation
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /devices/{device-id}/usb-config-update-zip:
    get:
      tags:
        - Device
      summary: Create the USB config update for the given device
      operationId: createUsbConfigUpdateZip
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /affiliates/{affiliate-id}/device-preparation-data:
    get:
      tags:
        - Device
      summary: Returns the device preparation data
      operationId: getDevicePreparationData
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: brand-id
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicePreparationDataResponse"
  /brands/{brand-id}/tags:
    get:
      tags:
        - Tag
      summary: Return all tags for the brand
      operationId: getTags
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
    put:
      tags:
        - Tag
      summary: Update the tags for an entity
      operationId: updateEntityTags
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTagsInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/tag-categories:
    post:
      tags:
        - Tag
      summary: Create a tag category
      operationId: createCategory
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTagCategory"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandTagCategoriesResponse"
    get:
      tags:
        - Tag
      summary: Return a list of the categories associated to a brand
      operationId: getCategoriesForBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandTagCategoriesResponse"
  /brands/{brand-id}/tag-categories/{tag-category-id}/tags:
    get:
      tags:
        - Tag
      summary: Return a list of tags that are in the given category for that brand
      operationId: getTagsForCategory
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/tag-category-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
    post:
      tags:
        - Tag
      summary: Use existing tag (or create it if not existing) and link it to a category
      operationId: createTagInCategory
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/tag-category-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagLink"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
  /brands/{brand-id}/tag-categories/{tag-category-id}:
    get:
      tags:
        - Tag
      summary: Return the type of entities associated to a tag category
      operationId: getAssociatedEntityTypeForCategory
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/tag-category-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTypeCategoryAssociationsResponse"
    put:
      tags:
        - Tag
      summary: Update the type of entities associated to a tag category
      operationId: updateCategoryAssociation
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/tag-category-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTypeEnums"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
    delete:
      tags:
        - Tag
      summary: Delete a tag category
      operationId: deleteCategory
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/tag-category-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandTagCategoriesResponse"
  /brands/{brand-id}/tag-categories/{tag-category-id}/tags/{tag-id}:
    delete:
      tags:
        - Tag
      summary: Delete a tag from a category
      operationId: deleteTagInCategory
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/tag-category-id"
        - in: path
          name: tag-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagsResponse"
  /device-tasks:
    post:
      tags:
        - Device
      summary: Create a task to handle actions on device list
      operationId: createDeviceTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceTask"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskResponse"
  /brands/{brand-id}/station-schedules:
    get:
      tags:
        - StationScheduling
      summary: Returns the station schedules for a specific brand
      operationId: getStationSchedules
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationSchedulesResponse"
  /brands/{brand-id}/station-schedule-styles:
    get:
      tags:
        - StationScheduling
      summary: Returns the station schedule styles for a specific brand
      operationId: getStationScheduleStyles
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationScheduleStylesResponse"
  /station-schedules-styles/{station-schedule-style-id}:
    get:
      tags:
        - StationScheduling
      summary: Returns the specific station schedule style
      operationId: getStationScheduleStyle
      parameters:
        - $ref: "#/components/parameters/station-schedule-style-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationScheduleStyleResponse"
  /station-schedule-styles:
    post:
      tags:
        - StationScheduling
      summary: Create a new station schedule style and returns the station schedule
        styles for the brand
      operationId: createStationScheduleStyle
      requestBody:
        $ref: "#/components/requestBodies/NewStationScheduleStyle"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationScheduleStyleResponse"
  /station-schedule-styles/{station-schedule-style-id}:
    put:
      tags:
        - StationScheduling
      summary: Update a station schedule style and returns the station schedule styles
        for the brand
      operationId: updateStationScheduleStyle
      parameters:
        - $ref: "#/components/parameters/station-schedule-style-id"
      requestBody:
        $ref: "#/components/requestBodies/NewStationScheduleStyle"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationScheduleStyleResponse"
    delete:
      tags:
        - StationScheduling
      summary: Delete a station schedule style and returns the station schedule styles
        for the brand
      operationId: deleteStationScheduleStyle
      parameters:
        - $ref: "#/components/parameters/station-schedule-style-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationScheduleStylesResponse"
  /brands/{brand-id}/stations:
    get:
      tags:
        - Brand
      summary: Returns a list of the brand's stations
      operationId: getBrandStations
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: available-to-client-only
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandStationsResponse"
    put:
      tags:
        - Brand
      summary: Update the list of stations linked to the given brand
      operationId: updateBrandStations
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandStationsInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandStationsResponse"
    post:
      tags:
        - Brand
      summary: Add a station to the given brand
      operationId: addStationToBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/StationAssignationInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandStationsResponse"
  /languages:
    get:
      tags:
        - Language
      summary: Returns a list of the existing languages
      operationId: getLanguages
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLanguagesResponse"
    post:
      tags:
        - Language
      summary: Add a new language to the system and returns an updated list
      operationId: addLanguage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageCore"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLanguagesResponse"
  /affiliates/{affiliate-id}/hardware-list:
    get:
      tags:
        - Hardware
      summary: Returns the hardware list for a specific affiliate
      operationId: getHardwareList
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: hardware-type
          required: true
          schema:
            type: string
            enum:
              - Generic
              - Player
              - Storage
              - Screen
              - Network
              - Tablet
        - in: query
          name: serial-no
          required: false
          schema:
            type: string
        - in: query
          name: brand-id
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: store-id
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: device-id
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareListResponse"
    post:
      tags:
        - Hardware
      summary: Add a hardware to the given affiliate
      operationId: createHardware
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HardwareCore"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareResponse"
  /affiliates/{affiliate-id}/hardware-models:
    get:
      tags:
        - Hardware
      summary: Returns the hardware models for a specific affiliate
      operationId: getHardwareModels
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: hardware-type
          required: true
          schema:
            type: string
            enum:
              - Generic
              - Player
              - Storage
              - Screen
              - Network
              - Tablet
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareModelsResponse"
    post:
      tags:
        - Hardware
      summary: Add a hardware model to the given affiliate
      operationId: createHardwareModel
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HardwareModelCore"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareModelResponse"
  /affiliates/{affiliate-id}/parent-hardware-list:
    get:
      tags:
        - Hardware
      summary: Returns a list of the hardware that can be assigned to
      operationId: getParentHardwareList
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareListResponse"
  /hardware-list/{hardware-id}/assignations:
    get:
      tags:
        - Hardware
      summary: Returns the previous and current assignation of a specific hardware
      operationId: getHardwareAssignations
      parameters:
        - $ref: "#/components/parameters/hardware-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareAssignationsResponse"
    put:
      tags:
        - Hardware
      summary: Update the assignation of the hardware
      operationId: updateHardwareAssignation
      parameters:
        - $ref: "#/components/parameters/hardware-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatedHardwareAssignation"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareAssignationsResponse"
  /hardware-list/{hardware-id}:
    put:
      tags:
        - Hardware
      summary: Update a hardware
      operationId: updateHardware
      parameters:
        - $ref: "#/components/parameters/hardware-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Hardware"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareResponse"
    delete:
      tags:
        - Hardware
      summary: Remove a hardware from the system
      operationId: removeHardware
      parameters:
        - $ref: "#/components/parameters/hardware-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /hardware-models/{hardware-model-id}:
    put:
      tags:
        - Hardware
      summary: Update the information related to a hardware model
      operationId: updateHardwareModel
      parameters:
        - $ref: "#/components/parameters/hardware-model-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HardwareModel"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHardwareModelResponse"
    delete:
      tags:
        - Hardware
      summary: Remove the hardware model from the system
      operationId: removeHardwareModel
      parameters:
        - $ref: "#/components/parameters/hardware-model-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /stores/{store-id}/devices:
    get:
      tags:
        - Store
      summary: Get a list of devices available for the given store
      operationId: getStoreDevices
      parameters:
        - $ref: "#/components/parameters/store-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesResponse"
    put:
      tags:
        - Store
      summary: Move a device to the store. For the moment, it only supports "Devices
        pool store" to "store" flow.
      operationId: moveDeviceToStore
      parameters:
        - $ref: "#/components/parameters/store-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceAssignationInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/devices:
    get:
      tags:
        - Brand
      summary: Get a list of devices available for the given brand
      operationId: getBrandDevices
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesResponse"
  /affiliates/{affiliate-id}/devices:
    get:
      tags:
        - Affiliate
      summary: Get a list of devices available for the given affiliate
      operationId: getAffiliateDevices
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesResponse"
  /brands/{brand-id}/stores:
    get:
      tags:
        - Brand
      summary: Returns the stores in the given brand with complete information and some
        filters
      operationId: getBrandStores
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: shipping-usb-update-id
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStoresResponse"
    post:
      tags:
        - Brand
      summary: Creates new store (with device) using a CSV file that is uploaded
      operationId: importStores
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/importStores"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStoreCreationLogsResponse"
  /brands/{brand-id}/basic-stores:
    get:
      tags:
        - Brand
      summary: Get a list of stores with basic info for the given brand
      operationId: getBrandBasicStores
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicStoresResponse"
    post:
      tags:
        - Store
      summary: Create a store and, if needed, the associated device
      operationId: createStore
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreCreationInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicStoreResponse"
  /affiliates/{affiliate-id}/stores:
    get:
      tags:
        - Affiliate
      summary: Get a list of stores for the given affiliate
      operationId: getAffiliateStores
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicStoresResponse"
  /storage-types:
    get:
      tags:
        - Hardware
      summary: Get a list of the available storage types
      operationId: getStorageTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /storage-brands:
    get:
      tags:
        - Hardware
      summary: Get a list of the available storage brands
      operationId: getStorageBrands
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /brands/{brand-id}/images:
    get:
      tags:
        - Image
      summary: Returns a list of the brand's images
      operationId: getBrandImages
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImagesResponse"
    post:
      tags:
        - Image
      summary: Create an image for the given brand
      operationId: createImage
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /images/{image-id}/summary:
    get:
      tags:
        - Image
      summary: Returns a summary for the image creation
      operationId: getImageSummary
      parameters:
        - $ref: "#/components/parameters/image-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetImageSummaryResponse"
  /url-styles:
    get:
      tags:
        - System
      summary: Retrieve all available url styles
      operationId: getUrlStyles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /software/{software-id}/replacements:
    post:
      tags:
        - System
      summary: Replace all usages of a software
      operationId: replaceUsedSoftware
      parameters:
        - $ref: "#/components/parameters/software-id"
      requestBody:
        $ref: "#/components/requestBodies/IntegerIDUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /software/{software-id}:
    put:
      tags:
        - System
      summary: Edit a device software
      operationId: editSoftware
      parameters:
        - $ref: "#/components/parameters/software-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareUpdateInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceSoftwareResponse"
    delete:
      tags:
        - System
      summary: Delete a software
      operationId: deleteSoftware
      parameters:
        - $ref: "#/components/parameters/software-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /all-software-list:
    get:
      tags:
        - System
      summary: Returns a list of the available software
      operationId: getAllSoftwareList
      parameters:
        - in: query
          name: device-software-listing-purpose
          required: true
          schema:
            type: string
            enum:
              - SetMaximumSoftwareVersion
              - SelectSoftwareVersion
              - Unspecified
        - in: query
          name: deprecated
          required: false
          schema:
            type: boolean
        - in: query
          name: brand-id
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllSoftwareListResponse"
    post:
      tags:
        - System
      summary: Upload software files to the system
      operationId: uploadMultiPlatformSoftware
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                linux-software-file:
                  type: string
                  format: binary
                linux-software-file-2:
                  type: string
                  format: binary
                android-software-file:
                  type: string
                  format: binary
                windows-software-file:
                  type: string
                  format: binary
                web-software-file:
                  type: string
                  format: binary
                version:
                  type: string
                label:
                  type: string
                is-default-version:
                  type: boolean
                software-type:
                  type: string
                config-format-id:
                  type: integer
                  format: int32
              required:
                - version
                - label
                - is-default-version
                - software-type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /ip-address-filter-types:
    get:
      tags:
        - System
      summary: Returns all of the available types of supported IP address filters
      operationId: getIpAddressFilterTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /software-list:
    get:
      tags:
        - System
      summary: Returns a list of the available software for a given type
      operationId: getSoftwareList
      parameters:
        - in: query
          name: software-type
          required: true
          schema:
            type: string
        - in: query
          name: device-software-listing-purpose
          required: true
          schema:
            type: string
            enum:
              - SetMaximumSoftwareVersion
              - SelectSoftwareVersion
              - Unspecified
        - in: query
          name: brand-id
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: device-id-list
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSoftwareListResponse"
    post:
      tags:
        - System
      summary: Upload software files to the system from urls
      operationId: uploadMultiPlatformSoftwareFromUrl
      parameters:
        - in: header
          name: X-API-Key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareUploadInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceSoftwareResponse"
  /brands/{brand-id}/initial-images:
    post:
      tags:
        - Image
      summary: Create an initial image for the given brand
      operationId: createInitialImage
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /images/{image-id}:
    put:
      tags:
        - Image
      summary: Decommission an image and delete its cloud stored file
      operationId: decommissionImage
      parameters:
        - $ref: "#/components/parameters/image-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
    delete:
      tags:
        - Image
      summary: Remove an image from the system
      operationId: removeImage
      parameters:
        - $ref: "#/components/parameters/image-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /affiliates/{affiliate-id}/shipping-types:
    get:
      tags:
        - Affiliate
      summary: Returns all the shipping types available for the given affiliate
      operationId: getAvailableShippingTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /shipping-package-types:
    get:
      tags:
        - Affiliate
      summary: Returns all of the shipping package types
      operationId: getAvailableShippingPackageTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /synchronizations:
    post:
      tags:
        - Sync
      summary: Call a manual and complete synchronization of the system with SAM
        servers. May soon be replaced with a call with more specific parameters
      operationId: requestManualSync
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTaskConfirmationResponse"
  /brands/{brand-id}/synchronizations:
    post:
      tags:
        - Sync
      summary: Call a manual brand synchronization with SAM servers. May soon be
        replaced with a call with more specific parameters
      operationId: requestBrandSync
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTaskConfirmationResponse"
  /sync-state/logs:
    get:
      tags:
        - Sync
      summary: Returns the logs related to the sync
      operationId: getSyncLogs
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncLogsResponse"
  /affiliates/{affiliate-id}/sync-stations:
    get:
      tags:
        - Sync
      summary: Returns a list of the stations sync snapshots for a specific affiliate
      operationId: getAffiliateSyncStations
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncStationsResponse"
  /sync-stations:
    get:
      tags:
        - Sync
      summary: Returns a list of all the stations sync snapshots
      operationId: getSyncStations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncStationsResponse"
  /sync-stations/{station-id}:
    get:
      tags:
        - Sync
      summary: Returns a single station sync snapshot
      operationId: getSyncStation
      parameters:
        - $ref: "#/components/parameters/station-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncStationDetailsResponse"
  /affiliates/{affiliate-id}/sync-brands:
    get:
      tags:
        - Sync
      summary: Returns a list of the brands sync snapshots for a specific affiliate
      operationId: getAffiliateSyncBrands
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncBrandsResponse"
  /sync-brands:
    get:
      tags:
        - Sync
      summary: Returns a list of all the brands sync snapshots
      operationId: getSyncBrands
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncBrandsResponse"
  /affiliates/{affiliate-id}/sync-songs:
    get:
      tags:
        - Sync
      summary: Returns a list of the brands sync snapshots for a specific affiliate
      operationId: getAffiliateSyncSongs
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncSongsResponse"
  /sync-songs:
    get:
      tags:
        - Sync
      summary: Returns a list of all the songs sync snapshots
      operationId: getSyncSongs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncSongsResponse"
  /sync-playlists:
    get:
      tags:
        - Sync
      summary: Returns a specific playlist sync snapshot. Use either the playlistId or
        the archive playlist Id. None will result in an error.
      operationId: getSyncPlaylist
      parameters:
        - in: query
          name: playlist-id
          required: false
          schema:
            type: integer
            format: int64
        - in: query
          name: archive-playlist-id
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncPlaylistResponse"
  /sync-stations/{station-id}/sync-playlists:
    get:
      tags:
        - Sync
      summary: Returns a list of all the playlists sync snapshots from a specific
        station
      operationId: getStationSyncPlaylists
      parameters:
        - $ref: "#/components/parameters/station-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationSyncPlaylistsResponse"
  /sync-stations/{station-id}/sync-songs:
    get:
      tags:
        - Sync
      summary: Returns a list of all the songs in a sync stations
      operationId: getStationSyncSongs
      parameters:
        - $ref: "#/components/parameters/station-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStationSyncSongsResponse"
  /sync-playlists/{playlist-id}/archives:
    get:
      tags:
        - Sync
      summary: Returns a list of the available versions of the given station playlist
      operationId: getSyncPlaylistArchives
      parameters:
        - in: path
          name: playlist-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /channels/{channel-id}/published-status:
    get:
      tags:
        - Brand
      summary: Get the published status of a channel
      operationId: getChannelPublishedStatus
      parameters:
        - in: path
          name: channel-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetChannelPublishedStatusResponse"
  /brands/{brand-id}/media-player-outputs:
    get:
      tags:
        - Brand
      summary: Get a list of the media player outputs in the given brand
      operationId: getBrandMediaPlayerOutputs
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaPlayerOutputsResponse"
    put:
      tags:
        - Brand
      summary: Update a list of media player outputs
      operationId: updateMediaPlayerOutputs
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MediaPlayerOutputsUpdateInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/channels:
    get:
      tags:
        - Brand
      summary: Get a list of the available channels for the given brand
      operationId: getBrandChannels
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: is-library
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /brands/{brand-id}/playback-channels:
    get:
      tags:
        - Brand
      summary: Get a list of the available playback channels for the given brand
      operationId: getBrandPlaybackChannels
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /brands/{brand-id}/calendars:
    get:
      tags:
        - Brand
      summary: Get a list of the available calendars for the given brand
      operationId: getBrandCalendars
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /brands/{brand-id}/ban-config:
    get:
      tags:
        - Brand
      summary: Get the ban configuration
      operationId: getBanConfig
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBanConfigResponse"
    post:
      tags:
        - Brand
      summary: Create/Update the ban configuration
      operationId: updateBanConfig
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBanConfigInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBanConfigResponse"
  /brands/{brand-id}/throttling-scheme-preview:
    get:
      tags:
        - Brand
      summary: Get the throttling scheme preview
      operationId: getThrottlingSchemePreview
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetThrottlingSchemePreviewResponse"
  /brands/{brand-id}/throttling-scheme:
    get:
      tags:
        - Brand
      summary: Get the throttling scheme
      operationId: getThrottlingScheme
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetThrottlingSchemeResponse"
    put:
      tags:
        - Brand
      summary: Create/Update the throttling scheme
      operationId: updateThrottlingScheme
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThrottlingScheme"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetThrottlingSchemeResponse"
  /brands/{brand-id}/songs/{song-id}:
    get:
      tags:
        - Brand
      summary: Get information about for the given song
      operationId: getSong
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: path
          name: song-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSongResponse"
  /affiliates/{affiliate-id}/brands:
    get:
      tags:
        - Affiliate
      summary: Returns a list of all the brands the connected user has access to in the
        given affiliate
      operationId: getAffiliateBrands
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: wanted-statuses
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: brand-code
          required: false
          schema:
            type: string
        - in: query
          name: is-library
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandsResponse"
    post:
      tags:
        - Brand
      summary: Add a new brand to the given affiliate
      operationId: addBrand
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBrand"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCreatedIdResponse"
  /brands/{brand-id}/admin-settings:
    get:
      tags:
        - Brand
      summary: Information about the settings. Only available to brand administrators.
      operationId: getAdminBrandProductSettings
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAdminBrandProductSettingsResponse"
  /brands/{brand-id}:
    get:
      tags:
        - Brand
      summary: Information about the given brand
      operationId: getBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandResponse"
    put:
      tags:
        - Brand
      summary: Update the brand properties, often called "configuration"
      operationId: editBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBrandInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/basic:
    put:
      tags:
        - Brand
      summary: Update the minimal brand info
      operationId: editBrandBasicInfo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBrandBasicInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicBrandResponse"
  /brands/{brand-id}/logo:
    put:
      tags:
        - Brand
      summary: Update the brand logo
      operationId: updateBrandLogo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/importStores"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/available-stations:
    get:
      tags:
        - Brand
      summary: Get the available stations for this brand
      operationId: getBrandAvailableStations
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAvailableStationsResponse"
  /affiliates/{affiliate-id}/matching-roles:
    get:
      tags:
        - Affiliate
      summary: Get the matching roles for the given affiliate
      operationId: getMatchingRoles
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: video
          required: true
          schema:
            type: boolean
        - in: query
          name: mono
          required: true
          schema:
            type: boolean
        - in: query
          name: audio-bit-rate
          required: false
          schema:
            type: string
        - in: query
          name: related-media-type
          required: false
          schema:
            type: string
        - in: query
          name: claper-enabled
          required: true
          schema:
            type: boolean
        - in: query
          name: messaging
          required: true
          schema:
            type: boolean
        - in: query
          name: signage
          required: true
          schema:
            type: boolean
        - in: query
          name: branding-type
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMatchingRolesResponse"
  /affiliates/{affiliate-id}/matching-roles-media-types:
    get:
      tags:
        - Affiliate
      summary: Get the media types for the matching roles
      operationId: getMatchingRolesMediaTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaTypesResponse"
  /affiliates/{affiliate-id}/matching-roles-audio-signal-types:
    get:
      tags:
        - Affiliate
      summary: Get the audio signal types for the matching roles
      operationId: getMatchingRolesAudioSignalTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: video
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAudioSignalsResponse"
  /affiliates/{affiliate-id}/matching-roles-audio-bit-rates:
    get:
      tags:
        - Affiliate
      summary: Get the audio bit rates for the matching roles
      operationId: getMatchingRolesAudioBitRates
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: mono
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringListResponse"
  /affiliates/{affiliate-id}/matching-roles-product-types:
    get:
      tags:
        - Affiliate
      summary: Get the product types for the matching roles
      operationId: getMatchingRolesProductTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: video
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductTypesResponse"
  /affiliates/{affiliate-id}/matching-roles-technology-types:
    get:
      tags:
        - Affiliate
      summary: Get the technology types for the matching roles
      operationId: getMatchingRolesTechnologyTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: signage
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTechTypesResponse"
  /affiliates/{affiliate-id}/matching-roles-branding-types:
    get:
      tags:
        - Affiliate
      summary: Get the branding types for the matching roles
      operationId: getMatchingRolesBrandingTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: tech-type
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandingTypesResponse"
  /affiliates/{affiliate-id}/matching-roles-related-media-types:
    get:
      tags:
        - Affiliate
      summary: Get the related media types for the matching roles
      operationId: getMatchingRolesRelatedMediaTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: video
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRelatedMediaTypesResponse"
  /affiliates/{affiliate-id}/matching-roles-claper-support-validation:
    get:
      tags:
        - Affiliate
      summary: Get the claper support validation for the matching roles
      operationId: getMatchingRolesClaperSupportValidation
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: tech-type
          required: true
          schema:
            type: string
        - in: query
          name: video
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetClaperSupportValidationResponse"
  /brands/{brand-id}/device-types:
    get:
      tags:
        - Brand
      summary: Returns a list of the device types available for the given brand
      operationId: getBrandDeviceTypes
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /brands/{brand-id}/shipping-addresses:
    get:
      tags:
        - Shipping
      summary: Return the shipping addresses of the given brand
      operationId: getBrandShippingAddresses
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingAddressesResponse"
    post:
      tags:
        - Brand
      summary: Creates and assigns a shipping address to the given brand
      operationId: addShippingAddress
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/AddressCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAddressResponse"
  /brands/{brand-id}/shipping-addresses/{address-id}:
    put:
      tags:
        - Brand
      summary: Update a shipping address
      operationId: updateShippingAddress
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/address-id"
      requestBody:
        $ref: "#/components/requestBodies/AddressCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAddressResponse"
    delete:
      tags:
        - Brand
      summary: Delete a shipping address and remove it from the given brand
      operationId: deleteShippingAddress
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/address-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/ip-address-filters:
    get:
      tags:
        - Brand
      summary: Return the ip address filters of the given brand
      operationId: getBrandIpAddressFilters
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIpAddressFiltersResponse"
    post:
      tags:
        - Brand
      summary: Add an IP address filter to the given brand
      operationId: addIpAddressFilter
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IpAddressFilterCore"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIpAddressFilterResponse"
  /ip-address-filters/{ip-address-filter-id}:
    delete:
      tags:
        - Brand
      summary: Delete an ip address filter
      operationId: deleteIpAddressFilter
      parameters:
        - $ref: "#/components/parameters/ip-address-filter-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /brands/{brand-id}/pool-devices:
    get:
      tags:
        - Brand
      summary: Returns the pool devices
      operationId: getPoolDevices
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesResponse"
    post:
      tags:
        - Brand
      summary: Creates a new device in the pool store. Creates the pool store if it
        doesn't already exist. Returns all pool devices.
      operationId: addPoolDevice
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PoolDeviceCreationInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesResponse"
  /brands/{brand-id}/stations/{station-id}:
    put:
      tags:
        - Brand
      summary: Update some properties of the station related to this brand
      operationId: updateBrandStation
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/station-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandStationUpdate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandStationResponse"
    delete:
      tags:
        - Brand
      summary: Remove a station from the given brand
      operationId: removeStationFromBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/station-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandStationsResponse"
  /affiliates/{affiliate-id}/shared-magic-info-configs:
    get:
      tags:
        - Affiliate
      summary: Returns the shared Magic Info configs available system-wide
      operationId: getSharedMagicInfoConfigs
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMagicInfoConfigsResponse"
  /default-values:
    get:
      tags:
        - System
      summary: Returns default values of the system
      operationId: getDefaultValues
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDefaultValuesResponse"
  "/brands/{brand-id}/libraries":
    put:
      tags:
        - Brand
      summary: Add a library to the given brand
      operationId: addLibraryToBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LibraryInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/magic-info-config":
    get:
      tags:
        - Brand
      summary: Returns the Magic Info configuration for the given brand
      operationId: getMagicInfoConfig
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMagicInfoConfigResponse"
    put:
      tags:
        - Brand
      summary: Update the magic info configuration for the given brand
      operationId: updateMagicInfoConfig
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MagicInfoConfigCore"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMagicInfoConfigResponse"
  /brands:
    get:
      tags:
        - Brand
      summary: Returns a list of all the brands in the system
      operationId: getBrands
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  "/brands/{brand-id}/signage-config":
    get:
      tags:
        - Brand
      summary: Returns the signage configuration for the given brand
      operationId: getSignageConfig
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageConfigResponse"
  "/brands/{brand-id}/shipping-usb-updates":
    get:
      tags:
        - Brand
      summary: Returns the available shipping usb updates
      operationId: getShippingUsbUpdates
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
    post:
      tags:
        - Shipping
      summary: Creates a new shipping usb update
      operationId: createShippingUsbUpdate
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingUsbUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /time-zones:
    get:
      tags:
        - System
      summary: Returns the available time zones in the system
      operationId: getTimeZones
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  "/brands/{brand-id}/zones/{zone-index}/default-calendar":
    put:
      tags:
        - Brand
      summary: Update the default calendar for the given brand and zone index
      operationId: updateDefaultCalendar
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/zone-index"
      requestBody:
        $ref: "#/components/requestBodies/IntegerIDUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/zones/{zone-index}/default-zone":
    put:
      tags:
        - Brand
      summary: Update the default zone for the given brand and zone index
      operationId: updateDefaultZone
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/zone-index"
      requestBody:
        $ref: "#/components/requestBodies/IntegerIDUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/zones/{zone-index}/default-station-scheduling-channel":
    put:
      tags:
        - Brand
      summary: Update the default station scheduling channel for the given brand and
        zone index
      operationId: updateDefaultStationSchedulingChannel
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/zone-index"
      requestBody:
        $ref: "#/components/requestBodies/IntegerIDUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/default-signage-channel":
    put:
      tags:
        - Brand
      summary: Update the default signage channel for the given brand
      operationId: updateDefaultSignageChannel
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/IntegerIDUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/default-playback-channel":
    put:
      tags:
        - Brand
      summary: Update the default playback channel for the given brand
      operationId: updateDefaultPlaybackChannel
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaybackChannelUpdateInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/outputs/{output-id}":
    put:
      tags:
        - Device
      summary: Update the station playing on a given output
      operationId: updateDeviceOutput
      parameters:
        - $ref: "#/components/parameters/output-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceOutputUpdateInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/stores/{store-id}/addresses/{address-id}":
    put:
      tags:
        - Store
      summary: Update a store address in the system
      operationId: updateStoreAddress
      parameters:
        - $ref: "#/components/parameters/store-id"
        - $ref: "#/components/parameters/address-id"
      requestBody:
        $ref: "#/components/requestBodies/AddressCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAddressResponse"
  "/stores/{store-id}/logs":
    get:
      tags:
        - Store
      summary: Returns all the logs for a given store
      operationId: getStoreLogs
      parameters:
        - $ref: "#/components/parameters/store-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
        - $ref: "#/components/parameters/use-store-time-zone"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStoreLogsResponse"
    post:
      tags:
        - Store
      summary: Add a log to the given store
      operationId: addStoreLog
      parameters:
        - $ref: "#/components/parameters/store-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewLog"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/stores/{store-id}":
    get:
      tags:
        - Store
      summary: Returns the given store
      operationId: getStore
      parameters:
        - $ref: "#/components/parameters/store-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicStoreResponse"
    put:
      tags:
        - Store
      summary: Update the given store
      operationId: updateStore
      parameters:
        - $ref: "#/components/parameters/store-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreUpdateInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicStoreResponse"
  "/stores/{store-id}/basic":
    put:
      tags:
        - Store
      summary: Update the given store's minimal info
      operationId: updateStoreBasicInfo
      parameters:
        - $ref: "#/components/parameters/store-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStoreBasicInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicStoreResponse"
  "/stores/{store-id}/screens":
    get:
      tags:
        - Store
      summary: Returns the store's screens
      operationId: getStoreScreens
      parameters:
        - $ref: "#/components/parameters/store-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScreensResponse"
  /device-lifecycle-statuses:
    get:
      tags:
        - System
      summary: Returns all of the available statuses for a device return
      operationId: getDeviceLifecycleStatuses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLifecycleStatusesResponse"
    post:
      tags:
        - System
      summary: Add a device lifecycle status
      operationId: addDeviceLifecycleStatus
      requestBody:
        $ref: "#/components/requestBodies/DeviceLifecycleStatusCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLifecycleStatusResponse"
  "/device-lifecycle-statuses/{device-lifecycle-status-id}":
    put:
      tags:
        - System
      summary: Edit a device lifecycle status
      operationId: editDeviceLifecycleStatus
      parameters:
        - $ref: "#/components/parameters/device-lifecycle-status-id"
      requestBody:
        $ref: "#/components/requestBodies/DeviceLifecycleStatusCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLifecycleStatusResponse"
    delete:
      tags:
        - System
      summary: Delete a device lifecycle status
      operationId: deleteDeviceLifecycleStatus
      parameters:
        - $ref: "#/components/parameters/device-lifecycle-status-id"
        - in: query
          name: return-status-type
          required: true
          schema:
            type: string
            enum:
              - deviceHardware
              - deviceSoftware
              - storageHardware
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /device-hardware-statuses:
    get:
      tags:
        - System
      summary: Returns all of the device hardware statuses
      operationId: getDeviceHardwareStatuses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /device-software-statuses:
    get:
      tags:
        - System
      summary: Returns all of the device software statuses
      operationId: getDeviceSoftwareStatuses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /storage-hardware-status:
    get:
      tags:
        - System
      summary: Returns all of the storage hardware statuses
      operationId: getStorageHardwareStatuses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /store-statuses:
    get:
      tags:
        - System
      summary: Returns the available store statuses
      operationId: getStoreStatuses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /store-content-update-types:
    get:
      tags:
        - System
      summary: Returns the available content update types
      operationId: getStoreContentUpdateTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /lifecycles:
    put:
      tags:
        - Device
      summary: Edit the values of multiple device's lifecycles
      operationId: editDeviceLifecycles
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceLifecyclesUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/devices/{device-id}/lifecycle":
    get:
      tags:
        - Device
      summary: Returns the information about a device's lifecycle
      operationId: getDeviceLifecycle
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLifecycleResponse"
    put:
      tags:
        - Device
      summary: Set the device lifecycle's return received date to the current date
      operationId: updateDeviceReturnReceived
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLifecycleResponse"
  "/devices/{device-id}/published-config":
    post:
      tags:
        - Device
      summary: Publishes a device's configuration, pushing it to the device if it is
        online
      operationId: publishConfig
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBooleanResponse"
  "/devices/{device-id}/actions":
    post:
      tags:
        - Device
      summary: Sends an action to the device if it is online
      operationId: sendAction
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceAction"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/devices/{device-id}/commands":
    post:
      tags:
        - Device
      summary: Sends a command to the device if it is online
      operationId: sendCommand
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceCommand"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /device-locations:
    get:
      tags:
        - Device
      summary: Returns the location of all devices that the current user has access to
      operationId: getDeviceLocations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceLocationsResponse"
  "/devices/{device-id}/config":
    get:
      tags:
        - Device
      summary: Returns the current config for the given device
      operationId: getDeviceConfig
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
  "/affiliates/{affiliate-id}/device-preparations":
    post:
      tags:
        - Device
      summary: Prepare the given devices
      operationId: prepareDevices
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DevicesPreparationInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesBatchOperationResponse"
  "/affiliates/{affiliate-id}/device-shipments":
    post:
      tags:
        - Device
      summary: Reships the given device. Usually shipped by default when prepared.
      operationId: shipDevices
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DevicesShipmentInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicesBatchOperationResponse"
  "/brands/{brand-id}/zones":
    get:
      tags:
        - Zone
      summary: Returns a list of zones for the given brand
      operationId: getBrandZones
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetZonesResponse"
    post:
      tags:
        - Zone
      summary: Add a zone to the given brand
      operationId: addZoneToBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/ZoneCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetZoneResponse"
  "/zones/{zone-id}":
    put:
      tags:
        - Zone
      summary: Update a given zone
      operationId: updateZone
      parameters:
        - $ref: "#/components/parameters/zone-id"
      requestBody:
        $ref: "#/components/requestBodies/ZoneCore"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetZoneResponse"
    delete:
      tags:
        - Zone
      summary: Delete a given zone
      operationId: deleteZone
      parameters:
        - $ref: "#/components/parameters/zone-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetZonesResponse"
  "/affiliates/{affiliate-id}/users":
    get:
      tags:
        - User
      summary: Returns all the users in the given affiliate
      operationId: getAffiliateUsers
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
    post:
      tags:
        - User
      summary: Creates a new user in the given affiliate
      operationId: createAffiliateUser
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserDataResponse"
    delete:
      tags:
        - User
      summary: Deletes a user in the given affiliate
      operationId: deleteAffiliateUsers
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: emails
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/users":
    get:
      tags:
        - User
      summary: Returns all the users in the given brand
      operationId: getBrandUsers
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUsersResponse"
    post:
      tags:
        - User
      summary: Creates a new user in the given brand
      operationId: createBrandUser
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserDataResponse"
    delete:
      tags:
        - User
      summary: Deletes a user in the given brand
      operationId: deleteBrandUsers
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: emails
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /login-settings:
    put:
      tags:
        - User
      summary: Updates the login settings of users
      operationId: updateLoginSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLoginSettingsInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginSettingsResponse"
  "/user/{user-id}/login-settings":
    get:
      tags:
        - User
      summary: Returns the settings required for a user login
      operationId: getLoginSettings
      parameters:
        - $ref: "#/components/parameters/user-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginSettingsResponse"
  "/user/{user-id}/two-factor-auth-login":
    post:
      tags:
        - User
      summary: Login a user using two-factor authentication. Must be called after a
        regular login request
      operationId: loginWithTwoFactorAuthentication
      parameters:
        - $ref: "#/components/parameters/user-id"
        - in: query
          name: code
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginResponse"
  /two-factor-auth-email:
    post:
      tags:
        - User
      summary: Resend the two-factor authentication setup email
      operationId: resendTwoFactorSetupEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendTwoFactorEmailInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /user-passwords:
    post:
      tags:
        - User
      summary: Resets the passwords of the given users
      operationId: resetPasswords
      requestBody:
        $ref: "#/components/requestBodies/PasswordResetInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetResultResponse"
  "/affiliates/{affiliate-id}/user-passwords":
    post:
      tags:
        - User
      summary: Resets the passwords of the given users for the given affiliate
      operationId: resetAffiliatePasswords
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        $ref: "#/components/requestBodies/PasswordResetInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetResultResponse"
  "/brands/{brand-id}/user-passwords":
    post:
      tags:
        - User
      summary: Resets the passwords of the given users for the given brand
      operationId: resetBrandPasswords
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/PasswordResetInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetResultResponse"
  /config-formats:
    get:
      tags:
        - System
      summary: Returns the available config formats in the system
      operationId: getConfigFormats
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  /magic-info-screen-implementations:
    get:
      tags:
        - MagicInfo
      summary: Returns the brand, store and screen information of all magic info screens
      operationId: getMagicInfoScreenImplementations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMagicInfoScreenImplementationsRespon\
                  se"
  /magic-info-asset-implementations:
    get:
      tags:
        - MagicInfo
      summary: Returns the asset information of all magic info assets
      operationId: getMagicInfoAssetImplementations
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMagicInfoAssetImplementationsResponse"
  /devices-software:
    post:
      tags:
        - Device
      summary: Push requested software to selected devices if they are connected
      operationId: pushDevicesSoftware
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceSoftwarePushInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceSoftwarePushBatchOperationResp\
                  onse"
  /software-implementations:
    get:
      tags:
        - System
      summary: Returns all the implementations of device software
      operationId: getDeviceSoftwareImplementations
      parameters:
        - in: query
          name: deprecated
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeviceSoftwareImplementationsResponse"
  /software-dependencies:
    post:
      tags:
        - System
      summary: Update the dependencies of a software
      operationId: updateSoftwareDependencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareDependencyInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /deprecated-files:
    post:
      tags:
        - System
      summary: Old call to upload files to the system (will eventualy dissapear)
      operationId: deprecatedUploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file-to-upload:
                  type: string
                  format: binary
                path:
                  type: string
              required:
                - file-to-upload
                - path
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDeprecatedFilesResponse"
  /files:
    post:
      tags:
        - System
      summary: Uploads files to the system
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file-to-upload:
                  type: string
                  format: binary
                file-type:
                  type: string
              required:
                - file-to-upload
                - file-type
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/files":
    post:
      tags:
        - Brand
      summary: Uploads files for the given brand
      operationId: uploadBrandFile
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file-type:
                  type: string
                file-to-upload:
                  type: string
                  format: binary
              required:
                - file-type
                - file-to-upload
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /interface-types:
    get:
      tags:
        - System
      summary: Returns the available interface types in the system
      operationId: getInterfaceTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  /authentication-types:
    get:
      tags:
        - System
      summary: Returns the available authentication types in the system
      operationId: getAuthenticationTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEnumPairsResponse"
  "/devices/{device-id}/network-configuration":
    get:
      tags:
        - Device
      summary: Returns the device's network configuration
      operationId: getDeviceNetworkConfiguration
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNetworkConfigurationResponse"
    put:
      tags:
        - Device
      summary: Update the device's network configuration
      operationId: updateDeviceNetworkConfiguration
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        $ref: "#/components/requestBodies/NetworkConfig"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNetworkConfigurationResponse"
  "/brands/{brand-id}/network-configuration":
    get:
      tags:
        - Brand
      summary: Returns the brand's network configuration
      operationId: getBrandNetworkConfiguration
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNetworkConfigurationResponse"
    put:
      tags:
        - Brand
      summary: Update the brand's network configuration
      operationId: updateBrandNetworkConfiguration
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/NetworkConfig"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNetworkConfigurationResponse"
  "/brands/{brand-id}/task-logs":
    get:
      tags:
        - Brand
      summary: Returns brand's task logs of the given type
      operationId: getBrandTaskLogs
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: task-type
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskLogsResponse"
  "/brands/{brand-id}/task-logs/{task-id}/entries":
    get:
      tags:
        - Brand
      summary: Returns brand's task logs of the given type
      operationId: getBrandTaskLogEntries
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/task-id"
        - in: query
          name: task-type
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskLogEntriesResponse"
  "/task-logs/{task-id}/entries":
    get:
      tags:
        - Affiliate
      summary: Returns the entries from a task log id
      operationId: getTaskLogEntries
      parameters:
        - $ref: "#/components/parameters/task-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskLogEntriesResponse"
  /task-logs:
    get:
      tags:
        - System
      summary: Returns all task logs for the system
      operationId: getTaskLogs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskLogsResponse"
  "/affiliates/{affiliate-id}/task-logs":
    get:
      tags:
        - Affiliate
      summary: Returns all task logs for the given affiliate
      operationId: getAffiliateTaskLogs
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskLogsResponse"
  "/task-logs/{task-id}":
    delete:
      tags:
        - System
      summary: Removes the given task log
      operationId: removeTaskLog
      parameters:
        - $ref: "#/components/parameters/task-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /task-logs-cleanup:
    post:
      tags:
        - System
      summary: Removes the irrelevant task log from the system
      operationId: removeIrrelevantTaskLogs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/devices/{device-id}/sync-state-snapshots":
    get:
      tags:
        - Device
      summary: Returns a list of sync state snapshots for the given device
      operationId: getDeviceSyncStateSnapshots
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
  "/state-snapshots/{sync-state-snapshot-id}":
    get:
      tags:
        - Device
      summary: Returns the sync state snapshot info for the given id
      operationId: getSyncStateSnapshot
      parameters:
        - in: path
          name: sync-state-snapshot-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSyncStateSnapshotResponse"
  "/affiliates/{affiliate-id}/device-return-status-report":
    get:
      tags:
        - Affiliate
      summary: Returns the device return status report
      operationId: getDeviceReturnStatusReport
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReportResponse"
  "/affiliates/{affiliate-id}/device-isntallation-status-report":
    get:
      tags:
        - Affiliate
      summary: Returns the device installation status report
      operationId: getDeviceInstallationStatusReport
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetReportResponse"
  "/affiliates/{affiliate-id}/usb-return-results":
    get:
      tags:
        - Affiliate
      summary: Returns a list of all usb return results for the given affiliate
      operationId: getAffiliateUsbReturnResults
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsbReturnResultsResponse"
    post:
      tags:
        - Affiliate
      summary: Process the usb return scan
      operationId: createUsbReturnResult
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsbReturnKeys"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
  "/usb-return-results/{usb-return-result-id}":
    get:
      tags:
        - System
      summary: Returns a single usb return result
      operationId: getUsbReturnResult
      parameters:
        - $ref: "#/components/parameters/usb-return-result-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsbReturnResultResponse"
    delete:
      tags:
        - System
      summary: Removes a usb return result
      operationId: removeUsbReturnResult
      parameters:
        - $ref: "#/components/parameters/usb-return-result-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/usb-return-results/{usb-return-result-id}/comment":
    put:
      tags:
        - System
      summary: Updates the comment for the given usb return result
      operationId: editUsbReturnResultComment
      parameters:
        - $ref: "#/components/parameters/usb-return-result-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsbReturnResultResponse"
  /logs:
    get:
      tags:
        - System
      summary: Returns the system logs
      operationId: getLogs
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSystemLogsResponse"
  /user-rights-roles:
    get:
      tags:
        - System
      summary: Returns the user rights roles for the system
      operationId: getUserRightsRoles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRolesResponse"
  "/affiliates/{affiliate-id}/user-rights-roles":
    get:
      tags:
        - Affiliate
      summary: Returns the user rights roles for the given affiliate
      operationId: getAffiliateUserRightsRoles
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRolesResponse"
  "/brands/{brand-id}/user-rights-roles":
    get:
      tags:
        - Brand
      summary: Returns the user rights roles for the given brand
      operationId: getBrandUserRightsRoles
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRolesResponse"
  "/stores/{store-id}/user-rights-roles":
    get:
      tags:
        - Store
      summary: Returns the user rights roles for the given store
      operationId: getStoreUserRightsRoles
      parameters:
        - $ref: "#/components/parameters/store-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRolesResponse"
  "/user-rights-roles/{user-rights-role-id}":
    get:
      tags:
        - System
      summary: Returns a single user rights role
      operationId: getUserRightsRole
      parameters:
        - $ref: "#/components/parameters/user-rights-role-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRoleResponse"
  /user-rights-permissions:
    get:
      tags:
        - System
      summary: Returns the requested permissions
      operationId: getUserRightsPermissionDetailedEntries
      parameters:
        - in: query
          name: user-rights-role-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsPermissionDetailedEntriesR\
                  esponse"
    put:
      tags:
        - System
      summary: Update a user rights permission
      operationId: updateUserRightsPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRightsPermission"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /user-rights-role-assignments:
    get:
      tags:
        - System
      summary: Get all the user rights role assignments
      operationId: getUserRightsRoleAssignments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRoleAssignmentsResponse"
    post:
      tags:
        - System
      summary: Assign roles to users
      operationId: assignSystemRoles
      requestBody:
        $ref: "#/components/requestBodies/RoleAssignments"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
    delete:
      tags:
        - System
      summary: Revoke roles to user
      operationId: revokeSystemRoles
      parameters:
        - in: query
          name: target-instance-ids
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/affiliates/{affiliate-id}/user-rights-role-assignments":
    get:
      tags:
        - Affiliate
      summary: Get all the user rights role assignments for the given affiliate
      operationId: getAffiliateUserRightsRoleAssignments
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRoleAssignmentsResponse"
    post:
      tags:
        - Affiliate
      summary: Assign roles to users for the given affiliate
      operationId: assignAffiliateRoles
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        $ref: "#/components/requestBodies/RoleAssignments"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
    delete:
      tags:
        - Affiliate
      summary: Revokes roles to user
      operationId: revokeAffiliateRoles
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: query
          name: target-instance-ids
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/user-rights-role-assignments":
    get:
      tags:
        - Brand
      summary: Get all the user rights role assignments for the given brand
      operationId: getBrandUserRightsRoleAssignments
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserRightsRoleAssignmentsResponse"
    post:
      tags:
        - Brand
      summary: Assign roles to users for the given brand
      operationId: assignBrandRoles
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/RoleAssignments"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
    delete:
      tags:
        - Brand
      summary: Revokes roles to user
      operationId: revokeBrandRoles
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: target-instance-ids
          required: true
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/clap-bucket-urls/{public-key}":
    get:
      tags:
        - System
      summary: Returns a clap bucket url for the given public key
      operationId: getClapBucketUrl
      parameters:
        - in: path
          name: public-key
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
  "/brands/{brand-id}/pushed-device-configs":
    post:
      tags:
        - Brand
      summary: Push the config of all of the brand's devices
      operationId: pushConfigToAllBrandDevices
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/message-calendars/{message-calendar-id}/message-events":
    get:
      tags:
        - Messaging
      summary: Returns message events for a given message calendar
      operationId: getMessageEventsInMessageCalendar
      parameters:
        - $ref: "#/components/parameters/message-calendar-id"
        - in: query
          name: preview-included
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageEventsResponse"
    post:
      tags:
        - Messaging
      summary: Add a message event to the given message calendar
      operationId: addMessageEventToMessageCalendar
      parameters:
        - $ref: "#/components/parameters/message-calendar-id"
      requestBody:
        $ref: "#/components/requestBodies/MessageEventCoreWithTimeListEntries"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageEventResponse"
  "/message-events/{message-event-id}":
    get:
      tags:
        - Messaging
      summary: Returns a message event
      operationId: getMessageEvent
      parameters:
        - $ref: "#/components/parameters/message-event-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageEventResponse"
    put:
      tags:
        - Messaging
      summary: Updates a message event
      operationId: updateMessageEvent
      parameters:
        - $ref: "#/components/parameters/message-event-id"
      requestBody:
        $ref: "#/components/requestBodies/MessageEventCoreWithTimeListEntries"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageEventResponse"
    delete:
      tags:
        - Messaging
      summary: Deletes a message event
      operationId: removeMessageEvent
      parameters:
        - $ref: "#/components/parameters/message-event-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /message-events-preview:
    post:
      tags:
        - Messaging
      summary: Returns the preview for a given message event
      operationId: getMessageEventsPreview
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageEventsPreviewRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
  "/message-events/{message-event-id}/time-list-entries":
    get:
      tags:
        - Messaging
      summary: Returns the time list entries for a given message event
      operationId: getMessageEventTimeListEntries
      parameters:
        - $ref: "#/components/parameters/message-event-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeListEntriesResponse"
  "/brands/{brand-id}/message-calendars":
    get:
      tags:
        - Messaging
      summary: Returns the message calendars for the given brand
      operationId: getBrandMessageCalendars
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenericPairsResponse"
    post:
      tags:
        - Messaging
      summary: Creates a new message calendar in the given brand
      operationId: addMessageCalendarToBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/NewMessageCalendar"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageCalendarResponse"
  "/message-calendars/{message-calendar-id}":
    put:
      tags:
        - Messaging
      summary: Updates a message calendar
      operationId: updateMessageCalendar
      parameters:
        - $ref: "#/components/parameters/message-calendar-id"
      requestBody:
        $ref: "#/components/requestBodies/NewMessageCalendar"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageCalendarResponse"
    delete:
      tags:
        - Messaging
      summary: Removes a message calendar
      operationId: removeMessageCalendar
      parameters:
        - $ref: "#/components/parameters/message-calendar-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/messages":
    get:
      tags:
        - Messaging
      summary: Returns all of the messages of a given brand
      operationId: getBrandMessages
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: query
          name: only-valid
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessagesResponse"
    post:
      tags:
        - Messaging
      summary: Adds a message to the given brand
      operationId: addMessageToBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/AddMessageToBrand"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageResponse"
  "/messages/{message-id}":
    put:
      tags:
        - Messaging
      summary: Updates a message
      operationId: updateMessage
      parameters:
        - $ref: "#/components/parameters/message-id"
      requestBody:
        $ref: "#/components/requestBodies/AddMessageToBrand"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessageResponse"
    delete:
      tags:
        - Messaging
      summary: Removes a message
      operationId: removeMessage
      parameters:
        - $ref: "#/components/parameters/message-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/brands/{brand-id}/languages":
    get:
      tags:
        - Messaging
      summary: Returns the languages linked to the given brand
      operationId: getBrandLanguages
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLanguagesResponse"
  "/brands/{brand-id}/screens":
    post:
      tags:
        - Screen
      summary: Import screens in the given brand
      operationId: importScreens
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringListResponse"
  "/screens/{screen-id}/administrative-status":
    put:
      tags:
        - Screen
      summary: Update the administrative status of a screen. Requires administration
        user rights.
      operationId: updateScreenAdministrativeStatus
      parameters:
        - $ref: "#/components/parameters/screen-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenAdministrativeStatusUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScreenResponse"
  "/screens/{screen-id}":
    get:
      tags:
        - Screen
      summary: Returns a screen
      operationId: getScreen
      parameters:
        - $ref: "#/components/parameters/screen-id"
        - in: query
          name: include-mi-monitoring-info
          required: false
          schema:
            type: boolean
            default: false
        - in: query
          name: include-mi-screenshot
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScreenResponse"
    put:
      tags:
        - Screen
      summary: Update a screen
      operationId: updateScreen
      parameters:
        - $ref: "#/components/parameters/screen-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenUpdateInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetScreenResponse"
  "/screens/{screen-id}/published-states":
    post:
      tags:
        - Screen
      summary: Publish the screen schedule
      operationId: publishScreen
      parameters:
        - $ref: "#/components/parameters/screen-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /signage-legacy/getObjectAndFieldPermissions:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getObjectAndFieldPermissions
      operationId: getObjectAndFieldPermissions
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/createPlaylist:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for createPlaylist
      operationId: createPlaylist
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/updatePlaylistEntries:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for updatePlaylistEntries
      operationId: updatePlaylistEntries
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/updatePlaylistEntry:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for updatePlaylistEntry
      operationId: updatePlaylistEntry
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/updatePlaylistDefaultItem:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for updatePlaylistDefaultItem
      operationId: updatePlaylistDefaultItem
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/updateItems:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for updateItems
      operationId: updateItems
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/removeItems:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for removeItems
      operationId: removeItems
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/unremoveMedias:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for unremoveMedias
      operationId: unremoveMedias
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getReferencingItems:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getReferencingItems
      operationId: getReferencingItems
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getPlaylists:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getPlaylists
      operationId: getPlaylists
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getPlaylistEntries:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getPlaylistEntries
      operationId: getPlaylistEntries
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getMedias:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getMedias
      operationId: getMedias
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getStationStyles:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getStationStyles
      operationId: getStationStyles
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getPlayerPlaybackStates:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getPlayerPlaybackStates
      operationId: getPlayerPlaybackStates
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getItems:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getItems
      operationId: getItems
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/publish:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for publish
      operationId: publish
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/cancelPublish:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for cancelPublish
      operationId: cancelPublish
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/updatePublish:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for updatePublish
      operationId: updatePublish
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getUpcomingPublishDates:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getUpcomingPublishDates
      operationId: getUpcomingPublishDates
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getPreviewData:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getPreviewData
      operationId: getPreviewData
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  "/signage-legacy/uploadAsset/{brand-id}":
    post:
      tags:
        - Signage
      summary: Legacy endpoint for uploadAsset
      operationId: uploadAsset
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                upload-guid:
                  type: string
              required:
                - file
                - upload-guid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  "/signage-legacy/updateAsset/{brand-id}/{programmable-id}":
    post:
      tags:
        - Signage
      summary: Legacy endpoint for updateAsset
      operationId: updateAsset
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - in: path
          name: programmable-id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file-for-update:
                  type: string
                  format: binary
              required:
                - file-for-update
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/addBrandLog:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for addBrandLog
      operationId: addBrandLog
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getStoresData:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getStoresData
      operationId: getStoresData
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  /signage-legacy/getTagsData:
    post:
      tags:
        - Signage
      summary: Legacy endpoint for getTagsData
      operationId: getTagsData
      requestBody:
        $ref: "#/components/requestBodies/FakeSignageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSignageResponse"
  "/brands/{brand-id}/logs":
    get:
      tags:
        - Brand
      summary: Returns the logs for the given brand
      operationId: getBrandLogs
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBrandLogsResponse"
  "/brands/{brand-id}/mi-setup":
    put:
      tags:
        - Brand
      summary: Initialize everything needed in the brand to be a functional Magic Info
        brand.
      operationId: magicInfoInitialSetup
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  "/devices/{device-id}/basic-shipping-label":
    get:
      tags:
        - Shipping
      summary: Returns a basic shipping label
      operationId: getBasicShippingLabel
      parameters:
        - $ref: "#/components/parameters/device-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicShippingLabelResponse"
  "/brands/{brand-id}/shipping-groups":
    get:
      tags:
        - Shipping
      summary: Return the shipping groups of the given brand
      operationId: getBrandShippingGroups
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingGroupsResponse"
    post:
      tags:
        - Shipping
      summary: Creates a new shipping group in the given brand
      operationId: createShippingGroup
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/NewShippingGroup"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingGroupsResponse"
  "/shipping-groups/{shipping-group-id}":
    put:
      tags:
        - Shipping
      summary: Update a given shipping group
      operationId: updateShippingGroup
      parameters:
        - $ref: "#/components/parameters/shipping-group-id"
      requestBody:
        $ref: "#/components/requestBodies/NewShippingGroup"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingGroupsResponse"
  "/shipping-groups/{shipping-group-id}/shipping-info-list":
    get:
      tags:
        - Shipping
      summary: Returns the shipping info list for the given shipping group
      operationId: getShippingGroupShippingInfoList
      parameters:
        - $ref: "#/components/parameters/shipping-group-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingInfoListResponse"
  "/shipping-usb-updates/{shipping-usb-update-id}/stores":
    put:
      tags:
        - Shipping
      summary: Update the stores linked to a given shipping usb update
      operationId: updateShippingUsbUpdateLinkedStores
      parameters:
        - $ref: "#/components/parameters/shipping-usb-update-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShippingUsbUpdateLinkedStoresInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateShippingUsbUpdateLinkedStoresResp\
                  onse"
  "/brands/{brand-id}/addresses/{address-id}/shipping-info-list":
    get:
      tags:
        - Shipping
      summary: Returns the shipping info list for the given address
      operationId: getAddressShippingInfoList
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/address-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingInfoListResponse"
  "/stores/{store-id}/shipping-info-list":
    get:
      tags:
        - Shipping
      summary: Returns the shipping info list for the given store
      operationId: getStoreShippingInfoList
      parameters:
        - $ref: "#/components/parameters/store-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingInfoListResponse"
  "/affiliates/{affiliate-id}/shipping-info-list":
    post:
      tags:
        - Shipping
      summary: Creates a shipping info
      operationId: createShippingInfo
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewShippingInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingInfoResponse"
  "/affiliates/{affiliate-id}/shipping-info-list/{shipping-info-id}":
    get:
      tags:
        - Shipping
      summary: Returns the given shipping info
      operationId: getShippingInfo
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - in: path
          name: shipping-info-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetShippingInfoResponse"
  "/affiliates/{affiliate-id}/addresses/{address-id}/basic-shipping-label":
    get:
      tags:
        - Shipping
      summary: Returns the basic shipping label for the given affiliate/address pair
      operationId: getAddressBasicShippingLabel
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - $ref: "#/components/parameters/address-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBasicShippingLabelResponse"
  "/devices/{device-id}/print-device-request":
    put:
      tags:
        - Shipping
      summary: Update the status of a device and return all of the info to print the
        device and the label for the shipping
      operationId: requestPrintDevice
      parameters:
        - $ref: "#/components/parameters/device-id"
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDevicePrintRequestInfoResponse"
  /web-socket-throttler-logs:
    get:
      tags:
        - System
      summary: Returns the web socket throttler's logs
      operationId: getWebSocketThrottlerLogs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWebSocketLogsResponse"
  /web-socket-throttler-settings:
    put:
      tags:
        - System
      summary: Update the settings of the web socket throttler
      operationId: updateWebSocketThrottlerSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebSocketThrottlerSettings"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /app-current-language:
    get:
      tags:
        - System
      summary: Returns the current application language
      operationId: getApplicationLanguage
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
    put:
      tags:
        - System
      summary: Updates the current application language and returns it
      operationId: updateApplicationLanguage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationLanguage"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
  /user-settings-request:
    get:
      tags:
        - User
      summary: Get a user's settings request
      operationId: getUserSettingsRequest
      parameters:
        - in: query
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserSettingsRequestResponse"
  /password-request:
    post:
      tags:
        - User
      summary: Creates a password request
      operationId: requestPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPasswordInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /default-affiliate-support-info:
    get:
      tags:
        - System
      summary: Returns the default affiliate support info
      operationId: getDefaultAffiliateSupportInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAffiliateSupportInfoResponse"
  /version:
    get:
      tags:
        - System
      summary: Returns the current version of Control Site
      operationId: getVersion
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStringResponse"
  /login:
    post:
      tags:
        - User
      summary: Logs the user in the system
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginResponse"
  /logout:
    post:
      tags:
        - User
      summary: Logs the user out of the system
      operationId: logout
      requestBody:
        $ref: "#/components/requestBodies/EmptyObject"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /password-change-request:
    post:
      tags:
        - User
      summary: Creates a password change request
      operationId: requestPasswordChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChangeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /csv-creator-info:
    get:
      tags:
        - System
      summary: Returns information about the CSV creator
      operationId: getCSVCreatorInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCSVCreatorInfoResponse"
  /current-user-system-permissions:
    get:
      tags:
        - User
      summary: Returns permissions needed by the front-end for the system level
      operationId: getCurrentUserSystemPermissions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFrontEndPermissionsResponse"
  /current-user-affiliate-permissions:
    get:
      tags:
        - User
      summary: Returns permissions needed by the front-end for the given affiliate level
      operationId: getCurrentUserAffiliatePermissions
      parameters:
        - in: query
          name: affiliate-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFrontEndPermissionsResponse"
  /current-user-brand-permissions:
    get:
      tags:
        - User
      summary: Returns permissions needed by the front-end for the given brand level
      operationId: getCurrentUserBrandPermissions
      parameters:
        - in: query
          name: brand-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFrontEndPermissionsResponse"
  /current-user-store-permissions:
    get:
      tags:
        - User
      summary: Returns permissions needed by the front-end for the given store level
      operationId: getCurrentUserStorePermissions
      parameters:
        - in: query
          name: store-id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFrontEndPermissionsResponse"
  /authorized-view-types-info:
    get:
      tags:
        - Authorization
      summary: Returns the authorized system view types info
      operationId: getAuthorizedSystemViewTypesInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizedViewTypesInfoResponse"
  "/affiliates/{affiliate-id}/authorized-view-types-info":
    get:
      tags:
        - Authorization
      summary: Returns the authorized affiliate view types info for the given affiliate
      operationId: getAuthorizedAffiliateViewTypesInfo
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizedViewTypesInfoResponse"
  "/brands/{brand-id}/authorized-view-types-info":
    get:
      tags:
        - Authorization
      summary: Returns the authorized brand view types info for the given brand
      operationId: getAuthorizedBrandViewTypesInfo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizedViewTypesInfoResponse"
  /authorization-related-affiliates:
    get:
      tags:
        - Authorization
      summary: Returns the current user's affiliates that are parent of all the access
        rights he owns
      operationId: getAuthorizationRelatedAffiliates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizationRelatedAffiliatesRespon\
                  se"
  "/authorization-related-affiliates/{affiliate-id}/authorization-related-brands":
    get:
      tags:
        - Authorization
      summary: Returns the current user's brands that are parent of all the access
        rights he owns and that are under the given affiliate id
      operationId: getAuthorizationRelatedAffiliateBrands
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAuthorizationRelatedBrandsResponse"
  /media-feeds:
    get:
      tags:
        - MediaFeed
      summary: Returns a list of all the media feeds available
      operationId: getMediaFeeds
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
  "/brands/{brand-id}/media-feed-logs":
    get:
      tags:
        - MediaFeed
      summary: Returns the logs of a brand's media feeds
      operationId: getBrandMediaFeedLogs
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedLogsResponse"
  "/affiliates/{affiliate-id}/media-feed-logs":
    get:
      tags:
        - MediaFeed
      summary: Returns the logs of an affiliate's media feeds
      operationId: getAffiliateMediaFeedLogs
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/from-timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedLogsResponse"
  "/affiliates/{affiliate-id}/media-feeds":
    get:
      tags:
        - MediaFeed
      summary: Returns the media feeds available for the given affiliate
      operationId: getAffiliateMediaFeeds
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
    post:
      tags:
        - MediaFeed
      summary: Link a media feed to the given affiliate and returns the updated
        affiliate's media feeds
      operationId: linkToAffiliate
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      requestBody:
        $ref: "#/components/requestBodies/MediaFeedLink"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
  "/brands/{brand-id}/media-feeds":
    get:
      tags:
        - MediaFeed
      summary: Returns the media feeds available for the given brand
      operationId: getBrandMediaFeeds
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
    post:
      tags:
        - MediaFeed
      summary: Link a media feed to the given brand and returns the updated brand's
        media feeds
      operationId: linkToBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/MediaFeedLink"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
  "/brands/{brand-id}/feature-types":
    get:
      tags:
        - Brand
      summary: Returns all available feature types for the given brand
      operationId: getBrandFeatureTypes
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFeatureTypesResponse"
  "/outputs/{output-id}/media-feeds":
    get:
      tags:
        - MediaFeed
      summary: Returns the media feeds available for the given output
      operationId: getOutputMediaFeeds
      parameters:
        - $ref: "#/components/parameters/output-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
    post:
      tags:
        - MediaFeed
      summary: Link a media feed to the given output and returns the updated output's
        media feeds
      operationId: linkToOutput
      parameters:
        - $ref: "#/components/parameters/output-id"
      requestBody:
        $ref: "#/components/requestBodies/MediaFeedLink"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
  "/affiliates/{affiliate-id}/media-feeds/{media-feed-id}":
    delete:
      tags:
        - MediaFeed
      summary: Unlink the given media feed from the given affiliate and returns the
        updated affiliate's media feeds
      operationId: unlinkFromAffiliate
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
        - $ref: "#/components/parameters/media-feed-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
  "/brands/{brand-id}/media-feeds/{media-feed-id}":
    delete:
      tags:
        - MediaFeed
      summary: Unlink the given media feed from the given brand and returns the updated
        brand's media feeds
      operationId: unlinkFromBrand
      parameters:
        - $ref: "#/components/parameters/brand-id"
        - $ref: "#/components/parameters/media-feed-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMediaFeedsResponse"
  /media-feed-notification:
    post:
      tags:
        - MediaFeed
      summary: To notify the devices linked to this media feed
      operationId: notifyDevices
      parameters:
        - in: header
          name: X-API-Key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MediaFeedNotification"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
  /industry-types:
    get:
      tags:
        - System
      summary: Returns all industry types in the system
      operationId: getIndustryTypes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetIndustryTypesResponse"
  /billing-subscription-plans:
    get:
      tags:
        - System
      summary: Returns all billing subscription plans in the system
      operationId: getBillingSubscriptionPlans
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBillingSubscriptionPlansResponse"
  "/affiliates/{affiliate-id}/product-types":
    get:
      tags:
        - Affiliate
      summary: Returns all product types for the given affiliate
      operationId: getAffiliateProductTypes
      parameters:
        - $ref: "#/components/parameters/affiliate-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductTypesResponse"
  "/galaxie-api-accounts/{galaxie-api-account-id}/activation-key-reset":
    post:
      tags:
        - GalaxieApiAccount
      summary: Resets the activation key for the given Galaxie Api account
      operationId: resetActivationKey
      parameters:
        - $ref: "#/components/parameters/galaxie-api-account-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetActivationKeyResponse"
  "/brands/{brand-id}/galaxie-api-accounts":
    get:
      tags:
        - GalaxieApiAccount
      summary: Returns the list of Galaxie Api accounts for the given brand
      operationId: getBrandGalaxieApiAccounts
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandGalaxieApiAccountsResponse"
  /self-serve-subscription:
    post:
      tags:
        - User
      summary: Subscribes a user from the self-serve acquisition flow
      operationId: subscribeFromSelfServe
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelfServeSubscriptionInfo"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfServeSubscriptionResponse"
  "/brands/{brand-id}/self-serve-brand-initialization":
    post:
      tags:
        - Brand
      summary: Initializes the brand from self-serve flow
      operationId: initializeBrandFromSelfServe
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/CompanyInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfServeBrandInitializationResponse"
  "/brands/{brand-id}/self-serve-brand-finalization":
    post:
      tags:
        - Brand
      summary: Finalizes the activation of the given brand from the self-serve flow
      operationId: finalizeBrandActivationFromSelfServe
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecurlyToken"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfServeBrandFinalizationResponse"
  "/billing-subscriptions/{billing-subscription-id}":
    get:
      tags:
        - Brand
      summary: Gets a billing subscription
      operationId: getBillingSubscription
      parameters:
        - $ref: "#/components/parameters/billing-subscription-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingSubscriptionResponse"
    put:
      tags:
        - Brand
      summary: Updates a billing subscription
      operationId: updateBillingSubscription
      parameters:
        - $ref: "#/components/parameters/billing-subscription-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingSubscriptionUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingSubscriptionResponse"
  "/brands/{brand-id}/billing-info":
    get:
      tags:
        - Brand
      summary: Returns the billing account's billing info
      operationId: getBillingInfo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInfoResponse"
    put:
      tags:
        - Brand
      summary: Updates the billing account info
      operationId: createOrUpdateBillingInfo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingInfoUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingInfoResponse"
  "/brands/{brand-id}/billing-subscriptions":
    get:
      tags:
        - Brand
      summary: Returns the brand's billing subscriptions
      operationId: getBillingSubscriptions
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingSubscriptionsResponse"
  "/brands/{brand-id}/invoices":
    get:
      tags:
        - Brand
      summary: Returns the billing account's invoices
      operationId: getBillingAccountInvoices
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingAccountInvoicesResponse"
  "/brands/{brand-id}/account-address":
    get:
      tags:
        - Brand
      summary: Returns the billing account's address
      operationId: getBillingAccountAddress
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingAccountAddressResponse"
    put:
      tags:
        - Brand
      summary: Updates the billing account's address
      operationId: updateBillingAccountAddress
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillingAccountAddressUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingAccountAddressResponse"
  "/invoices/{encrypted-invoice-id}":
    get:
      tags:
        - Brand
      summary: Gets a PDF version of a billing invoice
      operationId: getBillingAccountInvoicePdf
      parameters:
        - $ref: "#/components/parameters/encrypted-invoice-id"
      responses:
        "200":
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
  /self-serve-flow-settings:
    get:
      tags:
        - System
      summary: Gets a the self-serve flow settings
      operationId: getSelfServeFlowSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SelfServeFlowSettingsResponse"
  "/brands/{brand-id}/company-info":
    get:
      tags:
        - Brand
      summary: Returns the company's info
      operationId: getCompanyInfo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyInfoResponse"
    put:
      tags:
        - Brand
      summary: Updates the company's info
      operationId: updateCompanyInfo
      parameters:
        - $ref: "#/components/parameters/brand-id"
      requestBody:
        $ref: "#/components/requestBodies/CompanyInfo"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyInfoResponse"
  "/sbx-tech/{sbx-tech-id}":
    get:
      tags:
        - Tech
      summary: Returns the SBX Tech
      operationId: getSbxTech
      parameters:
        - $ref: "#/components/parameters/sbx-tech-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SbxTechResponse"
    put:
      tags:
        - Tech
      summary: Updates the SBX Tech
      operationId: updateSbxTech
      parameters:
        - $ref: "#/components/parameters/sbx-tech-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SbxTechUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SbxTechResponse"
  /feature-flags-cache:
    delete:
      tags:
        - System
      summary: Invalidate all entries in the feature flag cache
      operationId: invalidateFeatureFlagCache
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultMetaOnlyResponse"
servers:
  - url: //localhost:9000/api
components:
  parameters:
    affiliate-id:
      in: path
      name: affiliate-id
      required: true
      schema:
        type: integer
        format: int64
    brand-id:
      in: path
      name: brand-id
      required: true
      schema:
        type: integer
        format: int64
    ip-address-filter-id:
      in: path
      name: ip-address-filter-id
      required: true
      schema:
        type: integer
        format: int64
    role-id:
      in: path
      name: role-id
      required: true
      schema:
        type: integer
        format: int64
    station-id:
      in: path
      name: station-id
      required: true
      schema:
        type: integer
        format: int64
    uuid:
      in: path
      name: uuid
      required: true
      schema:
        type: string
    device-id:
      in: path
      name: device-id
      required: true
      schema:
        type: string
    output-id:
      in: path
      name: output-id
      required: true
      schema:
        type: integer
        format: int64
    tag-category-id:
      in: path
      name: tag-category-id
      required: true
      schema:
        type: integer
        format: int64
    station-schedule-style-id:
      in: path
      name: station-schedule-style-id
      required: true
      schema:
        type: integer
        format: int64
    hardware-id:
      in: path
      name: hardware-id
      required: true
      schema:
        type: integer
        format: int64
    hardware-model-id:
      in: path
      name: hardware-model-id
      required: true
      schema:
        type: integer
        format: int64
    store-id:
      in: path
      name: store-id
      required: true
      schema:
        type: integer
        format: int64
    software-id:
      in: path
      name: software-id
      required: true
      schema:
        type: integer
        format: int64
    image-id:
      in: path
      name: image-id
      required: true
      schema:
        type: integer
        format: int64
    address-id:
      in: path
      name: address-id
      required: true
      schema:
        type: integer
        format: int64
    zone-index:
      in: path
      name: zone-index
      required: true
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 2
    zone-id:
      in: path
      name: zone-id
      required: true
      schema:
        type: integer
        format: int64
    limit:
      in: query
      name: limit
      required: true
      schema:
        type: integer
        format: int32
    from-timestamp:
      in: query
      name: from-timestamp
      required: true
      schema:
        type: string
    use-store-time-zone:
      in: query
      name: use-store-time-zone
      required: true
      schema:
        type: boolean
    task-id:
      in: path
      name: task-id
      required: true
      schema:
        type: integer
        format: int64
    usb-return-result-id:
      in: path
      name: usb-return-result-id
      required: true
      schema:
        type: integer
        format: int64
    user-rights-role-id:
      in: path
      name: user-rights-role-id
      required: true
      schema:
        type: integer
        format: int64
    message-event-id:
      in: path
      name: message-event-id
      required: true
      schema:
        type: integer
        format: int64
    message-calendar-id:
      in: path
      name: message-calendar-id
      required: true
      schema:
        type: integer
        format: int64
    message-id:
      in: path
      name: message-id
      required: true
      schema:
        type: integer
        format: int64
    screen-id:
      in: path
      name: screen-id
      required: true
      schema:
        type: integer
        format: int64
    shipping-group-id:
      in: path
      name: shipping-group-id
      required: true
      schema:
        type: integer
        format: int64
    shipping-usb-update-id:
      in: path
      name: shipping-usb-update-id
      required: true
      schema:
        type: integer
        format: int64
    device-lifecycle-status-id:
      in: path
      name: device-lifecycle-status-id
      required: true
      schema:
        type: integer
        format: int64
    user-id:
      in: path
      name: user-id
      required: true
      schema:
        type: integer
        format: int64
    media-feed-id:
      in: path
      name: media-feed-id
      required: true
      schema:
        type: integer
        format: int64
    galaxie-api-account-id:
      in: path
      name: galaxie-api-account-id
      required: true
      schema:
        type: integer
        format: int64
    billing-subscription-id:
      in: path
      name: billing-subscription-id
      required: true
      schema:
        type: integer
        format: int64
    encrypted-invoice-id:
      in: path
      name: encrypted-invoice-id
      required: true
      schema:
        type: string
    sbx-tech-id:
      in: path
      name: sbx-tech-id
      required: true
      schema:
        type: integer
        format: int64
  requestBodies:
    AddMessageToBrand:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/AddMessageForm"
    IntegerIDUpdateInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IntegerIDUpdateInfo"
      required: true
    MessageEventCoreWithTimeListEntries:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MessageEventCoreWithTimeListEntries"
      required: true
    ZoneCore:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ZoneCore"
      required: true
    NewMessageCalendar:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewMessageCalendar"
      required: true
    StationAssignationInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StationAssignationInfo"
      required: true
    NewShippingGroup:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewShippingGroup"
      required: true
    RoleAssignments:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RoleAssignments"
      required: true
    NewStationScheduleStyle:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewStationScheduleStyle"
      required: true
    importStores:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/ImportStoresForm"
    NewUser:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewUser"
      required: true
    ActorInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ActorInfo"
      required: true
    EmptyObject:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmptyObject"
      required: true
    AffiliateCore:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AffiliateCore"
      required: true
    AddressCore:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AddressCore"
      required: true
    DeviceLifecycleStatusCore:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeviceLifecycleStatusCore"
      required: true
    PasswordResetInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PasswordResetInfo"
      required: true
    NetworkConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NetworkConfig"
      required: true
    FakeSignageBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/FakeSignageBody"
      required: true
    MediaFeedLink:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MediaFeedLink"
      required: true
    CompanyInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CompanyInfo"
      required: true
  schemas:
    EmptyObject:
      type: object
      description: Empty object used for POST or PUT that doesn't shouldn't have body but
        need one to pass play framework validation
      properties:
        unused:
          type: string
          description: Just to prevent generation error
    Error:
      type: object
      description: This represent an error normally linked to a specific item from a
        previous request
      required:
        - type
      properties:
        type:
          type: string
          description: Usually contains the simple name of the exception
          default: GenericException
          example: GenericException
        itemInfo:
          $ref: "#/components/schemas/ItemId"
        details:
          type: string
          description: Simple explanation of the error
          example: Could not update that field
        exception:
          type: string
          description: Message of the exception that will help developer to debug this
            problem if needed
          example: DBException + stack trace
    ItemId:
      type: object
      description: Simplified identifier of an item
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: Unique identifier of the item
          example: "45"
        type:
          type: string
          description: playlist
          example: "5667"
    TaskFailure:
      type: object
      description: Id and reason for the failure of a particular item in a task.
      required:
        - id
        - reason
      properties:
        id:
          type: string
          description: Id of failed item in task
          example: "123456"
        reason:
          type: string
          description: Reason for failure of an item in the task
          example: anything
    ResponseMeta:
      type: object
      description: Mandatory part of each response given by our API
      required:
        - code
      properties:
        code:
          type: string
          description: Code returned by the function
          default: Ok
          enum:
            - Ok
            - Generic_Exception
            - Field_Error_Exception
            - Image_Validation_Exception
            - Invalid_Container_Creation_With_No_Default_Asset_Exception
            - Invalid_Override_Mode_Exception
            - Invalid_Tag_Exception
            - Item_Use_Exception
            - Missing_Platform_For_Software_Exception
            - Missing_Software_For_Platform_Exception
            - Platform_Not_Supported_Exception
            - Refresh_Data_Exception
            - Role_Assignment_Exception
            - Task_Already_Running_Exception
            - Logged_Out_Exception
            - Authorization_Exception
            - Unauthorized_Action_For_Current_User_Exception
            - User_Already_Exists_But_Is_Not_Authenticated_Exception
            - User_Already_Has_Active_Or_Closed_Galaxie_Api_Product_Exception
            - User_Already_Has_Multiple_Galaxie_Api_Products_Exception
            - Recurly_Api_Exception
            - Recurly_Transaction_Error_Exception
          example: Ok
        detail:
          type: string
          description: Explanation of what went wrong
          example: this is some detail about the error or the success
        exception:
          type: string
          description: Message of the exception that will help developer to debug this
            problem if needed
          example: IOException + stack trace
        type:
          type: string
          description: Type of error
          example: Invalid Token
        errors:
          type: array
          description: An array of all the specific error encountered during the request
          items:
            $ref: "#/components/schemas/Error"
    ActorInfo:
      type: object
      description: Info about an actor in the MAW actor system
      required:
        - actorPath
      properties:
        actorPath:
          type: string
          example: /user/synchronizer
    ResendTwoFactorEmailInfo:
      type: object
      description: Information necessary to resend a two-factor email
      required:
        - userIds
      properties:
        userIds:
          type: array
          description: List of ids for users that will receive the two-factor
            authentication setup email
          items:
            type: integer
            format: int64
    UpdateLoginSettingsInfo:
      type: object
      description: Information necessary to update the login settings for users
      required:
        - userIds
        - loginSettings
      properties:
        userIds:
          type: array
          description: List of ids for users that will have their login settings updated
          items:
            type: integer
            format: int64
        loginSettings:
          $ref: "#/components/schemas/LoginSettings"
    LoginSettings:
      type: object
      description: Login settings for a user
      properties:
        twoFactorAuthEnabled:
          type: boolean
          description: Indicates whether two-factor authentication is activated for a user
          example: true
        twoFactorAuthKey:
          type: string
          description: Two-factor authentication key of a user
          example: 123 abc
        twoFactorAuthQrCode:
          type: string
          description: Two-factor authentication key of a user formatted for a QR code
          example: anything
    UserSettingsRequest:
      type: object
      description: A user's settings' request
      required:
        - id
        - expired
        - userId
        - requestType
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user settings request
          example: 123
        userId:
          type: integer
          format: int64
          description: Unique identifier of the user settings request's user
          example: 123
        expired:
          type: boolean
          description: Indicates whether the user settings request is expired
          example: true
        requestType:
          $ref: "#/components/schemas/UserSettingsRequestType"
    UserSettingsRequestType:
      type: string
      enum:
        - changePassword
        - twoFactorAuthentication
      description: Type of user settings request
      example: changePassword
    User:
      type: object
      description: Basic Info about a User
      required:
        - id
        - name
        - email
        - lang
        - userPreferences
        - twoFactorAuthEnabled
      properties:
        id:
          type: integer
          format: int64
          example: 784
        name:
          type: string
          description: User's name
          example: John Snow
        twoFactorAuthEnabled:
          type: boolean
          description: Indicates whether a user must use two-factor authentication to login
          example: true
        email:
          type: string
          description: User's email
          example: jsnow@stingray.com
        lang:
          type: string
          description: Language the user is using right now
          example: en
        userPreferences:
          $ref: "#/components/schemas/UserPreferences"
    Affiliate:
      type: object
      description: >
        Basic info about an affiliate. An affiliate is the entity that contains
        all the brand. It is usally

        managed by an external company but Stingray is considered an Affiliate in the system.
      allOf:
        - $ref: "#/components/schemas/AffiliateCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the affiliate
              example: 24
    AffiliateCore:
      type: object
      description: Basic information of an affiliate
      required:
        - name
        - signageBrandsCreationAllowed
        - magicInfoBrandsCreationAllowed
        - libraryBrandsCreationAllowed
        - galaxieApiBrandsCreationAllowed
        - affiliateFedexShipperInfo
        - affiliateFedexShippingLabelInfo
        - affiliateSupportInfo
        - authorizedDomains
        - twoFactorAuthenticationRequired
      properties:
        name:
          type: string
          description: Name of the affiliate
          example: Stingray
        signageBrandsCreationAllowed:
          type: boolean
          description: Indicates whether creation of signage brands is allowed
          example: true
        magicInfoBrandsCreationAllowed:
          type: boolean
          description: Indicates whether creation of magic info brands is allowed
          example: true
        libraryBrandsCreationAllowed:
          type: boolean
          description: Indicates whether creation of library brands is allowed
          example: true
        galaxieApiBrandsCreationAllowed:
          type: boolean
          description: Indicates whether creation of Galaxie Api brands is allowed
          example: true
        affiliateFedexShipperInfo:
          $ref: "#/components/schemas/AffiliateFedexShipperInfo"
        affiliateFedexShippingLabelInfo:
          $ref: "#/components/schemas/AffiliateFedexShippingLabelInfo"
        affiliateSupportInfo:
          $ref: "#/components/schemas/AffiliateSupportInfo"
        authorizedDomains:
          type: string
          description: Domains allowed to access this affiliate
          example: stingray.com
        twoFactorAuthenticationRequired:
          type: boolean
          description: Indicates whether two factor authentication is required for access
            rights on this affiliate
          example: true
        logoUrlEn:
          type: string
          description: Affiliate logo's url in English
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/AffiliateLogos/1/logo.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180201T212021Z&X-Amz-SignedHeaders=host&X-Amz-Expires=172799&X-Amz-Credential=AKIAIGAX4BNTLDAQ4O2Q%2F20180201%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=ee58bc394a5ea264f557cbac07bfa4ac91b51978c24b943829ea01d0edd92e4f
        logoUrlFr:
          type: string
          description: Affiliate logo's url in French
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/AffiliateLogos/1/logo.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180201T212021Z&X-Amz-SignedHeaders=host&X-Amz-Expires=172799&X-Amz-Credential=AKIAIGAX4BNTLDAQ4O2Q%2F20180201%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=ee58bc394a5ea264f557cbac07bfa4ac91b51978c24b943829ea01d0edd92e4f
    MediaType:
      type: string
      enum:
        - AUDIO
        - VIDEO
        - ALBUM_COVER
        - UNKNOWN
      description: Type of media
      example: AUDIO
    FileFormat:
      type: string
      enum:
        - APKZ
        - APK
        - JAR
        - ZIP
        - DEB
        - TARGZ
      description: Format of software
      example: APK
    RelatedMediaType:
      type: string
      enum:
        - AUDIO
        - VIDEO
        - AMBIANCE_VIDEO
        - MUSIC_VIDEO
      description: Additional info for the mediaType
      example: AUDIO
    AlbumCoverType:
      type: string
      enum:
        - SMALL
        - LARGE
      description: Type of album cover (usually related to size)
      example: SMALL
    Role:
      type: object
      description: Contains all the info about a Role from the SAM system
      required:
        - id
        - name
        - mediaType
        - fileExtension
        - messaging
        - clapBucketAvailable
        - encrypted
        - mono
        - legacy
        - supportsSignage
        - available
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier from the database
          example: 1
        name:
          type: string
          description: Name of the role in SAM
          example: GX_OGG_MONO_128KBPS_12DB_CLEAN_CUE_CUT_CRYPT
        mediaType:
          $ref: "#/components/schemas/MediaType"
        relatedMediaType:
          $ref: "#/components/schemas/RelatedMediaType"
        albumCoverType:
          $ref: "#/components/schemas/AlbumCoverType"
        fileExtension:
          type: string
          description: Extension of the files in this role
          example: UNSET
        targetRole:
          type: string
          description: Role in SAM when uploading assets
          example: STINGRAY_MUSIC_MASTER
        quality:
          type: string
          description: Quality of the audio file in the role. Empty for video role
          example: 128KBPS
        videoBranding:
          type: string
          description: Branding added on each video. Null for audio brand
          example: GALAXY
        defaultClientCodeId:
          type: string
          description: Default client group that is used by the system
          example: CLAP_CS_BUCKETS_DEV_M_128MONO
        standardizedVolume:
          type: integer
          format: int32
          description: The number of decibel used in the standardization process
          example: 12
        messaging:
          type: boolean
          description: Indicates whether this role used for messaging.
          example: false
        clapBucketAvailable:
          type: boolean
          description: Indicates whether there an amazon S3 bucket available or should we
            download files from SAM server directly.
          example: true
        encrypted:
          type: boolean
          description: "Indicates whether this role is encrypted. Normal case: Audio =
            true. Video = false"
          example: true
        mono:
          type: boolean
          description: Indicates whether this role has mono file
          example: true
        legacy:
          type: boolean
          description: Indicates whether this role is available for new brands
          example: true
        supportsSignage:
          type: boolean
          description: Indicates whether this role supports signage
          example: false
        available:
          type: boolean
          description: Indicates whether this role is available for use in the Control Site
          example: true
    MagicInfoAssetImplementation:
      type: object
      description: Information about the screen, store and brand for a magic info device
      required:
        - magicInfoContentId
        - asset
      properties:
        magicInfoContentId:
          type: string
          description: Unique identifier of the magic info device
          example: 3D6E47E2-E0E1-4DC0-91BF-CF6ECCFE85B1
        asset:
          $ref: "#/components/schemas/GenericPair"
    MagicInfoScreenImplementation:
      type: object
      description: Information about the screen, store and brand for a magic info device
      required:
        - magicInfoDeviceId
        - brand
        - store
        - screen
      properties:
        magicInfoDeviceId:
          type: string
          description: Unique identifier of the magic info device
          example: 78-bd-bc-4f-19-1e
        brand:
          $ref: "#/components/schemas/GenericPair"
        store:
          $ref: "#/components/schemas/GenericPair"
        screen:
          $ref: "#/components/schemas/GenericPair"
    Station:
      type: object
      description: Info about a station sync from the SAM system
      required:
        - id
        - name
        - samId
        - samDriven
        - available
      properties:
        id:
          type: integer
          format: int64
          description: ""
          example: 11
        name:
          type: string
          description: Name of the station
          example: ALDO
        samId:
          type: string
          description: Unique identifier of the station from the SAM system
          example: S360-3-514
        samDriven:
          type: boolean
          description: Indicates whether this station is driven by Sam. Otherwise, driven
            by Control Site
          example: true
        available:
          type: boolean
          description: Indicates whether this station is available to be used by Control
            Site
          example: true
    DeviceVideoConfig:
      type: object
      description: Video configuration for a device
      required:
        - resolutionId
        - outputTypeId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the device video config
          example: "1"
        resolutionId:
          type: integer
          format: int64
          description: Unique identifier of the resolution of the video on the device
          example: "1"
        outputTypeId:
          type: integer
          format: int64
          description: Unique identifier of the output type of the video on the device
          example: "1"
    DeviceAudioConfig:
      type: object
      description: Audio configuration for a device
      required:
        - outputType
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the device video config
          example: "1"
        outputType:
          $ref: "#/components/schemas/AudioOutputType"
    ClaperEnabledState:
      type: string
      enum:
        - DEFAULT
        - ONSTATE
        - OFFSTATE
      description: State of the claper app. Default will use the brand's setting
      example: DEFAULT
    ApiEnabledState:
      type: string
      enum:
        - DEFAULT
        - ONSTATE
        - OFFSTATE
      description: State of the CLAP REST api. Default will use the brand's setting
      example: DEFAULT
    DeviceMenuAccessRightsState:
      type: string
      enum:
        - DEFAULT
        - ONSTATE
        - OFFSTATE
      description: State of the device's menu access rights. Default will use the brand's
        setting
      example: DEFAULT
    DeviceBaseConfig:
      type: object
      description: Base configuration for a device
      required:
        - fileSystemId
        - deviceHardwareId
        - emergencyInfo
        - ethernetMac
        - wifiMac
        - lteMac
        - streaming
        - claperEnabledState
        - apiEnabledState
      properties:
        fileSystemId:
          type: integer
          format: int64
          description: ID of one of the 'available_file_system' in the database
          example: 2
        deviceHardwareId:
          type: integer
          format: int64
          description: ID of one of the 'available_device_hardware' in the database
          example: 2
        emergencyInfo:
          type: string
          default: ""
          description: Emergency info for this device
          example: Call 1-800-444-1919 for help
        ethernetMac:
          type: string
          default: ""
          description: MAC address of the ethernet adapter
          example: c44e.ac02.62ec
        wifiMac:
          type: string
          default: ""
          description: MAC address of the wifi adapter
          example: c44e.ac14.7728
        lteMac:
          type: string
          default: ""
          description: MAC address of the let adapter
          example: c44e.ac14.78fe
        streaming:
          type: boolean
          description: Indicates whether the device uses streaming instead of downloading.
            This is not an official mode and should not be activated.
          example: false
        claperEnabledState:
          $ref: "#/components/schemas/ClaperEnabledState"
        apiEnabledState:
          $ref: "#/components/schemas/ApiEnabledState"
        deviceMenuAccessInfo:
          $ref: "#/components/schemas/DeviceMenuAccessInfo"
    DeviceOutputsConfig:
      type: object
      description: Output configuration for a device
      required:
        - zone2Delete
      properties:
        zone2Delete:
          type: integer
          format: int64
          description: Put an ID here if you want to delete one of the device's zone
          example: 34
        outputs:
          type: array
          description: An array of all of the device's outputs
          items:
            $ref: "#/components/schemas/DeviceOutput"
    DeviceOutput:
      type: object
      description: Device's Output information
      required:
        - id
        - mono
        - volume
        - calendarId
        - channelId
        - playbackChannelId
        - zoneId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the device output
          example: 6
        mono:
          type: boolean
          description: Indicates whether zone is mono
          example: true
        volume:
          type: integer
          format: int32
          description: Volume of the output
          minimum: 0
          maximum: 100
          example: 100
        calendarId:
          type: integer
          format: int64
          description: Unique identifier of the related calendar
          example: 68
        channelId:
          type: integer
          format: int64
          description: Unique identifier of the related channel
          example: 2597
        playbackChannelId:
          type: integer
          format: int64
          description: Unique identifier of the related playback channel
          example: 7584
        zoneId:
          type: integer
          format: int64
          description: Unique identifier of the related zone
          example: 9
        mediaFeedId:
          type: integer
          format: int64
          description: Unique identifier of the related media feed
          example: 234
    DeviceType:
      type: string
      enum:
        - SingleMono
        - SingleStereo
        - DualMono
        - NoDevice
      description: Type of device based on the number of output. No device is used for
        Magic Info devices.
      example: SingleMono
    NewDevice:
      type: object
      description: The basic information needed to create a new device
      required:
        - brandId
        - storeId
        - deviceType
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand for the new device
          example: 5
        storeId:
          type: integer
          format: int64
          description: Unique identifier of the store for the new device
          example: 56
        deviceType:
          $ref: "#/components/schemas/DeviceType"
    LogLevel:
      type: string
      enum:
        - VERBOSE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - TURNED_OFF
        - ROGUE
      description: The requested log level
      example: DEBUG
    AuthenticationType:
      type: string
      enum:
        - BASIC
        - DIGEST
        - NTLM
      description: Authentication types used for proxies
      example: BASIC
    TaskType:
      type: string
      enum:
        - deviceTask
        - storeTask
        - brandTask
    DeviceTaskType:
      type: string
      enum:
        - updateDevice
        - syncDevice
    ReplacementInfo:
      type: object
      description: Information needed for a device replacement
      required:
        - poolDeviceId
      properties:
        poolDeviceId:
          type: string
          description: Unique identifier of the device pool. 'none' if no device pool
          example: "34"
    Task:
      type: object
      description: All the information regarding a task.
      properties:
        id:
          type: integer
          format: int64
          description: Id of the task
          example: 487
        taskType:
          $ref: "#/components/schemas/TaskType"
        progress:
          type: number
          format: float
          description: Percentage of progress. Must be between 0 and 1
          example: 0.75
        successList:
          type: array
          description: List of all the successful ids in the task
          items:
            type: string
        pendingList:
          type: array
          description: List of all the pending ids in the task
          items:
            type: string
        failureList:
          type: array
          description: List of all the failed items in the task
          items:
            $ref: "#/components/schemas/TaskFailure"
    DeviceTask:
      type: object
      description: All the fields necessary for a Device Task for actions on device list.
      properties:
        deviceIds:
          type: array
          description: All the selected device Ids
          items:
            type: string
        type:
          $ref: "#/components/schemas/DeviceTaskType"
        deviceUpdateInfo:
          $ref: "#/components/schemas/DeviceUpdate"
    DeviceUpdate:
      type: object
      description: All the fields that can be updated in the device. They are all not
        required. Fields that are not specified will be ignored in the update
      properties:
        logLevel:
          $ref: "#/components/schemas/LogLevel"
        serverLogLevel:
          $ref: "#/components/schemas/LogLevel"
        resetStatus:
          type: boolean
          description: Indicates whether the device should be reset to OK. Need to be in
            warning status to work.
          example: true
        printedStatus:
          type: boolean
          description: Indicates whether the device should be set to printed. Need to be in
            warning or ok status to work.
          example: true
        active:
          type: boolean
          description: Indicates whether the device is active
          example: true
        reason:
          type: string
          description: Reason for the update, if needed
          example: anything
        newStoreId:
          type: integer
          format: int64
          description: Unique identifier of the new store for the device
          example: 123
    DevicesViewData:
      type: object
      description: >
        This structure contains everything needed for the device list view in
        Control Site. Since it's highly related

        to UI, this call will probably dissapear in the future but for the moment it contains all the dropdown and the list

        of devices.
      required:
        - logLevels
        - devices
        - wsServerUri
        - availableShippingTypes
        - availableShippingPackageTypes
        - availableFileSystems
        - availableDeviceHardware
        - availableShippingAddressesByBrand
        - availableShippingGroupsByBrand
      properties:
        logLevels:
          type: array
          description: List of available log levels
          items:
            $ref: "#/components/schemas/EnumPair"
        devices:
          type: array
          description: Devices to show in the view
          items:
            $ref: "#/components/schemas/Device"
        wsServerUri:
          type: string
          description: Web socket server uri. Used by CLAP to connect to Control Site
          example: wss://cs.business.stingray.com
        availableShippingTypes:
          type: array
          description: List of available shipping types
          items:
            $ref: "#/components/schemas/EnumPair"
        availableShippingPackageTypes:
          type: array
          description: List of available shipping package types
          items:
            $ref: "#/components/schemas/GenericPair"
        availableFileSystems:
          type: array
          description: List of available file systems
          items:
            $ref: "#/components/schemas/GenericPair"
        availableDeviceHardware:
          type: array
          description: List of available device hardware
          items:
            $ref: "#/components/schemas/GenericPair"
        availableShippingAddressesByBrand:
          type: array
          description: List of available shipping addresses grouped by brand
          items:
            $ref: "#/components/schemas/ShippingAddressesByBrand"
        availableShippingGroupsByBrand:
          type: array
          description: List of available shipping groups grouped by brand
          items:
            $ref: "#/components/schemas/ShippingGroupsByBrand"
    ShippingGroupsByBrand:
      type: object
      description: Used to regroup shipping groups by brand
      required:
        - brandId
        - shippingGroups
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 56
        shippingGroups:
          type: array
          description: List of the shipping groups for this brand
          items:
            $ref: "#/components/schemas/ShippingGroup"
    ShippingGroup:
      type: object
      description: Information about a shipping group
      required:
        - id
        - name
        - open
        - brandId
        - shippingType
        - shippingPackageType
        - timestamp
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the shipping group
          example: 67
        name:
          type: string
          description: Name of the shipping group
          example: Updates USB Avril 2014
        open:
          type: boolean
          description: Indicates whether still open to be used for shipping
          example: false
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 22
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        shippingPackageType:
          $ref: "#/components/schemas/GenericPair"
        timestamp:
          type: string
          description: The timestamp when this shipping group was created
          example: 2014-03-27 21:41:54.107000
    ShippingType:
      type: string
      enum:
        - Manual
        - FedexGround
        - FedexExpressSaver
        - FedexPriorityOvernight
        - FedexManualTracking
        - FedexInternationalEconomy
        - FedexInternationalPriority
      description: The type of shipping
      example: Manual
    ShippingAddressesByBrand:
      type: object
      description: Used to regroup shipping addresses by brand
      required:
        - brandId
        - stores
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 22
        stores:
          type: array
          description: List of the stores address in this brand
          items:
            $ref: "#/components/schemas/GenericPair"
    Platform:
      type: string
      enum:
        - Linux
        - Android
        - Windows
        - Web
      description: The type of platform the device runs on
      example: Android
    InstallationStatus:
      type: string
      enum:
        - NoInfo
        - CompletedOffline
        - PartialNoConnection
        - CompletedOnline
      description: Status of the installation
      example: CompletedOnline
    DeviceStatusState:
      type: string
      enum:
        - New
        - ReadyToPrint
        - Ok
        - Warning
        - Critical
        - Printed
        - OfflineActivated
      description: Device status name
      example: OK
    DeviceLifecyclesUpdate:
      type: object
      description: Information needed to update device lifecycles
      required:
        - deviceIds
        - deviceLifecycleUpdateInfo
      properties:
        deviceIds:
          type: array
          description: List of the device ids that will have their lifecycles updated
          items:
            type: string
        deviceLifecycleUpdateInfo:
          $ref: "#/components/schemas/DeviceLifecycleUpdateInfo"
    DeviceLifecycleUpdateInfo:
      type: object
      description: Information needed to udpate the lifecycle info of a device
      properties:
        returnHardwareStatus:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
        returnSoftwareStatus:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
        returnStorageStatus:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
        returnStatusNotes:
          type: string
          description: Additional notes for a returned device
          example: Smells very bad
    DeviceLifecycleCore:
      type: object
      description: Basic Information about the lifecycle of a device
      properties:
        firstOnlineDate:
          type: string
          description: The first time the device is connected to the websocket
          example: 2018-01-01 11:12:13
        printDate:
          type: string
          description: The first time the device is connected to the websocket
          example: 2018-01-01 11:12:13
        preparationDate:
          type: string
          description: The first time the device is connected to the websocket
          example: 2018-01-01 11:12:13
        shipDate:
          type: string
          description: The first time the device is connected to the websocket
          example: 2018-01-01 11:12:13
        creationDate:
          type: string
          description: The first time the device is connected to the websocket
          example: 2018-01-01 11:12:13
        promotionDate:
          type: string
          description: Date when the device was promoted to replace another
          example: 2018-01-01 11:12:13
        installationDate:
          type: string
          description: Date when the device was installed (phone activated)
          example: 2018-01-01 11:12:13
        replacementDate:
          type: string
          description: Date when the device was replaced by another
          example: 2018-01-01 11:12:13
        deactivationDate:
          type: string
          description: Deactivation date of the device
          example: 2018-01-01 11:12:13
        returnShipmentDate:
          type: string
          description: Date when the returned device was shipped
          example: 2018-01-01 11:12:13
        returnReceivedDate:
          type: string
          description: Date when the returned device was received
          example: 2018-01-01 11:12:13
        returnProcessedDate:
          type: string
          description: Date when the device return was processed
          example: 2018-01-01 11:12:13
        returnHardwareStatus:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
        returnSoftwareStatus:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
        returnStorageStatus:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
        returnStatusNotes:
          type: string
          description: Additional notes for a returned device
          example: Smells very bad
    DeviceLifecycle:
      type: object
      description: Information about the lifecycle of a device
      allOf:
        - $ref: "#/components/schemas/DeviceLifecycleCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of this device lifecycle
              example: 123
    DeviceLifecycleStatus:
      type: object
      description: Status of the device's hardware, software or storage
      allOf:
        - $ref: "#/components/schemas/DeviceLifecycleStatusCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Id associated with the status
              example: 123
    DeviceLifecycleStatusCore:
      type: object
      description: Basic information for a DeviceLifecycleStatus
      properties:
        name:
          type: string
          description: Name of the hardware status
          example: Lost
        details:
          type: string
          description: Any additional information needed for the status
          example: Something is wrong
        returnStatusType:
          $ref: "#/components/schemas/ReturnStatusType"
    Device:
      type: object
      description: Information about a device
      required:
        - id
        - platform
        - active
        - claperEnabledState
        - apiEnabledState
        - brandClaperEnabled
        - brandApiEnabled
        - installationStatus
        - phoneActivated
        - replaced
        - replacementCount
        - inReplacementThread
        - fileSystem
        - brandId
        - brandCode
        - brandName
        - affiliateId
        - parentCompany
        - networkConfigInterfaceType
        - logLevel
        - serverLogLevel
        - storeAddressId
        - storeId
        - storeNumber
        - wifiSSID
        - wifiKey
        - privateKey
        - player
        - installer
        - activationCode
        - status
        - emergencyInfo
        - lastHeartbeat
        - lastHandshake
        - storeEnglish
        - storeFrench
      properties:
        id:
          type: string
          description: Unique identifier of this device
          example: ALDO-SB1-000001
        platform:
          $ref: "#/components/schemas/Platform"
        active:
          type: boolean
          description: Indicates whether the device is active
          example: true
        claperEnabledState:
          $ref: "#/components/schemas/ClaperEnabledState"
        apiEnabledState:
          $ref: "#/components/schemas/ApiEnabledState"
        brandClaperEnabled:
          type: boolean
          description: Indicates whether the claper app is enabled in the brand settings
          example: true
        brandApiEnabled:
          type: boolean
          description: Indicates whether the CLAP REST api is enabled in the brand settings
          example: true
        installationStatus:
          $ref: "#/components/schemas/InstallationStatus"
        phoneActivated:
          type: boolean
          description: Indicates whether the device has been activated by phone
          example: true
        replaced:
          type: boolean
          description: Indicates whether the device has been replaced
          example: false
        replacementCount:
          type: integer
          format: int32
          description: Number of times this device has been replaced
          example: 4
        inReplacementThread:
          type: boolean
          description: Indicates whether it has been replaced or is a replacement device
          example: false
        fileSystem:
          type: string
          description: Name of the file system from the available_file_system
          example: FAT32
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the related brand
          example: 22
        brandCode:
          type: string
          description: Code of the related brand
          example: STFU
        brandName:
          type: string
          description: Name of the brand
          example: Stingray
        affiliateId:
          type: integer
          format: int64
          description: Unique identifier of the related affiliate
          example: 123
        parentCompany:
          type: string
          description: Name of the parent company
          example: Stingray
        networkConfigurationId:
          type: integer
          format: int64
          description: Unique identifer of the network configuration
          example: 1688
        networkConfigInterfaceType:
          $ref: "#/components/schemas/InterfaceType"
        networkInterfaceMacAddress:
          type: string
          description: Mac address of the device based on its current network type
          example: c44e.ac14.77dd
        logLevel:
          $ref: "#/components/schemas/LogLevel"
        serverLogLevel:
          $ref: "#/components/schemas/LogLevel"
        address:
          type: string
          description: Address of the store
          example: 730 Wellington
        city:
          type: string
          description: City of the store
          example: Montreal
        province:
          type: string
          description: Province of the store
          example: QC
        country:
          type: string
          description: Country of the store
          example: CA
        storeAddressId:
          type: integer
          format: int64
          description: Unique identifier of the store's address
          example: 16
        storeId:
          type: integer
          format: int64
          description: Unique identifier of the store
          example: 42
        storeNumber:
          type: string
          description: Store's number
          example: "16947"
        gpCustomerId:
          type: string
          description: Store's Great Plains customer ID
          example: 131314
        wifiSSID:
          type: string
          description: "Deprecated: The SSID for the hotspot the device will start"
          example: Creepy Wifi
        wifiKey:
          type: string
          description: "Deprecated: The key for the hotspot the device will start "
          example: $/$?342342
        privateKey:
          type: string
          description: Private key of the device. Used by CLAP in the handshake to validate
            identity
          example: e4381c7b-55ae-42
        fedexTrackingNumber:
          type: string
          description: Tracking number from the shipping info of the device
          example: "800029115248925"
        player:
          $ref: "#/components/schemas/DeviceSoftwareState"
        installer:
          $ref: "#/components/schemas/DeviceSoftwareState"
        backdoor:
          $ref: "#/components/schemas/DeviceSoftwareState"
        claperWeb:
          $ref: "#/components/schemas/DeviceSoftwareState"
        sbFirmware:
          $ref: "#/components/schemas/DeviceSoftwareState"
        sbScreenManager:
          $ref: "#/components/schemas/DeviceSoftwareState"
        activationCode:
          type: string
          description: Activation code for that device
          example: 795-535-618
        status:
          $ref: "#/components/schemas/DeviceStatusState"
        replacedBy:
          type: string
          description: Identifier of the replacement of this device
          example: T001560
        replacing:
          type: string
          description: Identifier of the device it is replacing
          example: A015034
        emergencyInfo:
          type: string
          description: Emergency info for this device
          example: Call 1-800-444-1919 for help
        lastHeartbeat:
          type: string
          description: Last Heartbeat sent by Control Site to the device
          example: 2017-03-28 05:03:22.859 EDT
        lastHandshake:
          type: string
          description: Last Handshake done with the device
          example: 2017-03-28 10:54:57.980 EDT
        storeEnglish:
          type: boolean
          description: Indicates whether English language is selected in the store
          example: true
        storeFrench:
          type: boolean
          description: Indicates whether French language is selected in the store
          example: true
        proxyAuthType:
          $ref: "#/components/schemas/AuthenticationType"
    AudioOutputType:
      type: string
      enum:
        - HDMI
        - ANALOG_OUTPUTS
    GenericPair:
      type: object
      description: General structure to hold data for a combo or anything needing an ID and
        a name
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the combo item (key)
          example: 45
        name:
          type: string
          description: Name of the combo item (value)
          example: Debug
    EnumPair:
      type: object
      description: General structure to hold data for a combo based on a enum (using string)
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Unique identifier of the combo item (key)
          example: Debug
        name:
          type: string
          description: Name of the combo item (value)
          example: Debug
    DeviceLogs:
      type: object
      description: List of logs. Also have complementary info about latest connections
      required:
        - logs
        - lastHeartbeat
        - lastHandshake
      properties:
        logs:
          type: array
          description: List of the logs
          items:
            $ref: "#/components/schemas/Log"
        lastHeartbeat:
          type: string
          description: Last Heartbeat sent by Control Site to the device
          example: 2017-03-28 05:03:22.859 EDT
        lastHandshake:
          type: string
          description: Last Handshake done with the device
          example: 2017-03-28 10:54:57.980 EDT
    Log:
      type: object
      description: Information about a log
      required:
        - timestamp
        - level
        - message
        - stack
        - source
        - code
      properties:
        timestamp:
          type: string
          description: Timestamp of when the log was created
          example: 2014-01-20 20:49:49.162000
        level:
          type: string
          description: Level of the log
          example: DEBUG
        message:
          type: string
          description: The actual message
          example: Looking if any update is needed...
        stack:
          type: string
          description: The stack trace of the error, if any
          example: >
            org.springframework.web.client.ResourceAccessException: I/O error:
            null; nested exception is java.net.SocketTimeoutException
                     at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:491)
                     at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:439)
                     at org.springframework.web.client.RestTemplate.getForObject(RestTemplate.java:237)
                     at com.stingray360.clap.synchronizer.webservice.WebService.getPlaylistFile(WebService.java:88)
                     at com.stingray360.clap.synchronizer.galaxieclient.download.playlist.PlaylistFileDownloadStrategy.downloadFile(PlaylistFileDownloadStrategy.java:42)
                     at com.stingray360.clap.synchronizer.galaxieclient.download.playlist.PlaylistFileDownloader.sync(PlaylistFileDownloader.java:23)
                     at com.stingray360.clap.synchronizer.galaxieclient.download.SyncTask.run(SyncTask.java:48)
                     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:442)
                     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:305)
                     at java.util.concurrent.FutureTask.run(FutureTask.java:137)
                     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)
                     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)
                     at java.lang.Thread.run(Thread.java:856)
                     Caused by: java.net.SocketTimeoutException
                     at java.net.PlainSocketImpl.read(PlainSocketImpl.java:491)
                     at java.net.PlainSocketImpl.access$000(PlainSocketImpl.java:46)
                     at java.net.PlainSocketImpl$PlainSocketInputStream.read(PlainSocketImpl.java:240)
                     at org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:103)
                     at org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:191)
                     at org.apache.http.impl.conn.DefaultResponseParser.parseHead(DefaultResponseParser.java:82)
                     at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:174)
                     at org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:180)
                     at org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:235)
                     at org.apache.http.impl.conn.AbstractClientConnAdapter.receiveResponseHeader(AbstractClientConnAdapter.java:259)
                     at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:279)
                     at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:121)
                     at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:428)
                     at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:555)
                     at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:487)
                     at org.springframework.http.client.HttpComponentsClientHttpRequest.executeInternal(HttpComponentsClientHttpRequest.java:83)
                     at org.springframework.http.client.AbstractBufferingClientHttpRequest.executeInternal(AbstractBufferingClientHttpRequest.java:46)
                     at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:63)
                     at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:476)
                     ... 12 more
        source:
          type: string
          description: Source of the log
          example: Device
        code:
          type: string
          description: Code of the error, if any
          example: 0
    Playout:
      type: object
      description: Information about a playout
      required:
        - timestamp
        - type
        - message
        - samAssetId
        - title
        - artist
        - station
        - outputIndex
        - playlist
        - samGenerationDate
        - zone
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the playout
          example: 13
        timestamp:
          type: string
          description: Timestamp when the playout was created
          example: 2016-05-10 14:38:21.465000
        type:
          type: string
          description: Playout's type
          example: ScheduledPlay
        message:
          type: boolean
          description: Indicates whether the playout is a message vs a normal song
          example: false
        samAssetId:
          type: integer
          format: int64
          description: Asset number from the SAM system
          example: 1153206
        title:
          type: string
          description: Title of the song/message
          example: Never Gonna Give You Up
        artist:
          type: string
          description: Name of the artist of the song/message
          example: Julian Taylor Band
        station:
          type: string
          description: Unique name of the station
          example: S360-1-004
        outputIndex:
          type: string
          description: Id of the output (0 or 1)
          example: "0"
        playlist:
          type: string
          description: The name of the playlist
          example: "20170328"
        zone:
          type: string
          description: Playout's zone text
          example: General (1)
        samGenerationDate:
          type: string
          description: The generation date of the playlist in SAM
          example: 2017-03-24 04:15:43
    LifecycleMetrics:
      type: object
      description: List of lifecycles metrics with complementary information
      required:
        - metrics
        - maxYear
        - maxMonth
        - maxDay
      properties:
        metrics:
          type: array
          description: List of the metrics for the requested period
          items:
            $ref: "#/components/schemas/Metric"
        maxYear:
          type: integer
          format: int32
          description: Maximum year to retrieve. Will be converted to a date with the other
            'max' field in the response
          example: 2017
        maxMonth:
          type: integer
          format: int32
          description: Maximum month to retrieve. Will be converted to a date with the
            other 'max' field in the response
          example: 6
        maxDay:
          type: integer
          format: int32
          description: Maximum day to retrieve. Will be converted to a date with the other
            'max' field in the response
          example: 23
    Metric:
      type: object
      description: Information about a metric
      required:
        - timestamp
        - type
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the metric
          example: 4
        timestamp:
          type: string
          description: Timestamp when the metric was created
          example: 2014-04-10 13:24:45.693000
        type:
          type: integer
          format: int32
          description: Type of metric
          example: 2
    AdvancedDeviceLogs:
      type: object
      description: All information about a log + a little more
      allOf:
        - $ref: "#/components/schemas/DeviceLogs"
        - type: object
          required:
            - deviceStatus
            - logLevels
            - logLevelId
            - serverLogLevelId
          properties:
            deviceStatus:
              $ref: "#/components/schemas/DeviceStatusState"
            logLevels:
              type: array
              description: List of available log levels
              items:
                $ref: "#/components/schemas/EnumPair"
            logLevelId:
              type: integer
              format: int32
              description: Selected log level for the device
              example: 4
            serverLogLevelId:
              type: integer
              format: int32
              description: Selected log level for the server
              example: 2
    ReplacementDevice:
      type: object
      description: Information about the replacement of a device
      required:
        - deviceId
        - replaced
        - inReplacementThread
        - additionalInfo
      properties:
        deviceId:
          type: string
          description: Unique identifier of the device
          example: ALDO-SB1-000001
        replaced:
          type: boolean
          description: Indicates whether the device has been replaced
          example: true
        inReplacementThread:
          type: boolean
          description: Indicates whether it has been replaced or is a replacement device
          example: false
        additionalInfo:
          type: string
          description: Additional information about the replacement
          example: "Replaced by: P1032452"
    DeviceDebugViewData:
      type: object
      description: >
        All the information needed for the device debugging view. Since it's
        highly related to the UI,

        this will probably dissapear in the future to be replaced by multiple more specific calls. For the moment,

        it contains info about the device, all the combo, zones and configurations.
      required:
        - device
        - availableChannels
        - availablePlaybackChannels
        - availableDeviceTypes
        - availableCalendars
        - availableZones
        - mediaFeeds
        - availableLogLevels
        - outputCount
        - zones
        - availableInterfaceTypes
        - networkConfig
        - availableResolutions
        - availableVideoOutputTypes
        - audioOutputTypes
        - videoConfig
        - availableFileSystems
        - fileSystemId
        - availableDeviceHardware
        - deviceHardwareId
        - availableClaperEnabledStates
        - availableApiEnabledStates
        - availableAuthTypes
      properties:
        device:
          $ref: "#/components/schemas/DeviceDebugViewDetails"
        availableChannels:
          type: array
          description: List of available channels
          items:
            $ref: "#/components/schemas/GenericPair"
        availablePlaybackChannels:
          type: array
          description: List of available playback channels
          items:
            $ref: "#/components/schemas/GenericPair"
        availableDeviceTypes:
          type: array
          description: List of available device types
          items:
            $ref: "#/components/schemas/EnumPair"
        availableCalendars:
          type: array
          description: List of available calendars
          items:
            $ref: "#/components/schemas/GenericPair"
        availableZones:
          type: array
          description: List of available zones
          items:
            $ref: "#/components/schemas/GenericPair"
        mediaFeeds:
          type: array
          description: List of available media feeds
          items:
            $ref: "#/components/schemas/GenericPair"
        availableLogLevels:
          type: array
          description: List of available log levels
          items:
            $ref: "#/components/schemas/EnumPair"
        outputCount:
          type: integer
          format: int32
          minimum: 1
          maximum: 2
          description: The number of output for this device
          example: 1
        zones:
          type: array
          description: List of zones
          items:
            $ref: "#/components/schemas/DeviceOutput"
        availableInterfaceTypes:
          type: array
          description: List of available interface types
          items:
            $ref: "#/components/schemas/EnumPair"
        networkConfig:
          $ref: "#/components/schemas/NetworkConfig"
        availableResolutions:
          type: array
          description: List of available resolutions
          items:
            $ref: "#/components/schemas/GenericPair"
        availableVideoOutputTypes:
          type: array
          description: List of available video output types
          items:
            $ref: "#/components/schemas/GenericPair"
        audioOutputTypes:
          type: array
          description: List of available audio output types
          items:
            $ref: "#/components/schemas/EnumPair"
        videoConfig:
          $ref: "#/components/schemas/DeviceVideoConfig"
        audioConfig:
          $ref: "#/components/schemas/DeviceAudioConfig"
        availableFileSystems:
          type: array
          description: List of available file systems
          items:
            $ref: "#/components/schemas/GenericPair"
        fileSystemId:
          type: integer
          format: int64
          description: Unique identifier of the file system
          example: 43
        availableDeviceHardware:
          type: array
          description: List of available device hardware
          items:
            $ref: "#/components/schemas/GenericPair"
        deviceHardwareId:
          type: integer
          format: int64
          description: Unique identifier of the device hardware
          example: 46
        availableClaperEnabledStates:
          type: array
          description: List of available claper enabled states
          items:
            $ref: "#/components/schemas/EnumPair"
        availableApiEnabledStates:
          type: array
          description: List of available api enabled states
          items:
            $ref: "#/components/schemas/EnumPair"
        availableAuthTypes:
          type: array
          description: List of available authentication types
          items:
            $ref: "#/components/schemas/EnumPair"
        availableDeviceMenuAccessStates:
          type: array
          description: List of available device menu access states
          items:
            $ref: "#/components/schemas/EnumPair"
        deviceMenuAccessInfo:
          $ref: "#/components/schemas/DeviceMenuAccessInfo"
    InterfaceType:
      type: string
      enum:
        - WIFI
        - ETH
        - NOTCONNECTED
        - LTE
      description: The kind of interface used by the network config
      example: ETH
    NetworkConfig:
      type: object
      description: Device's network configuration
      required:
        - id
        - interfaceType
        - wifiSSID
        - wifiPSK
        - ipConfigDHCP
        - ipConfigIP
        - ipConfigNetmask
        - ipConfigGateway
        - ipConfigDNS
        - proxyHost
        - proxyPort
        - proxyBypassHosts
        - proxyUsername
        - proxyPassword
        - claperMulticastIp
        - claperMulticastPort
        - claperWebSocketPort
        - claperWebServerPort
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the network configuration
          example: 1
        interfaceType:
          $ref: "#/components/schemas/InterfaceType"
        wifiSSID:
          type: string
          description: Wifi SSID the device will use to connect
          example: Creepy Wifi
        wifiPSK:
          type: string
          description: Wifi key the device will use to connect
          example: $/$?342342
        ipConfigDHCP:
          type: boolean
          description: Indicates whether we use DHCP
          example: true
        ipConfigIP:
          type: string
          description: The static address to use if DHCP is set to false
          example: 127.0.0.1
        ipConfigNetmask:
          type: string
          description: The netmask to use if DHCP is set to false
          example: 255.255.0.0
        ipConfigGateway:
          type: string
          description: The gateway to use if DHCP is set to false
          example: 172.17.35.1
        ipConfigDNS:
          type: string
          description: The DNS to use
          example: 172.17.35.1
        proxyHost:
          type: string
          description: The host to use
          example: proxy.stingray360.com
        proxyPort:
          type: integer
          format: int32
          description: Port to use
          example: 13128
          default: 0
        proxyBypassHosts:
          type: string
          description: Not used anywhere. Will probably be deleted soon
        proxyAuthType:
          $ref: "#/components/schemas/AuthenticationType"
        proxyUsername:
          type: string
          description: Username for a proxy
          example: stingray
        proxyPassword:
          type: string
          description: Password for a proxy
          example: password
        claperMulticastIp:
          type: string
          description: Indicates whether using claper, this is the multicast ip that will
            be used
          example: 224.0.113.0
        claperMulticastPort:
          type: integer
          format: int32
          description: Indicates whether using claper, this is the port that will be used
          example: 4000
          default: 0
        claperWebSocketPort:
          type: integer
          format: int32
          description: Indicates whether using claper, this is the socket port that will be
            used
          example: 8011
          default: 0
        claperWebServerPort:
          type: integer
          format: int32
          description: Indicates whether using claper, this is the server port that will be
            used
          example: 8711
          default: 0
    DeviceDebugViewDetails:
      type: object
      description: Information about a device (used by debug view). Could be merged with
        'Device' object one day to only have one object that represent a device
      required:
        - id
        - platform
        - fileSystem
        - active
        - streaming
        - claperEnabledState
        - apiEnabledState
        - brandClaperEnabled
        - brandApiEnabled
        - replacementCount
        - replaces
        - replacedBy
        - activationCode
        - installationStatus
        - wifiSSID
        - wifiKey
        - privateKey
        - player
        - installer
        - emergencyInfo
        - deviceType
        - ethernetMac
        - wifiMac
        - lteMac
      properties:
        id:
          type: string
          description: Unique identifier of the device
          example: 2
        platform:
          $ref: "#/components/schemas/Platform"
        fileSystem:
          type: string
          description: Device's file system
          example: ExFAT (PNY Verified)
        active:
          type: boolean
          description: Indicates whether the device is active
          example: true
        streaming:
          type: boolean
          description: Indicates whether the device is in streaming mode
          example: false
        claperEnabledState:
          $ref: "#/components/schemas/ClaperEnabledState"
        apiEnabledState:
          $ref: "#/components/schemas/ApiEnabledState"
        brandClaperEnabled:
          type: boolean
          description: Indicates whether the claper app is enabled in the brand settings
          example: true
        brandApiEnabled:
          type: boolean
          description: Indicates whether the CLAP REST api is enabled in the brand settings
          example: true
        replacementCount:
          type: integer
          format: int32
          description: Number of times this device has been replaced
          example: 4
        replaces:
          type: string
          description: The device that was replaced by this one
          example: ARDN-SB1-000001
        replacedBy:
          type: string
          description: The device that replaced this one
          example: P004408
        activationCode:
          type: string
          description: Code to activate this device
          example: "533677713"
        installationStatus:
          $ref: "#/components/schemas/InstallationStatus"
        fedexTrackingNumber:
          type: string
          description: Tracking number from the shipping info of the device
          example: "800029115248925"
        wifiSSID:
          type: string
          description: Wifi SSID the device will use to connect
          example: Creepy Wifi
        wifiKey:
          type: string
          description: Wifi key the device will use to connect
          example: $/$?342342
        privateKey:
          type: string
          description: Private key of the device. Used by CLAP in the handshake to validate
            identity
          example: e4381c7b-55ae-42
        player:
          $ref: "#/components/schemas/DeviceSoftwareState"
        installer:
          $ref: "#/components/schemas/DeviceSoftwareState"
        backdoor:
          $ref: "#/components/schemas/DeviceSoftwareState"
        claperWeb:
          $ref: "#/components/schemas/DeviceSoftwareState"
        sbFirmware:
          $ref: "#/components/schemas/DeviceSoftwareState"
        sbScreenManager:
          $ref: "#/components/schemas/DeviceSoftwareState"
        emergencyInfo:
          type: string
          description: Emergency info for this device
          example: Call 1-800-444-1919 for help
        deviceType:
          $ref: "#/components/schemas/DeviceType"
        ethernetMac:
          type: string
          default: ""
          description: MAC address of the ethernet adapter
          example: c44e.ac02.62ec
        wifiMac:
          type: string
          default: ""
          description: MAC address of the wifi adapter
          example: c44e.ac14.7728
        lteMac:
          type: string
          default: ""
          description: MAC address of the let adapter
          example: c44e.ac14.78fe
    DevicePreparationData:
      type: object
      description: All of the combos needed for device preparation
      required:
        - availableFileSystems
        - availableDeviceHardware
        - availableShippingTypes
        - availableShippingAddresses
        - availableShippingPackageTypes
        - requestMultiBrand
        - availablePlatforms
        - availableSoftwareList
        - availableAffiliates
      properties:
        availableFileSystems:
          type: array
          description: List of available file systems
          items:
            $ref: "#/components/schemas/GenericPair"
        availableDeviceHardware:
          type: array
          description: List of available device hardware
          items:
            $ref: "#/components/schemas/GenericPair"
        availableShippingTypes:
          type: array
          description: List of available shipping types
          items:
            $ref: "#/components/schemas/EnumPair"
        availableShippingAddresses:
          type: array
          description: List of available shipping addresses
          items:
            $ref: "#/components/schemas/GenericPair"
        availableShippingPackageTypes:
          type: array
          description: List of available shipping package types
          items:
            $ref: "#/components/schemas/GenericPair"
        availableAffiliates:
          type: array
          description: List of available affiliates to ship from
          items:
            $ref: "#/components/schemas/GenericPair"
        requestMultiBrand:
          type: boolean
          description: Indicates whether the request is multi brand
          example: false
        availablePlatforms:
          type: array
          description: List of available platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableSoftwareList:
          $ref: "#/components/schemas/AllSoftwareList"
    SoftwareUpdateInfo:
      type: object
      description: Information required to update a software
      required:
        - official
        - deprecated
      properties:
        official:
          type: boolean
          description: Indicates whether it's a default version
          example: true
        deprecated:
          type: boolean
          description: Indicates whether it's a deprecated version
          example: false
        label:
          type: string
          description: Label
          example: Software Android 1.2.3
        configFormatId:
          type: integer
          format: int64
          example: 1
          description: Id for the configuration format of the device software
    Software:
      type: object
      description: Information about a software
      required:
        - id
        - name
        - title
        - version
        - label
        - configFormatVersion
        - official
        - deprecated
        - softwareType
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of a software
          example: 24
        name:
          type: string
          description: Name of the software
          example: 2.3.3.default [Latest]
        title:
          type: string
          description: Title of the software
          example: 2.3.3.default [Latest]
        version:
          type: string
          description: Version of the software
          example: 1.2.4
        label:
          type: string
          description: Label of the software
          example: RC2 with bug fixes
        configFormatVersion:
          type: string
          description: Version of the config needed for this version of the software
          example: v3_3
        official:
          type: boolean
          description: Indicates whether it's a default version
          example: true
        deprecated:
          type: boolean
          description: Indicates whether it's a deprecated version
          example: false
        hasLinux:
          type: boolean
          description: Indicates whether it has an artifact for Linux
          example: true
        linuxPath:
          type: string
          description: Path to the Linux artifact
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
        linuxPath2:
          type: string
          description: Path to the Linux2 artifact (.deb)
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
        hasWindows:
          type: boolean
          description: Indicates whether it has an artifact for Windows
          example: true
        windowsPath:
          type: string
          description: Path to the Windows artifact
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
        hasAndroid:
          type: boolean
          description: Indicates whether it has an artifact for Android
          example: true
        androidPath:
          type: string
          description: Path to the Android artifact
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
        path:
          type: string
          description: Path to an artifact. Use mostly for Claper
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
        hasWeb:
          type: boolean
          description: Indicates whether it has an artifact for Web
          example: true
        softwareType:
          $ref: "#/components/schemas/SoftwareType"
    Playouts:
      type: object
      description: Contains exclusively the list of playouts
      required:
        - playouts
      properties:
        playouts:
          type: array
          items:
            $ref: "#/components/schemas/Playout"
    EntityTypeEnum:
      type: string
      description: Type of the entity
      enum:
        - asset
        - container
        - screen
        - store
        - device
        - message
    Tag:
      type: object
      description: Information about a tag
      required:
        - id
        - name
        - tagCategories
        - useCount
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the tag
          example: 4356
        name:
          type: string
          maxLength: 25
          description: Name of the tag
          example: funny
        tagCategories:
          type: array
          description: List of the assigned tag categories
          items:
            $ref: "#/components/schemas/TagCategory"
        useCount:
          type: integer
          format: int32
          description: Number of time this tag is used in the system
          example: 2
    SoftwareDependencyInfo:
      type: object
      description: Information regarding the dependencies of a software
      required:
        - deviceSoftwareImplementationId
      properties:
        deviceSoftwareImplementationId:
          type: integer
          format: int64
          description: Unique identifier of the device software implementation
          example: 123
        playerDependency:
          type: integer
          format: int64
          description: Id of the Player dependency of this software
          example: 123
        installerDependency:
          type: integer
          format: int64
          description: Id of the Installer dependency of this software
          example: 123
        backdoorDependency:
          type: integer
          format: int64
          description: Id of the Backdoor dependency of this software
          example: 123
        claperDependency:
          type: integer
          format: int64
          description: Id of the Claper dependency of this software
          example: 123
        sbFirmwareDependency:
          type: integer
          format: int64
          description: Id of the SBFirmware dependency of this software
          example: 123
        sbScreenManagerDependency:
          type: integer
          format: int64
          description: Id of the SBScreenManager dependency of this software
          example: 123
    EntityTagsInfo:
      type: object
      description: Information about what tags are assigned to a specific entity
      required:
        - tags
        - entityType
        - id
      properties:
        tags:
          type: array
          description: List of the tags assigned to this entity
          items:
            type: string
        entityType:
          $ref: "#/components/schemas/EntityTypeEnum"
        id:
          type: integer
          format: int64
          description: Unique identifier of the entity
          example: 2321
    NewTagCategory:
      type: object
      description: Information about a new tag category
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the tag category
          example: Colors
    TagCategory:
      type: object
      description: Information about a tag category
      required:
        - id
        - name
        - associatedEntityTypes
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the tag category
          example: 231
        name:
          type: string
          maxLength: 100
          description: Name of the tag category
          example: Colors
        associatedEntityTypes:
          type: array
          items:
            $ref: "#/components/schemas/EntityTypeEnum"
    EntityTypeCategoryAssociation:
      type: object
      description: Information about an association between a tag category and an entity
        type
      required:
        - tagCategoryId
        - entityType
      properties:
        tagCategoryId:
          type: integer
          format: int64
          description: Unique identifier of the tag category
          example: 231
        entityType:
          $ref: "#/components/schemas/EntityTypeEnum"
    TagLink:
      type: object
      description: Information about a tag and its link to a tag category
      required:
        - name
        - categoryId
      properties:
        name:
          type: string
          description: Name of the tag
          example: funny
        categoryId:
          type: integer
          format: int64
          description: Unique identifier of the tag category
          example: 231
    EntityTypeEnums:
      type: object
      description: List of entity type enum
      required:
        - associations
      properties:
        associations:
          type: array
          items:
            $ref: "#/components/schemas/EntityTypeEnum"
    StationSchedule:
      type: object
      description: Information about a station schedule
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Station Schedule
          example: 1234
        name:
          type: string
          description: Name of the station schedule
          example: My super channel
    StationScheduleStyle:
      type: object
      description: Information about a station schedule style
      required:
        - id
        - name
        - availableToClient
        - playingStationId
        - playingStationName
        - onDemandAllowedStations
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Station Schedule Style
          example: 5353
        name:
          type: string
          description: Name of the Station Schedule Style
          example: Rock style
        availableToClient:
          type: boolean
          description: Indicates whether the style should be available to be used in a
            station schedule. Used by brand manager. They need to make sure the
            style is available in SAM before making it available
          example: false
        playingStationId:
          type: integer
          format: int64
          description: Unique identifier of the associated station
          example: 1234
        playingStationName:
          type: string
          description: Name of the associated station
          example: S360-23-4
        onDemandAllowedStations:
          type: array
          items:
            type: integer
            format: int64
          description: List of the on demand station that will be available in Jukebox (if
            available in that brand)
    UserPreferences:
      type: object
      description: All the preferences for a user.
      required:
        - newsletterPreferenceCenterUrl
      properties:
        timeZone:
          type: string
          description: The time zone the user is in or has chosen
          example: America/Montreal
        newsletterPreferenceCenterUrl:
          type: string
          description: The url to access the preference center related to newsletter
          example: https://www.google.ca
    ImportStoresForm:
      type: object
      properties:
        file-to-upload:
          type: string
          format: binary
      required:
        - file-to-upload
    NewStationScheduleStyle:
      type: object
      description: Information about a new station schedule style or for an update
      required:
        - name
        - playingStationId
        - availableToClient
        - selectedOnDemandStations
        - brandId
      properties:
        name:
          type: string
          description: Name of the station schedule style
          example: Super Rock
        playingStationId:
          type: integer
          format: int64
          description: Unique identifier of the associated station
          example: 1231
        availableToClient:
          type: boolean
          description: Indicates whether the style should be available to be used in a
            station schedule. Used by brand manager. They need to make sure the
            style is available in SAM before making it available
          example: false
        selectedOnDemandStations:
          type: array
          items:
            type: integer
            format: int64
          description: List of the on demand station that will be available in Jukebox (if
            available in that brand)
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 44
    BrandStation:
      type: object
      description: Information about a station
      required:
        - id
        - name
        - code
        - samName
        - availableToClient
        - ableToUnlinkStation
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the station
          example: 8
        name:
          type: string
          description: Name of the station
          example: YM - Bluenotes
        code:
          type: string
          description: Sam code
          example: S360-3-510
        samName:
          type: string
          description: Sam name (concatenation)
          example: SUPER station (S360-3-510)
        availableToClient:
          type: boolean
          description: Indicates whether the station is available for clients to see
          example: false
        ableToUnlinkStation:
          type: boolean
          description: Indicates whether the station can be unlinked. Must not be in used
            in the brand.
          example: true
    Language:
      type: object
      description: Information about a language
      allOf:
        - $ref: "#/components/schemas/LanguageCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the language
              example: 1
    LanguageCore:
      type: object
      description: Core information about a language. Use mainly for creation purposes
      required:
        - isoLanguageCode
      properties:
        isoLanguageCode:
          type: string
          description: Language's ISO code
          example: fr
    HardwareType:
      type: string
      enum:
        - Generic
        - Player
        - Storage
        - Screen
        - Network
        - Tablet
      description: Type of hardware
      example: Generic
    HardwareModel:
      type: object
      description: Information about a hardware model
      allOf:
        - $ref: "#/components/schemas/HardwareModelCore"
        - type: object
          required:
            - id
            - affiliateId
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the hardware model
              example: 342
            affiliateId:
              type: integer
              format: int64
              description: Unique identifier of the related affiliate
              example: 123
    HardwareModelCore:
      type: object
      description: Core Information about a hardware model
      required:
        - name
        - hardwareType
      properties:
        name:
          type: string
          description: Name of the new hardware model
          example: Samsung Galaxy
        description:
          type: string
          description: Description of the new hardware model
          example: Best model
        hardwareType:
          $ref: "#/components/schemas/HardwareType"
        storageBrand:
          $ref: "#/components/schemas/GenericPair"
        storageType:
          $ref: "#/components/schemas/GenericPair"
        storageGb:
          type: integer
          format: int32
          description: The storage available on the hardware
          example: 16
        screenWidth:
          type: integer
          format: int32
          description: Screen's width
          example: 640
        screenHeight:
          type: integer
          format: int32
          description: Screen's height
          example: 480
    HardwareCore:
      type: object
      description: Information about the core of a hardware. Pretty much all fields except
        the id. Mostly used for creation
      required:
        - affiliateId
        - hardwareModel
        - notes
        - customerOwner
        - hardwareType
      properties:
        name:
          type: string
          description: Name of the hardware
          example: Samsung Tablet
        affiliateId:
          type: integer
          format: int64
          description: Unique identifier of the associated affiliate
          example: 132
        hardwareModel:
          $ref: "#/components/schemas/GenericPair"
        notes:
          type: string
          description: Notes about the hardware
          example: Cracked on the side
        serialNo:
          type: string
          description: Hardware's serial number
          example: GT78$df2
        createdTimestamp:
          type: string
          description: Hardware's creation date
          example: Mon May 15 19:36:53 UTC 2017
        assignedTimestamp:
          type: string
          description: Hardware's assigned date
          example: Mon May 15 19:36:53 UTC 2017
        assignedCount:
          type: integer
          format: int32
          description: The number of time this hardware was assigned in its lifetime
          example: 3
        customerOwner:
          type: boolean
          description: Is the hardware owned by a customer?
          example: true
        store:
          $ref: "#/components/schemas/GenericPair"
        deviceId:
          type: string
          description: Unique identifier of the device
          example: LOL1234
        parentHardware:
          $ref: "#/components/schemas/GenericPair"
        ableToAssignToStore:
          type: boolean
          description: Is the hardware assignable to a store
        ableToAssignToDevice:
          type: boolean
          description: Is the hardware assignable to a device
        ableToAssignToHardware:
          type: boolean
          description: Is the hardware assignable to another hardware
        hardwareType:
          $ref: "#/components/schemas/HardwareType"
        ethernetMac:
          type: string
          description: MAC address of the ethernet adapter
          example: 5E:FF:56:A2:AF:15
          default: ""
        wifiMac:
          type: string
          description: MAC address of the wifi adapter
          example: 5E:FF:56:A2:AF:15
          default: ""
    Hardware:
      type: object
      description: Information about a hardware
      allOf:
        - $ref: "#/components/schemas/HardwareCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the hardware
              example: 234
    HardwareAssignation:
      type: object
      description: Information about a hardware assignation
      required:
        - id
        - affiliateId
        - hardwareId
        - deviceId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the hardware assignation
          example: 123
        assignedTimestamp:
          type: string
          description: Hardware's assigned date
          example: Mon May 15 19:36:53 UTC 2017
        affiliateId:
          type: integer
          format: int64
          description: Unique identifier of the associated affiliate
          example: 123
        hardwareId:
          type: integer
          format: int64
          description: Unique identifier of the current hardware
          example: 123
        store:
          $ref: "#/components/schemas/GenericPair"
        deviceId:
          type: string
          description: Unique identifier of the assignated device
          example: LOL1234
        parentHardware:
          $ref: "#/components/schemas/GenericPair"
    UpdatedHardwareAssignation:
      type: object
      description: Updated information about a hardware assignation
      required:
        - assignationType
        - forceReassignation
      properties:
        entityId:
          type: string
          description: Id of the entity to which you assign the hardware
          example: "2324"
        assignationType:
          $ref: "#/components/schemas/HardwareAssignationType"
        forceReassignation:
          type: boolean
          description: Indicates whether the device is already assigned, update everything
            for the new assignation. If set to false, an error may be returned
            if the entity is already assigned.
          example: true
    HardwareAssignationType:
      type: string
      enum:
        - Store
        - Device
        - Hardware
      description: Type of possible assignation
      example: Store
    Image:
      type: object
      description: Information about an image
      required:
        - id
        - format
        - date
        - url
        - type
        - version
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the image
          example: 8
        format:
          type: integer
          format: int64
          description: Format version of the image
          example: 1
        date:
          type: string
          description: Creation date of the image
          example: 2015-03-24 14:15:31.000 EDT
        size:
          type: string
          description: Size in MB of the image
          example: 56.7 MB
        url:
          type: string
          description: Url of the image in the cloud
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/images/initial/17/DAUD-150-INITIAL-20150324141531EDT.tar?AWSAccessKeyId=AKIAJUJTXIUWNASPA25Q&Expires=2128267340&Signature=7rbYrHCl2gqV8dCv6%2BBuXCFl6p8%3D
        type:
          $ref: "#/components/schemas/ImageType"
        status:
          $ref: "#/components/schemas/ImageStatus"
        version:
          type: integer
          format: int64
          description: Incremental version of the image
          example: 15
        parentId:
          type: integer
          format: int64
          description: Parent of the current image. Null if there is no parent
          example: 234
        syncStateSnapshotId:
          type: integer
          format: int64
          description: Unique identifier of the sync state snapshot of the image
          example: 27
        notes:
          type: string
          description: Additional notes about an image
          example: These are the notes
        errorCount:
          type: integer
          format: int64
          description: Number of errors encountered during image generation
          example: 5
    ImageType:
      type: string
      enum:
        - INITIAL
        - UPDATE
        - SOFTWARE
        - FULLUPDATE
      description: Type of image
      example: INITIAL
    ImageStatus:
      type: string
      enum:
        - STARTED
        - COMPLETED
        - ABORTED
        - DECOMMISSIONED
        - QUEUED
        - ARCHIVED
      description: Status of an image
      example: STARTED
    ImageInfo:
      type: object
      required:
        - baseImageId
        - createInitialImage
        - withSoftware
        - playerSoftwareId
        - installerSoftwareId
        - backdoorSoftwareId
        - claperSoftwareId
      properties:
        baseImageId:
          type: integer
          format: int64
          description: Unique identifier of the base image
          example: 123
        createInitialImage:
          type: boolean
          description: Indicates whether the system creates an initial image at the same
            time
          example: false
        withSoftware:
          type: boolean
          description: Indicates whether the generated image will contains bundled software
          example: true
        playerSoftwareId:
          type: integer
          format: int64
          description: Unique identifier of the player's software
          example: 13
        installerSoftwareId:
          type: integer
          format: int64
          description: Unique identifier of the installer's software
          example: 13
        backdoorSoftwareId:
          type: integer
          format: int64
          description: Unique identifier of the backdoor's software
          example: 13
        claperSoftwareId:
          type: integer
          format: int64
          description: Unique identifier of the claper's software
          example: 13
        sbFirmwareSoftwareId:
          type: integer
          format: int64
          description: Unique identifier of the sbFirmware's software
        sbScreenManagerSoftwareId:
          type: integer
          format: int64
          description: Unique identifier of the sbScreenManager's software
    AllSoftwareList:
      type: object
      description: List of formats, software and platforms
      required:
        - availableFormats
        - availablePlayerSoftwareList
        - availableInstallerSoftwareList
        - availableBackdoorSoftwareList
        - availableClaperWebSoftwareList
        - availableClaperAndroidSoftwareList
        - availableSBFirmwareSoftwareList
        - availableSBScreenManagerSoftwareList
        - availablePlayerPlatforms
        - availableInstallerPlatforms
        - availableBackdoorPlatforms
        - availableClaperAndroidPlatforms
        - availableClaperWebPlatforms
        - availableSBFirmwarePlatforms
        - availableSBScreenManagerPlatforms
      properties:
        availableFormats:
          type: array
          description: List of available formats
          items:
            $ref: "#/components/schemas/GenericPair"
        availablePlayerSoftwareList:
          type: array
          description: List of available player software
          items:
            $ref: "#/components/schemas/Software"
        availableInstallerSoftwareList:
          type: array
          description: List of available installer software
          items:
            $ref: "#/components/schemas/Software"
        availableBackdoorSoftwareList:
          type: array
          description: List of available backdoor software
          items:
            $ref: "#/components/schemas/Software"
        availableClaperWebSoftwareList:
          type: array
          description: List of available claper web software
          items:
            $ref: "#/components/schemas/Software"
        availableClaperAndroidSoftwareList:
          type: array
          description: List of available claper android software
          items:
            $ref: "#/components/schemas/Software"
        availableSBFirmwareSoftwareList:
          type: array
          description: List of available SBFirmware software
          items:
            $ref: "#/components/schemas/Software"
        availableSBScreenManagerSoftwareList:
          type: array
          description: List of available SBScreenManager software
          items:
            $ref: "#/components/schemas/Software"
        availablePlayerPlatforms:
          type: array
          description: List of available player platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableInstallerPlatforms:
          type: array
          description: List of available installer platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableBackdoorPlatforms:
          type: array
          description: List of available backdoor platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableClaperAndroidPlatforms:
          type: array
          description: List of available android platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableClaperWebPlatforms:
          type: array
          description: List of available claper web platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableSBFirmwarePlatforms:
          type: array
          description: List of available SBFirmware platforms
          items:
            $ref: "#/components/schemas/EnumPair"
        availableSBScreenManagerPlatforms:
          type: array
          description: List of available SBScreenManager platforms
          items:
            $ref: "#/components/schemas/EnumPair"
    AsyncTaskConfirmation:
      type: object
      description: Confirmation message to identify which async task was launched
      required:
        - asyncTaskId
        - details
      properties:
        asyncTaskId:
          type: integer
          format: int64
          description: Unique identifier of the async task that was launched
          example: 234
        details:
          type: string
          description: Additional information
          example: AsyncTask Started (id:234)
    SyncLogType:
      type: string
      enum:
        - ADD
        - UPDATE
        - DELETE
        - INFO
        - ERROR
        - WARNING
      description: Type of sync log
      example: ADD
    SyncLog:
      type: object
      description: Log info for the sync
      required:
        - timestamp
        - type
        - title
        - detail
      properties:
        timestamp:
          type: string
          description: Timestamp when the log was recorded
          example: 2014-03-27 21:41:54.107000
        type:
          $ref: "#/components/schemas/SyncLogType"
        title:
          type: string
          description: Title of the log
          example: This is a log
        detail:
          type: string
          description: Additional details about this log
          example: More information blabla
    SyncStation:
      type: object
      description: Snapshot of the sync station file from SAM server
      required:
        - id
        - name
        - code
        - songCount
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the sync station
          example: 1231
        name:
          type: string
          description: Name of the station
          example: YM - Bluenotes
        code:
          type: string
          description: Sam ID of the station
          example: S360-3-510
        songCount:
          type: integer
          format: int32
          description: Number of songs in the station
          example: 203
    SyncStationDetails:
      type: object
      description: Details about the sync station snapshot
      allOf:
        - $ref: "#/components/schemas/SyncStation"
        - type: object
          required:
            - syncRoles
            - linkedBrands
          properties:
            syncRoles:
              type: array
              items:
                $ref: "#/components/schemas/SyncRole"
            linkedBrands:
              type: array
              items:
                $ref: "#/components/schemas/SyncBrand"
    SyncRole:
      type: object
      description: Snapshot of the sync role file from SAM server
      required:
        - id
        - role
        - downloadUrl
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the sync role file snapshot
          example: 123
        role:
          $ref: "#/components/schemas/GenericPair"
        downloadUrl:
          type: string
          description: Url to download the file on the cloud
          example: https://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/LocalJcote/SyncState/BrandRoles/MONO/GX_OGG_MONO_96KBPS_12DB_CRYPT/MONO_GX_OGG_MONO_96KBPS_12DB_CRYPT_20151130-10-30-32-243.json
    SyncBrand:
      type: object
      description: Snapshot of the sync brand file from SAM server
      required:
        - id
        - name
        - code
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the sync brand
          example: 1231
        name:
          type: string
          description: Name of the brand
          example: Audio 96
        code:
          type: string
          description: Sam ID of the brand
          example: MONO
        contentFileUrl:
          type: string
          description: Url to download the file in S3
          example: https://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/LocalJcote/SyncState/BrandRoles/MONO/GX_OGG_MONO_96KBPS_12DB_CRYPT/MONO_GX_OGG_MONO_96KBPS_12DB_CRYPT_20151130-10-30-32-243.json
        contentFileCreationDate:
          type: string
          description: Date the file was created
          example: 20170504-03-54-22-962
        affiliateId:
          type: integer
          format: int64
          description: Unique identifier of the affiliate
          example: 1
    SyncSong:
      type: object
      description: Snapshot of the sync song file from SAM server
      required:
        - id
        - name
        - samAssetId
        - artist
        - album
        - albumAssetId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the sync song
          example: 1231
        name:
          type: string
          description: Name of the song
          example: Monkey Wrench
        samAssetId:
          type: integer
          format: int64
          description: SAM asset ID of the song
          example: 19344
        artist:
          type: string
          description: Song's artist
          example: Foo Fighters
        album:
          type: string
          description: Song's album
          example: The Colour And The Shape
        albumAssetId:
          type: integer
          format: int64
          description: SAM asset ID of the album cover
          example: 20276
        dateAdded:
          type: string
          description: Date the song was added to the station. This field will only be
            filled if your request was in the context of a sync station,
            otherwise it will be empty
          example: 2015-01-07 09:48:20
    SyncPlaylist:
      type: object
      description: Snapshot of the sync playlist from SAM server
      required:
        - id
        - targetDate
        - samGenerationDate
        - active
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the sync playlist
          example: 1231
        targetDate:
          type: integer
          format: int64
          description: Date the playlist should play
          example: 20151207
        samGenerationDate:
          type: string
          description: Date the playlist has been generated on the SAM server
          example: 2015-12-04 00:34:40
        active:
          type: boolean
          description: Is this playlist active?
          example: true
    SyncPlaylistContent:
      type: object
      description: Snapshot of the sync playlist content
      required:
        - samGenerationDate
        - dayparts
      properties:
        samGenerationDate:
          type: string
          description: Date the playlist has been generated on the SAM server
          example: 2015-12-04 00:34:40
        dayparts:
          type: array
          items:
            $ref: "#/components/schemas/Daypart"
    Daypart:
      type: object
      description: Information of what must play in a playlist at a specific time in a day
      required:
        - startTimeMs
        - entries
      properties:
        startTimeMs:
          type: integer
          format: int64
          description: Time in a day in milliseconds where the daypart should start
          example: 0
        entries:
          type: array
          items:
            $ref: "#/components/schemas/DaypartEntry"
    DaypartEntry:
      type: object
      description: Media that needs to play at a specific time in the daypart
      required:
        - assetId
        - title
        - artist
        - runtimeMs
        - startTimeMs
      properties:
        assetId:
          type: integer
          format: int64
          description: SAM asset ID
          example: 19792
        mergedAssetIds:
          type: array
          items:
            type: integer
            format: int64
          description: Other asset id that this media is replacing
            (duplicates/old/alternate version of the media)
          example: 12315
        title:
          type: string
          description: Title of the media
          example: I Feel You
        artist:
          type: string
          description: Name of the artist of the media
          example: Depeche Mode
        runtimeMs:
          type: integer
          format: int64
          description: Length of the media in milliseconds
          example: 255770
        startTimeMs:
          type: integer
          format: int64
          description: Start time of the media from the start of the daypart
          example: 255770
    MediaPlayerOutput:
      type: object
      description: Information about a media player output. A media player can be any
        device (SBX, Screen, etc..) with multiple outputs
      required:
        - uniqueId
        - mediaPlayerId
        - techType
        - store
        - status
        - name
        - active
        - activationCode
        - zoneName
        - tags
        - tagCategories
      properties:
        uniqueId:
          type: integer
          format: int64
          description: Unique identifier of the media player's output
          example: 123
        mediaPlayerId:
          type: string
          description: Unique identifier of the media player
          example: T001105
        techType:
          $ref: "#/components/schemas/TechType"
        channel:
          $ref: "#/components/schemas/GenericPair"
        playbackChannel:
          $ref: "#/components/schemas/GenericPair"
        mediaFeed:
          $ref: "#/components/schemas/GenericPair"
        store:
          $ref: "#/components/schemas/StoreCore"
        status:
          $ref: "#/components/schemas/DeviceStatusState"
        name:
          type: string
          description: Name of the media player's output
          example: Screen Backstore
        active:
          type: boolean
          description: Indicates whether the media player's output is active
          example: true
        activationCode:
          type: string
          description: The activation code that need to be entered by the client/installer
            to activate the media player
          example: "336795018"
        fedexTrackingNumber:
          type: string
          description: Tracking number for the shipping of this media player
          example: F234DFWER2342345
        calendar:
          $ref: "#/components/schemas/GenericPair"
        zoneName:
          type: string
          description: Name of the zone assigned to this media player output
          example: Resto Bar
        networkConfigurationId:
          type: integer
          format: int64
          description: Unique identifier of the active network configuration
          example: 123
        tags:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
        tagCategories:
          type: array
          items:
            $ref: "#/components/schemas/EnumPair"
        platform:
          type: string
          description: Platform that device is on
          example: Linux
        storeEnglish:
          type: boolean
          description: Indicates whether the store is configured for English
          example: true
        storeFrench:
          type: boolean
          description: Indicates whether the store is configured for French
          example: true
    MediaPlayerOutputCore:
      type: object
      description: Information about a media player output. Mainly use for update purposes.
      required:
        - uniqueId
        - mediaPlayerId
        - techType
      properties:
        uniqueId:
          type: integer
          format: int64
          description: Unique identifier of the media player's output
          example: 123
        mediaPlayerId:
          type: string
          description: Unique identifier of the media player
          example: T001105
        techType:
          $ref: "#/components/schemas/TechType"
    TechType:
      type: string
      enum:
        - SBX
        - MI
      description: Type of technology used for a media player
    StoreCore:
      type: object
      description: Information about a store
      required:
        - id
        - number
        - status
        - contentUpdateType
        - address
        - storeEnglish
        - storeFrench
        - internalStore
        - brandId
        - brandName
        - claperMasterPassword
        - downloadConnectionTimeoutMs
        - downloadSocketTimeoutMs
        - tags
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the store
          example: 123
        number:
          type: string
          description: Number of the store
          example: McDonald des Sources
        status:
          $ref: "#/components/schemas/StoreStatus"
        contentUpdateType:
          $ref: "#/components/schemas/ContentUpdateType"
        address:
          $ref: "#/components/schemas/Address"
        storeEnglish:
          type: boolean
          description: Indicates whether the store is configured for English
          example: true
        storeFrench:
          type: boolean
          description: Indicates whether the store is configured for French
          example: false
        internalStore:
          type: boolean
          description: Indicates whether the store is for internal use only
          example: true
        brandId:
          type: integer
          format: int64
          description: Id of the brand which contains this store
          example: 23
        brandName:
          type: string
          description: Name of the brand the store is in
          example: Kelseys
        claperMasterPassword:
          type: string
          description: The password to use to login as master on the Jukebox app
          example: 123ABC
        downloadConnectionTimeoutMs:
          type: integer
          format: int64
          description: The time in milliseconds for download to timeout. Default is 60000
            (1 minute) for most stores
          example: 60000
        downloadSocketTimeoutMs:
          type: integer
          format: int64
          description: The time in milliseconds for a socket connection to timeout. Default
            is 30000 (30 seconds) for most stores
          example: 30000
        gpCustomerId:
          type: string
          description: Great Plains customer id
          example: "116034"
        tags:
          type: array
          description: List of the tags assigned to this entity
          items:
            type: string
    StoreUpdateInfo:
      type: object
      description: Information to do an update to a store
      required:
        - number
        - status
        - contentUpdateType
        - addressId
        - storeEnglish
        - storeFrench
        - internalStore
        - claperMasterPassword
        - downloadConnectionTimeoutMs
        - downloadSocketTimeoutMs
        - tags
      properties:
        number:
          type: string
          description: Number of the store
          example: McDonald des Sources
        status:
          $ref: "#/components/schemas/StoreStatus"
        contentUpdateType:
          $ref: "#/components/schemas/ContentUpdateType"
        addressId:
          type: integer
          format: int64
          description: Unique identifier of the related address
          example: 123
        storeEnglish:
          type: boolean
          description: Indicates whether the store is configured for English
          example: true
        storeFrench:
          type: boolean
          description: Indicates whether the store is configured for French
          example: false
        internalStore:
          type: boolean
          description: Indicates whether the store is for internal use only
          example: true
        claperMasterPassword:
          type: string
          description: The password to use to login as master on the Jukebox app
          example: 123ABC
        downloadConnectionTimeoutMs:
          type: integer
          format: int64
          description: The time in milliseconds for download to timeout. Default is 60000
            (1 minute) for most stores
          example: 60000
        downloadSocketTimeoutMs:
          type: integer
          format: int64
          description: The time in milliseconds for a socket connection to timeout. Default
            is 30000 (30 seconds) for most stores
          example: 30000
        gpCustomerId:
          type: string
          description: Great Plains customer id
          example: "116034"
        tags:
          type: array
          description: List of the tags assigned to this entity
          items:
            type: string
    UpdateStoreBasicInfo:
      type: object
      description: Information to update to a store's basic info
      required:
        - number
      properties:
        number:
          type: string
          description: Number of the store
          example: McDonald des Sources
    MediaPlayerOutputsUpdateInfo:
      type: object
      description: Information to do an update to one or multiple media player
      required:
        - mediaPlayerOutputs
        - messagingTagsEditingEnabled
      properties:
        mediaPlayerOutputs:
          type: array
          items:
            $ref: "#/components/schemas/MediaPlayerOutputCore"
        newChannelId:
          type: integer
          format: int64
          description: New unique identifier of the channel to use
          example: 434
        newCalendarId:
          type: integer
          format: int64
          description: New unique identifier of the calendar to use
          example: 434
        newPlaybackChannelId:
          type: integer
          format: int64
          description: New unique identifier of the playback channel to use
          example: 434
        newMediaFeedId:
          type: integer
          format: int64
          description: New unique identifier of the media feed to use
          example: 434
        messagingTagsEditingEnabled:
          type: boolean
          description: Indicates whether the messaging tags should also be edited
          example: true
        messagingTagList:
          type: array
          items:
            type: string
          description: List of tags for the messaging
    SongBanInfo:
      type: object
      description: Information about a song and its banned status
      allOf:
        - $ref: "#/components/schemas/SongBanCore"
        - type: object
          required:
            - title
            - artist
            - album
            - dateAdded
            - stations
          properties:
            title:
              type: string
              description: Title of the song
              example: Enter Sandman
            artist:
              type: string
              description: Artist of the song
              example: Metallica
            album:
              type: string
              description: Album of the song
              example: Metallica (Black Album)
            dateAdded:
              type: string
              description: Date the song was added in the station
              example: 2017-06-27
            stations:
              type: string
              description: Concatenation of all the stations where this song is available
              example: "*34*38*"
    UpdateBanConfigInfo:
      type: object
      description: Information to update the ban config
      required:
        - bannedSongs
      properties:
        bannedSongs:
          type: array
          items:
            $ref: "#/components/schemas/SongBanCore"
    SongBanCore:
      type: object
      description: Core information about a song ban
      required:
        - id
        - banned
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of a song
          example: 123
        banned:
          type: boolean
          description: Indicates whether the song is banned
          example: false
    ThrottlingScheme:
      type: object
      description: Configuration of the throttling scheme to schedule when the devices are
        allowed to download and at what speed
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: "#/components/schemas/ThrottlingSchemeEntry"
    ThrottlingSchemeEntry:
      type: object
      description: Schedule entry in the throttling scheme
      required:
        - id
        - maxSpeed
        - onMo
        - onTu
        - onWe
        - onTh
        - onFr
        - onSa
        - onSu
        - startTime
        - endTime
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the throttling scheme entry
          example: 123
        maxSpeed:
          type: integer
          format: int64
          description: Maximum speed allowed in bytes
          example: 1000
        onMo:
          type: boolean
          description: Indicates whether the throttling entry is active on Monday
          example: true
        onTu:
          type: boolean
          description: Indicates whether the throttling entry is active on Tuesday
          example: true
        onWe:
          type: boolean
          description: Indicates whether the throttling entry is active on Wednesday
          example: true
        onTh:
          type: boolean
          description: Indicates whether the throttling entry is active on Thurdays
          example: true
        onFr:
          type: boolean
          description: Indicates whether the throttling entry is active on Friday
          example: true
        onSa:
          type: boolean
          description: Indicates whether the throttling entry is active on Saturday
          example: true
        onSu:
          type: boolean
          description: Indicates whether the throttling entry is active on Sunday
          example: true
        startTime:
          $ref: "#/components/schemas/SplitTime"
        endTime:
          $ref: "#/components/schemas/SplitTime"
    SplitTime:
      type: object
      description: Representation of the time
      required:
        - hour
        - min
      properties:
        hour:
          type: integer
          format: int32
          description: Hour part of the time
          example: 2
          minimum: 0
          maximum: 23
        min:
          type: integer
          format: int32
          description: Minute part of the time
          example: 58
          minimum: 0
          maximum: 59
    Song:
      type: object
      description: Information about a song
      required:
        - url
      properties:
        url:
          type: string
          description: Url to download the song
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/blablabla?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
    StoreCreationInfo:
      type: object
      description: Information needed to create a store (and possibly the box)
      required:
        - deviceType
        - managerEmail
        - number
        - storeEnglish
        - storeFrench
        - address
        - createUserAndAccess
        - createDevice
        - internalStore
      properties:
        deviceType:
          $ref: "#/components/schemas/DeviceType"
        managerEmail:
          type: string
          description: Manager's email
          example: thatguy@thatcompany.com
        number:
          type: string
          description: Store's number
          example: 23356
        storeEnglish:
          type: boolean
          description: Indicates whether English language is selected in the store
          example: true
        storeFrench:
          type: boolean
          description: Indicates whether French language is selected in the store
          example: true
        address:
          $ref: "#/components/schemas/AddressCore"
        gpCustomerId:
          type: string
          description: Great Plains customer id
          example: "116034"
        createUserAndAccess:
          type: boolean
          description: Indicates whether we want the system to create default user and
            access for the store
          example: true
        createDevice:
          type: boolean
          description: Indicates whether we want the system to create the device, if needed
          example: true
        internalStore:
          type: boolean
          description: Indicates whether the store is for internal use only
          example: true
        languageCode:
          type: string
          description: Preferred language code of the new user
          example: fr
    Address:
      type: object
      description: Complete information about an address, including its unique identifier
      allOf:
        - $ref: "#/components/schemas/AddressCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the address
              example: 123
            associatedStore:
              $ref: "#/components/schemas/GenericPair"
    AddressCore:
      type: object
      description: Representation of an generic address
      properties:
        contactName:
          type: string
          description: Name of the manager
        companyName:
          type: string
          description: Name of the company
          example: ""
        address1:
          type: string
          description: First line of the address
          example: 666 Hell Street
        address2:
          type: string
          description: Second line of the address
          example: App. 13
        city:
          type: string
          description: City where the store is located
          example: Montreal
        province:
          type: string
          description: Province where the store is located
          example: Quebec
        country:
          type: string
          description: Country where the store is located
          example: Canada
        zipCode:
          type: string
          description: Zip code of the store
          example: H3C 1P2
        phoneNumber:
          type: string
          description: Store's phone number
          example: 514-937-0707
        timeZone:
          type: string
          description: Store's time zone
          example: America/Montreal
    NewBrand:
      type: object
      description: Information needed to create a new brand
      required:
        - mono
        - productType
        - techType
        - clientName
        - brandName
        - claperEnabled
      properties:
        clientGroupSamId:
          type: string
          description: Identifier of the client group from SAM server
          example: CLAP_BLUENOTES
        songRoleId:
          type: integer
          format: int64
          description: Unique identifier of the related song role
          example: 36
        messagingRoleId:
          type: integer
          format: int64
          description: Unique identifier of the related messaging role
          example: 32
        signageRoleId:
          type: integer
          format: int64
          description: Unique identifier of the related signage role
          example: 43
        albumCoverSmallRoleId:
          type: integer
          format: int64
          description: Unique identifier of the related small album cover role
          example: 32
        albumCoverLargeRoleId:
          type: integer
          format: int64
          description: Unique identifier of the related large album cover role
          example: 132
        mono:
          type: boolean
          description: Indicates whether the brand has a role with mono sound
          example: true
        productType:
          $ref: "#/components/schemas/ProductType"
        techType:
          $ref: "#/components/schemas/TechType"
        clientName:
          type: string
          description: Name of the client
          example: Stingray
        brandName:
          type: string
          description: Name of the brand
          example: Cara inc
        brandCode:
          type: string
          description: Unique brand identifier
          example: CARA
          maximum: 4
          minimum: 1
        gpCustomerId:
          type: string
          description: Great Plains customer ID
          example: "1234532"
        claperEnabled:
          type: boolean
          description: Indicates whether the brand's devices use claper (SBX mobile
            controller) by default
          example: false
        magicInfoSharedSignageConfigId:
          type: integer
          format: int64
          description: Unique identifier of the shared signage config, if any
          example: 234
        magicInfoConfig:
          $ref: "#/components/schemas/MagicInfoConfigCore"
        industryTypeId:
          type: integer
          format: int64
          description: Unique identifier of the industry type, if any
          example: 234
        agreeToTermsConditionsAndPrivacyPolicy:
          type: boolean
          description: Indicates whether the user has accepted the terms, conditions and
            privacy policy (only used when subscribing from self-serve)
          example: true
        subscribeToNewsletters:
          type: boolean
          description: Indicates whether the user wants to subscribe to newsletters (only
            used when subscribing from self-serve)
          example: true
        userId:
          type: integer
          format: int64
          description: Unique identifier of the user (only used when subscribing from
            self-serve)
          example: 123
    SoftwareUploadInfo:
      type: object
      description: Information needed to upload a device software from url
      required:
        - version
        - label
        - isDefaultVersion
        - softwareType
        - configFormat
      properties:
        version:
          type: string
          description: Device software version
          example: 3.1.1
        softwareType:
          type: string
          description: Type of the software
          example: Claper
        isDefaultVersion:
          type: boolean
          description: Is this the default version
          example: true
        label:
          type: string
          description: The device software label (text identifier)
          example: DeviceSoftware Label
        configFormat:
          type: string
          description: String identifier of configuration format
          example: v3_5
        jarUrl:
          type: string
          description: Url where to download the jar
          example: https://url.com/jars3
        debUrl:
          type: string
          description: Url where to download the debian file
          example: https://url.com/debs3
        apkUrl:
          type: string
          description: Url where to download the apk
          example: https://url.com/apks3
        zipUrl:
          type: string
          description: Url where to download the zip
          example: https://url.com/zips3
    SignageConfig:
      type: object
      description: Information about a signage configuration
      required:
        - id
        - maximumDurationSec
        - defaultImageDurationSec
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the signage configuration
          example: 123
        maximumDurationSec:
          type: integer
          format: int64
          description: Minimum duration in seconds for an imported image
          example: 5
        defaultImageDurationSec:
          type: integer
          format: int64
          description: Default image duration in seconds when importing an image
          example: 5
        magicInfoConfig:
          $ref: "#/components/schemas/MagicInfoConfig"
    MagicInfoConfig:
      type: object
      description: Complete information about a Magic Info configuration, including unique
        identifier.
      allOf:
        - $ref: "#/components/schemas/MagicInfoConfigCore"
        - type: object
          required:
            - id
            - contentGroupId
            - playlistGroupId
            - scheduleGroupId
            - deviceGroupId
            - deactivatedGroupId
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the Magic Info configuration
              example: 123
            contentGroupId:
              type: integer
              format: int32
              description: ID of the content group on Magic Info server
              example: 23
            playlistGroupId:
              type: integer
              format: int32
              description: ID of the playlist group on Magic Info server
              example: 23
            scheduleGroupId:
              type: integer
              format: int32
              description: ID of the schedule group on Magic Info server
              example: 23
            deviceGroupId:
              type: integer
              format: int32
              description: ID of the device group on Magic Info server
              example: 23
            deactivatedGroupId:
              type: integer
              format: int32
              description: ID of the deactivated group on Magic Info server
              example: 23
    MagicInfoConfigCore:
      type: object
      description: Information about the magic info configuration
      required:
        - userId
        - userPassword
        - serverIp
        - serverPort
        - ftpPort
        - context
        - assetMaxSizeMb
        - channelMaxSizeMb
        - shared
      properties:
        userId:
          type: string
          description: Username
          example: videoAdmin
        userPassword:
          type: string
          description: User's password
          example: ""
        serverIp:
          type: string
          description: Server IP address
          example: 192.168.0.1
        serverPort:
          type: string
          description: Server port
          example: "7001"
        ftpPort:
          type: integer
          format: int32
          description: FTP server port
          example: 21
        context:
          type: string
          description: Server context
          example: MagicInfo
        assetMaxSizeMb:
          type: integer
          format: int32
          description: Maximum size of assets in MB
          example: 500
        channelMaxSizeMb:
          type: integer
          format: int32
          description: Maximum size of a channel in MB
          example: 1500
        name:
          type: string
          description: Name of the Magic Info configuration. Only used for shared Magic
            Info configurations.
          example: CDMV
        shared:
          type: boolean
          description: Indicates whether the signage config is shared across the system
          example: false
    UpdateBrandInfo:
      type: object
      description: Information to update a brand
      required:
        - brandName
        - clientName
        - defaultDeviceType
        - productStatus
        - clientAccessToStationScheduling
        - clientAccessToPlaybackScheduling
        - claperEnabled
        - apiEnabled
        - messagingTagsEnabled
        - library
        - featureLinearEnabled
        - featureSignageEnabled
        - techSBXEnabled
        - techMIEnabled
        - forceHttpsDownloads
        - urlStyle
      properties:
        brandName:
          type: string
          description: Name of the brand
          example: Cara restaurants
        clientName:
          type: string
          description: Name of the client
          example: Name of the client
        clientSiteUrl:
          type: string
          description: URL of the client website
          example: http://www.stingray.com
          default: ""
        defaultDeviceType:
          $ref: "#/components/schemas/DeviceType"
        productStatus:
          $ref: "#/components/schemas/ProductStatus"
        clientAccessToStationScheduling:
          type: boolean
          description: Indicates whether the client has access to the station scheduling
          example: true
        clientAccessToPlaybackScheduling:
          type: boolean
          description: Indicates whether the client has access to the playback scheduling
          example: true
        claperEnabled:
          type: boolean
          description: Indicates whether the brand has claper enabled by default on SB
            devices
          example: true
        apiEnabled:
          type: boolean
          description: Indicates whether the brand has the api enabled by default on SB
            devices
          example: true
        messagingTagsEnabled:
          type: boolean
          description: Indicates whether the brand use messaging tags by default
          example: true
        library:
          type: boolean
          description: Indicates whether the brand is a library
          example: true
        featureLinearEnabled:
          type: boolean
          description: Indicates whether the brand linear feature is enabled
          example: true
        featureSignageEnabled:
          type: boolean
          description: Indicates whether the brand signage feature is enabled
          example: true
        techSBXEnabled:
          type: boolean
          description: Indicates whether the brand SBX tech is enabled
          example: true
        techMIEnabled:
          type: boolean
          description: Indicates whether the brand Magic Info tech is enabled
          example: true
        gpCustomerId:
          type: string
          description: Great Plains customer ID
          example: "1234532"
        forceHttpsDownloads:
          type: boolean
          description: Indicates whether Https should be used instead of http
          example: true
        urlStyle:
          $ref: "#/components/schemas/UrlStyle"
        ipAddressFilter:
          $ref: "#/components/schemas/IpAddressFilter"
        deviceMenuAccessInfo:
          $ref: "#/components/schemas/DeviceMenuAccessInfo"
    UpdateBrandBasicInfo:
      type: object
      description: Information to update a brand's basic info
      required:
        - brandName
      properties:
        brandName:
          type: string
          description: Name of the brand
          example: Cara restaurants
    ReturnStatusType:
      type: string
      enum:
        - DeviceHardwareStatus
        - DeviceSoftwareStatus
        - StorageHardwareStatus
      description: The kinds of statuses that can be used for a device return
      example: deviceHardwareStatus
    LicenseStatus:
      type: string
      enum:
        - Active
        - Expired
      description: Status of a license
      example: Active
    ProductStatus:
      type: string
      enum:
        - ACTIVE
        - CLOSED
        - NOT_READY
      description: Status of a brand
      example: ACTIVE
    Product:
      type: object
      description: Information about a brand
      required:
        - id
        - name
        - type
        - status
        - reportingAvailableToClient
        - whitelistingPattern
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the product
          example: 123
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the related brand
          example: 123
        name:
          type: string
          description: Product name
          example: Backstore
        type:
          $ref: "#/components/schemas/ProductType"
        status:
          $ref: "#/components/schemas/ProductStatus"
        code:
          type: string
          description: Product code (legacy)
          example: SUBW
        gpCustomerId:
          type: string
          description: Great Plains customer id
          example: "1233231"
        video:
          type: boolean
          description: Indicates whether the brand is video
          example: true
        reportingAvailableToClient:
          type: boolean
          description: Indicates whether the client has access to reporting
          example: true
        whitelistingPattern:
          $ref: "#/components/schemas/UrlStyle"
        defaultZone1:
          type: integer
          format: int64
          description: Default zone 1
          example: 4563
        defaultZone2:
          type: integer
          format: int64
          description: Default zone 2
          example: 342356
        messagingFeature:
          $ref: "#/components/schemas/MessagingFeature"
        stationSchedulingFeature:
          $ref: "#/components/schemas/StationSchedulingFeature"
        signageFeature:
          $ref: "#/components/schemas/SignageFeature"
        playerPlaybackFeature:
          $ref: "#/components/schemas/PlayerPlaybackFeature"
        jukeboxFeature:
          $ref: "#/components/schemas/JukeboxFeature"
        galaxieApiFeature:
          $ref: "#/components/schemas/GalaxieApiFeature"
        licensingFeature:
          $ref: "#/components/schemas/LicensingFeature"
        sbxTech:
          $ref: "#/components/schemas/SbxTech"
        magicInfoTech:
          $ref: "#/components/schemas/MagicInfoTech"
        galaxieApiTech:
          $ref: "#/components/schemas/GalaxieApiTech"
        productLifecycle:
          $ref: "#/components/schemas/ProductLifecycle"
    MessagingFeature:
      type: object
      required:
        - id
        - primaryRole
        - languageOrder
        - songBetweenMultilanguageMessage
        - tagsEnabled
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the messaging feature
          example: 123
        primaryRole:
          $ref: "#/components/schemas/GenericPair"
        fallbackRole:
          $ref: "#/components/schemas/GenericPair"
        defaultMessageCalendar1:
          $ref: "#/components/schemas/GenericPair"
        defaultMessageCalendar2:
          $ref: "#/components/schemas/GenericPair"
        languageOrder:
          type: string
          description: Order of the languages
          example: fr,en
        songBetweenMultilanguageMessage:
          type: integer
          format: int32
          description: Number of songs between multi-language messages
          example: 0
        tagsEnabled:
          type: boolean
          description: Indicates whether the messaging tags feature is enabled
          example: true
    StationSchedulingFeature:
      type: object
      required:
        - id
        - primaryRole
        - availableToClient
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the station scheduling feature
          example: 123
        primaryRole:
          $ref: "#/components/schemas/GenericPair"
        fallbackRole:
          $ref: "#/components/schemas/GenericPair"
        defaultStationSchedulingChannel1:
          $ref: "#/components/schemas/GenericPair"
        defaultStationSchedulingChannel2:
          $ref: "#/components/schemas/GenericPair"
        availableToClient:
          type: boolean
          description: Indicates whether the station scheduling feature is available to
            clients
          example: true
    SignageFeature:
      type: object
      required:
        - id
        - primaryRole
        - library
        - noTimeRulesAllowed
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the signage feature
          example: 123
        primaryRole:
          $ref: "#/components/schemas/GenericPair"
        fallbackRole:
          $ref: "#/components/schemas/GenericPair"
        signageConfig:
          $ref: "#/components/schemas/SignageConfig"
        defaultSignageChannel:
          $ref: "#/components/schemas/GenericPair"
        library:
          type: boolean
          description: Indicates whether the sigange feature is a library
          example: true
        noTimeRulesAllowed:
          type: boolean
          description: Indicates whether time rules are allowed or not
          example: true
    PlayerPlaybackFeature:
      type: object
      required:
        - id
        - availableToClient
        - defaultSbxPlaybackChannel
        - defaultMiPlaybackChannel
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the station scheduling feature
          example: 123
        availableToClient:
          type: boolean
          description: Indicates whether the playback scheduling feature is available to
            clients
          example: true
        defaultSbxPlaybackChannel:
          $ref: "#/components/schemas/GenericPair"
        defaultMiPlaybackChannel:
          $ref: "#/components/schemas/GenericPair"
    JukeboxFeature:
      type: object
      required:
        - id
        - enabled
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the signage feature
          example: 123
        primaryLargeCoverRole:
          $ref: "#/components/schemas/GenericPair"
        fallbackLargeCoverRole:
          $ref: "#/components/schemas/GenericPair"
        primarySmallCoverRole:
          $ref: "#/components/schemas/GenericPair"
        fallbackSmallCoverRole:
          $ref: "#/components/schemas/GenericPair"
        enabled:
          type: boolean
          description: Indicates whether the jukebox feature has claper enabled
          example: true
    GalaxieApiFeature:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Galaxie API feature
          example: 123
        industryTypeId:
          type: integer
          format: int64
          description: Unique identifier of the industry type
          example: 123
    LicensingFeature:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the licensing feature
          example: 123
        billingAccount:
          $ref: "#/components/schemas/BillingAccount"
    SbxTech:
      type: object
      required:
        - id
        - defaultDeviceType
        - deviceMenuAccessInfo
        - lastUpdateImageindex
        - forceHttpsDownloads
        - apiEnabled
        - maximumSoftwareVersionsEnforced
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the licensing feature
          example: 123
        defaultDeviceType:
          $ref: "#/components/schemas/DeviceType"
        defaultNetworkConfig:
          $ref: "#/components/schemas/NetworkConfig"
        deviceMenuAccessInfo:
          $ref: "#/components/schemas/DeviceMenuAccessInfo"
        throttlingScheme:
          $ref: "#/components/schemas/ThrottlingScheme"
        lastUpdateImageindex:
          type: integer
          format: int64
          description: Index of the last image update
          example: "1237"
        forceHttpsDownloads:
          type: boolean
          description: Indicates whether Https should be used instead of http
          example: true
        apiEnabled:
          type: boolean
          description: Indicates whether the clap api is enabled
          example: true
        maximumSoftwareVersionsEnforced:
          type: boolean
          description: Indicates whether the maximum software version validation is enforced
          example: true
        maximumPlayerSoftwareVersion:
          $ref: "#/components/schemas/Software"
        maximumInstallerSoftwareVersion:
          $ref: "#/components/schemas/Software"
        maximumSBScreenManagerSoftwareVersion:
          $ref: "#/components/schemas/Software"
        maximumSBFirmwareSoftwareVersion:
          $ref: "#/components/schemas/Software"
        maximumBackdoorSoftwareVersion:
          $ref: "#/components/schemas/Software"
        maximumJukeboxSoftwareVersion:
          $ref: "#/components/schemas/Software"
    SbxTechUpdate:
      type: object
      required:
        - maximumSoftwareVersionsEnforced
      properties:
        maximumSoftwareVersionsEnforced:
          type: boolean
          description: Indicates whether the maximum software version validation is enforced
          example: true
        maximumPlayerSoftwareVersionId:
          type: integer
          format: int64
          description: Unique identifier of the maximum player software version
          example: 123
        maximumInstallerSoftwareVersionId:
          type: integer
          format: int64
          description: Unique identifier of the maximum installer software version
          example: 123
        maximumSBScreenManagerSoftwareVersionId:
          type: integer
          format: int64
          description: Unique identifier of the maximum SB screen manager software version
          example: 123
        maximumSBFirmwareSoftwareVersionId:
          type: integer
          format: int64
          description: Unique identifier of the maximum SB firmware software version
          example: 123
        maximumBackdoorSoftwareVersionId:
          type: integer
          format: int64
          description: Unique identifier of the maximum backdoor software version
          example: 123
        maximumJukeboxSoftwareVersionId:
          type: integer
          format: int64
          description: Unique identifier of the maximum jukebox software version
          example: 123
    MagicInfoTech:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Magic Info tech
          example: 123
        magicInfoConfig:
          $ref: "#/components/schemas/MagicInfoConfig"
    GalaxieApiTech:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Galaxie API tech
          example: 123
    ProductLifecycle:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the product lifecycle
          example: 123
        creationDate:
          type: string
          description: Creation date of the product lifecycle
          example: 2016-11-08 21:02:05
        activationDate:
          type: string
          description: Activation date of the product lifecycle
          example: 2016-11-08 21:02:05
        closeDate:
          type: string
          description: Close date of the product lifecycle
          example: 2016-11-08 21:02:05
    BillingAccountStatus:
      type: string
      enum:
        - Active
        - Closed
      description: Status of a billing account
      example: Active
    BillingSubscriptionServiceInterruptionReason:
      type: string
      enum:
        - Paused
        - Expired
        - NotStartedYet
      description: Reason for the interruption of billing subscription
      example: Paused
    BillingSubscriptionExpirationReason:
      type: string
      enum:
        - Cancellation
        - Termination
        - PastDue
      description: Reason for the expiration of a billing subscription
      example: Cancellation
    BillingInfo:
      type: object
      description: Recurly billing information
      properties:
        firstName:
          type: string
          description: Client's first name
          example: John
        lastName:
          type: string
          description: Client's last name
          example: Doe
        company:
          type: string
          description: Client company's name
          example: Acme Inc.
        address1:
          type: string
          description: Client's address 1
          example: 1342 Evergreen Terrace
        address2:
          type: string
          description: Client's address 2
          example: Apt. 2
        city:
          type: string
          description: Client's city
          example: Montreal
        state:
          type: string
          description: Client's state/province
          example: Quebec
        postalCode:
          type: string
          description: Client's postal code
          example: H1H 2H3
        country:
          type: string
          description: Client's country code
          example: CA
        phone:
          type: string
          description: Client's phone number
          example: 123-456-7890
        vatNumber:
          type: string
          description: Client's phone VAT number
          example: 123456789 RT0001
        ipAddress:
          type: string
          description: Client's IP address
          example: 123.123.123.123
        currency:
          type: string
          description: Client's currency
          example: CAD
        creditCardType:
          type: string
          description: Client's credit card type
          example: CA
        creditCardNumber:
          type: string
          description: Client's credit card number
          example: 4111 1111 1111 1111
        creditCardFirstSixDigits:
          type: string
          description: First six digits of the client's credit card
          example: "412345"
        creditCardLastFourDigits:
          type: string
          description: Last four digits of the client's credit card
          example: "7058"
        creditCardExpirationYear:
          type: integer
          format: int32
          description: Expiration year of the client's credit card
          example: "2025"
        creditCardExpirationMonth:
          type: integer
          format: int32
          description: Expiration month of the client's credit card
          example: "07"
        creditCardVerificationValue:
          type: string
          description: Verication value of the client's credit card
          example: "123"
    BillingInfoUpdate:
      type: object
      description: Information needed to update an account's billing info.
      properties:
        token:
          type: string
          description: Token used for communication between Control Site and Recurly
          example: 1RLxIgCpEQlfbxto3iChqw
        billingInfo:
          $ref: "#/components/schemas/BillingInfo"
    BillingAccountAddressUpdate:
      type: object
      description: Information needed to update an account's address.
      required:
        - billingAccountAddress
      properties:
        billingAccountAddress:
          $ref: "#/components/schemas/BillingAccountAddress"
    ChannelPublishedStatus:
      type: string
      enum:
        - Unpublished
        - RecentlyPublished
        - Published
      description: Publishing status of a channel
      example: Published
    UrlStyle:
      type: string
      enum:
        - MixedStyle
        - DomainStyle
        - PathStyle
      description: Style of a Url
      example: MixedStyle
    AvailableStation:
      type: object
      description: Information about an available station for a brand
      required:
        - id
        - name
        - ableToUnlinkStation
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the station
          example: 123
        name:
          type: string
          description: Concatenation of the station name + the sam id
          example: StationName (supercool)
        ableToUnlinkStation:
          type: boolean
          description: Indicates whether we can unlink the station (if it is not used)
          example: true
    MatchingRoles:
      type: object
      description: Contains all the matching roles for each category
      required:
        - songRoles
        - messagingRoles
        - signageRoles
        - albumCoverSmallRoles
        - albumCoverLargeRoles
      properties:
        songRoles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          description: List of all the song roles
        messagingRoles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          description: List of all the messaging roles
        signageRoles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          description: List of all the signage roles
        albumCoverSmallRoles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          description: List of all the small album cover roles
        albumCoverLargeRoles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          description: List of all the large album cover roles
    ClaperSupportValidation:
      type: object
      description: Information about the support of Claper
      required:
        - supported
      properties:
        supported:
          type: boolean
          description: Indicates whether claper is supported
          example: true
    FeatureType:
      type: string
      enum:
        - Signage
        - Messaging
        - Station_Scheduling
        - Player_Playback
        - Jukebox
        - Galaxie_Api
        - Licensing
      description: Type of feature supported by the system
      example: LINEAR
    ProductType:
      type: string
      enum:
        - Linear
        - Signage
        - Galaxie_Api
      description: Type of product
      example: Linear
    BrandingType:
      type: string
      enum:
        - NOBRAND
        - GALAXY
        - STINGRAY
      description: Type of branding supported by the system
      example: NOBRAND
    AudioSignal:
      type: string
      enum:
        - MONO
        - STEREO
      description: Type of audio signal supported by the system
      example: STEREO
    Brand:
      type: object
      description: Representation of a brand
      required:
        - affiliateId
        - clientAccessToReporting
        - brandName
        - clientName
        - selfServeBrand
      properties:
        firstProduct:
          $ref: "#/components/schemas/Product"
        affiliateId:
          type: integer
          format: int64
          description: Unique identifier of the related affiliate
          example: 123
        clientAccessToReporting:
          type: boolean
          description: Indicates whether the client has access to reporting
          example: true
        brandName:
          type: string
          description: Brand's name
          example: Subway
        clientName:
          type: string
          description: Client's name
          example: Stingray
        clientSiteUrl:
          type: string
          description: Client's website url
          example: www.stingray.com
        userId:
          type: integer
          format: int64
          description: Unique identifier of the user (only used when subscribing from
            self-serve)
          example: 123
        currentSelfServeStep:
          $ref: "#/components/schemas/SelfServeStep"
        selfServeBrand:
          type: boolean
          description: Indicates whether the brand is a self-serve brand
          example: true
        languages:
          type: array
          items:
            $ref: "#/components/schemas/Language"
    SelfServeStep:
      type: string
      enum:
        - Company_Info
        - Billing_And_Licensing
    IpAddressFilterCore:
      type: object
      description: Basic information needed for an IP address filter
      required:
        - brandId
        - filterType
        - filterValue
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 56
        filterType:
          $ref: "#/components/schemas/FilterType"
        filterValue:
          type: string
          description: Value of the filter
          example: 1.160.10.240
    IpAddressFilter:
      type: object
      description: Information needed for an IP address filter
      allOf:
        - $ref: "#/components/schemas/IpAddressFilterCore"
        - type: object
          required:
            - brandId
            - filterType
            - filterValue
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the IP address filter
              example: 123
    FilterType:
      type: string
      description: Enum of the different methods of IP address filters
      enum:
        - IPADDRESSLIST
      example: IPADDRESSLIST
    AdminBrandProductSettings:
      type: object
      description: Subset of the brand resource. Information about the settings of a brand
      properties:
        availableStationSchedulingChannels:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
          description: List of the available station scheduling channels
        availableSignageChannels:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
          description: List of the available signage channels
        availablePlaybackChannels:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
          description: List of the available playback channels
        availableTagCategories:
          type: array
          items:
            $ref: "#/components/schemas/TagCategory"
          description: List of the available tag categories
        availableProductStatuses:
          type: array
          items:
            $ref: "#/components/schemas/EnumPair"
          description: List of the available product statuses
        availableDeviceTypes:
          type: array
          items:
            $ref: "#/components/schemas/EnumPair"
          description: List of the available device types
        availableZones:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
          description: List of the available zones
        availableCalendars:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
          description: List of the available calendars
        availableInterfaceTypes:
          type: array
          items:
            $ref: "#/components/schemas/EnumPair"
          description: List of the available interface types
        availableAuthTypes:
          type: array
          items:
            $ref: "#/components/schemas/EnumPair"
          description: List of available authentication types
        roleSong:
          type: string
          description: Brand's song role
          example: GX_OGG_MONO_96KBPS_12DB_CLEAN_CUE_CUT_CRYPT
        roleMessaging:
          type: string
          description: Brand's messaging role
          example: GX_OGG_MONO_96KBPS_12DB_CLEAN_CUE_CUT_CRYPT
        roleAlbumCoverLarge:
          type: string
          description: Brand's large album cover role
          example: ALBUM_COVER_56_JPG
        roleAlbumCoverSmall:
          type: string
          description: Brand's small album cover role
          example: ALBUM_COVER_574_JPG
        roleSignage:
          type: string
          description: Brand's signage role
          example: CS_SIGNAGE_VIDEO_AAC_192KBPS_H264_30FPS
        samClientGroup:
          type: string
          description: Brand's client group from SAM
          example: CLAP_SUBWAY
        gpCustomerId:
          type: string
          description: Great Plains customer id
          example: "1233231"
        defaultStationSchedulingChannel1:
          type: integer
          format: int64
          description: Default station scheduling channel 1
          example: 2
        defaultStationSchedulingChannel2:
          type: integer
          format: int64
          description: Default station scheduling channel 2
          example: 3
        defaultMIPlaybackChannel:
          type: integer
          format: int64
          description: Default MI playback channel
          example: 4
        defaultSbxPlaybackChannel:
          type: integer
          format: int64
          description: Default SBX playback channel
          example: 2
        defaultSignageChannel:
          type: integer
          format: int64
          description: Default signage channel
          example: 5
        defaultZone1:
          type: integer
          format: int64
          description: Default zone 1
          example: 4563
        defaultZone2:
          type: integer
          format: int64
          description: Default zone 2
          example: 342356
        defaultCalendar1:
          type: integer
          format: int64
          description: Default calendar 1
          example: 123
        defaultCalendar2:
          type: integer
          format: int64
          description: Default calendar 2
          example: 123
        networkConfig:
          $ref: "#/components/schemas/NetworkConfig"
        selectedInterfaceType:
          $ref: "#/components/schemas/InterfaceType"
        selectedAuthenticationType:
          $ref: "#/components/schemas/AuthenticationType"
        forceHttpsDownloads:
          type: boolean
          description: Indicates whether Https should be used instead of http
          example: true
        deviceMenuAccessInfo:
          $ref: "#/components/schemas/DeviceMenuAccessInfo"
        billingAccount:
          $ref: "#/components/schemas/BillingAccount"
    BrandListingInfo:
      type: object
      description: Representation of a brand used by listing
      required:
        - id
        - status
        - name
        - clientName
        - claperEnabled
        - maximumSoftwareVersionsEnforced
        - gpCustomerId
        - storesCount
        - supportsLinear
        - supportsSignage
        - supportsGalaxieApi
        - allowsSBX
        - allowsMI
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 123
        status:
          $ref: "#/components/schemas/ProductStatus"
        code:
          type: string
          description: Brand's code
          example: LOL1
        name:
          type: string
          description: Brand's name
          example: Super funny brand
        clientName:
          type: string
          description: Name of the client
          example: ""
        claperEnabled:
          type: boolean
          description: Indicates whether claper is enabled for this brand
          example: true
        maximumSoftwareVersionsEnforced:
          type: boolean
          description: Indicates whether maximum software versions are enforced
          example: true
        gpCustomerId:
          type: string
          description: Brand's Great Plains customer ID
          example: 131314
        storesCount:
          type: integer
          format: int64
          description: Number of stores in the brand
          example: 5
        supportsLinear:
          type: boolean
          description: Indicates whether the brand supports linear content
          example: true
        supportsSignage:
          type: boolean
          description: Indicates whether the brand supports signage content
          example: false
        supportsGalaxieApi:
          type: boolean
          description: Indicates whether the brand supports Galaxie Api content
          example: false
        allowsSBX:
          type: boolean
          description: Indicates whether the brand allows SBX tech
          example: true
        allowsMI:
          type: boolean
          description: Indicates whether the brand allows Magic Info tech
          example: false
    PoolDeviceCreationInfo:
      type: object
      description: Information needed for the creation of pool devices
      required:
        - deviceCount
      properties:
        deviceCount:
          type: integer
          format: int64
          description: The number of devices to create
          example: 3
    BrandStationsInfo:
      type: object
      description: Information about the stations that should be linked to a brand
      required:
        - stationIds
      properties:
        stationIds:
          type: array
          items:
            type: integer
            format: int64
    DeviceMenuAccessInfo:
      type: object
      description: Menu access level of a device
      required:
        - stationChangeAllowed
        - volumeChangeAllowed
        - networkChangeAllowed
        - powerChangeAllowed
      properties:
        stationChangeAllowed:
          $ref: "#/components/schemas/DeviceMenuAccessRightsState"
        volumeChangeAllowed:
          $ref: "#/components/schemas/DeviceMenuAccessRightsState"
        networkChangeAllowed:
          $ref: "#/components/schemas/DeviceMenuAccessRightsState"
        powerChangeAllowed:
          $ref: "#/components/schemas/DeviceMenuAccessRightsState"
    DefaultValues:
      type: object
      description: Different default values of the system
      required:
        - assetMaxSize
        - channelMaxSize
        - ftpPort
        - environmentName
        - logEntryTypes
      properties:
        assetMaxSize:
          type: integer
          format: int32
          description: Maximum asset size in MB
          example: 500
        channelMaxSize:
          type: integer
          format: int32
          description: Maximum channel site in MB
          example: 1500
        ftpPort:
          type: integer
          format: int32
          description: FTP server port
          example: 21
        environmentName:
          type: string
          description: Name of the current environment
          example: Dev
        logEntryTypes:
          type: array
          items:
            $ref: "#/components/schemas/LogEntryTypeInfo"
    LogEntryTypeInfo:
      type: object
      description: Info about a log entry type
      required:
        - name
        - maxLogSize
      properties:
        name:
          $ref: "#/components/schemas/LogEntryType"
        maxLogSize:
          type: integer
          format: int32
          description: Maximum log that can be retrieved in a single query
          example: 5000
    LogEntryType:
      type: string
      description: Enum of the different log entry types available
      enum:
        - BRAND_LOG
        - HISTORY_LOG
        - LIFECYCLE
        - DEVICE_LOG
        - PLAYOUT_LOG
        - STORE_LOG
        - SYNC_STATE_LOG
        - SYSTEM_LOG
        - TASK_LOG_ENTRY
        - WEB_SOCKET_THROTTLE_LOG
        - MEDIA_FEED_SERVICE_LOG
      example: BRAND_LOG
    LibraryInfo:
      type: object
      description: Information about a library we want to link to a brand
      required:
        - libraryBrandId
        - containerName
      properties:
        libraryBrandId:
          type: integer
          format: int64
          description: Unique identifier of the brand containing the library container
          example: 123
        containerName:
          type: string
          description: Name of the container of the library type
          example: supercontainer
    StationAssignationInfo:
      type: object
      description: Information about the station assignation
      required:
        - stationId
      properties:
        stationId:
          type: integer
          format: int64
          description: Unique identifier of the station
          example: 123
    BrandStationUpdate:
      type: object
      description: Information about an update to a brand station
      required:
        - name
        - availableToClient
      properties:
        name:
          type: string
          description: Name of the brand station
          example: Heavy Metal
        availableToClient:
          type: boolean
          description: Indicates whether the brand station is available to the client
          example: true
    Store:
      type: object
      description: Complete store information
      allOf:
        - $ref: "#/components/schemas/StoreCore"
        - type: object
          required:
            - activeDevicesCount
            - inactiveDevicesCount
            - unreturnedInactiveDevicesCount
            - usbNeeded
            - usbShipped
          properties:
            activeDevicesCount:
              type: integer
              format: int64
              description: Number of active devices in this store
              example: 1
            inactiveDevicesCount:
              type: integer
              format: int64
              description: Number of inactive devices in this store
              example: 3
            unreturnedInactiveDevicesCount:
              type: integer
              format: int64
              description: Number of unreturned inactives devices in this store
              example: 0
            usbNeeded:
              type: boolean
              description: Indicates whether usb is needed
              example: true
            usbShipped:
              type: boolean
              description: Indicates whether usb is shipped
              example: true
            usbShippingType:
              $ref: "#/components/schemas/ShippingType"
            usbFedexTrackingNumber:
              type: string
              description: Fedex tracking number
              example: "2342342"
            usbShippingInfoId:
              type: integer
              format: int64
              description: Shipping info id
              example: 423
    StoreStatus:
      type: string
      enum:
        - Active
        - Closed
        - DevicePool
      description: Store's status
      example: Active
    ContentUpdateType:
      type: string
      enum:
        - Network
        - USB
        - Mixed
      description: Content update type
      example: Network
    IntegerIDUpdateInfo:
      type: object
      description: Any update that consists of a single long ID can use this object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier
          example: 123
    AddMessageForm:
      type: object
      properties:
        message-name:
          type: string
        tags:
          type: array
          items:
            type: string
        tag-logic-gate:
          type: string
        file-fr:
          type: string
          format: binary
        file-en:
          type: string
          format: binary
      required:
        - message-name
        - tags
        - tag-logic-gate
    PlaybackChannelUpdateInfo:
      type: object
      description: All the information needed to change the default playback schedule
      required:
        - id
        - techType
      properties:
        id:
          $ref: "#/components/schemas/IntegerIDUpdateInfo"
        techType:
          $ref: "#/components/schemas/TechType"
    ThrottlingSchemePreview:
      type: object
      description: Another version of the throttling scheme crafted for a preview
      required:
        - entries
      properties:
        entries:
          type: array
          items:
            $ref: "#/components/schemas/ThrottlingSchemePreviewEntry"
    ThrottlingSchemePreviewEntry:
      type: object
      description: Entry in the throttling scheme preview
      required:
        - day
        - time
        - speed
      properties:
        day:
          type: string
          description: Day of the week
          example: Mo
        time:
          type: string
          description: Time of the day
          example: 00:00
        speed:
          type: integer
          format: int64
          description: Maximum speed
          example: 99999999
    DeviceOutputUpdateInfo:
      type: object
      description: Information to update a device output
      required:
        - channelId
      properties:
        channelId:
          type: integer
          format: int64
          description: New channel id that we want for the given device output
          example: 123
    MediaFeedLogType:
      type: string
      enum:
        - INFO
        - WARNING
        - ERROR
      description: The type of media feed log log entry
      example: INFO
    MediaFeedLog:
      type: object
      description: Information about a media feed log
      required:
        - timestamp
        - log
        - type
      properties:
        name:
          type: string
          description: Name of the media feed
          example: mediaFeedName
        timestamp:
          type: string
          description: Timestamp of the log
          example: 2014-03-27 21:41:54.107000
        type:
          $ref: "#/components/schemas/MediaFeedLogType"
        log:
          type: string
          description: The log's description
          example: This is a fabulous log
        detail:
          type: string
          description: Additional detail about the log
          example: This is a fabulous log's fantastic detail
    StoreLog:
      type: object
      description: Information about a store log
      required:
        - timestamp
        - userEmail
        - log
      properties:
        timestamp:
          type: string
          description: Timestamp of the log
          example: 2014-03-27 21:41:54.107000
        userEmail:
          type: string
          description: Email of the user that created or trigered the log
          example: admin@lol.com
        log:
          type: string
          description: The log's description
          example: This is a fabulous log
    NewLog:
      type: object
      description: Basic info about a new log. Often used for creation
      required:
        - description
      properties:
        description:
          type: string
          description: Description of the log
          example: This is a fabulous log
    DeviceCore:
      type: object
      description: Basic information about a device
      required:
        - id
        - brandName
        - storeNumber
        - active
        - phoneActivated
        - replacementCount
      properties:
        id:
          type: string
          description: Unique identifier of the device
          example: S000123
        brandName:
          type: string
          description: Name of the brand the device is in
          example: Kelseys
        storeNumber:
          type: string
          description: Number of the store the device is in
          example: Super 8 motel
        active:
          type: boolean
          description: Indicates whether the device is active
          example: true
        phoneActivated:
          type: boolean
          description: Indicates whether the device has been activated by phone
          example: true
        replacementCount:
          type: integer
          format: int32
          description: Number of times this device has been replaced
          example: 4
    DeviceAssignationInfo:
      type: object
      description: Information about the assignation of a device
      required:
        - deviceId
      properties:
        deviceId:
          type: string
          description: Unique identifier of a device
          example: 123
    ScreenCore:
      type: object
      description: Information about the screen
      required:
        - id
        - channel
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the screen
          example: 123
        channel:
          $ref: "#/components/schemas/GenericPair"
    ClapActionType:
      type: string
      enum:
        - RestoreBackup
        - Synchronize
        - GetStatus
        - GetSyncSnapshot
        - RebootDevice
        - RestartClap
        - Beep
      description: List of available actions for clap that are callable via the API
      example: RestoreBackup
    DeviceAction:
      type: object
      description: Basic information about a device's action
      required:
        - actionType
      properties:
        actionType:
          $ref: "#/components/schemas/ClapActionType"
    Location:
      type: object
      description: Information about a location. Used for the station picker. It's a mix of
        information coming from other sources (device, output, brand, store,
        etc..)
      required:
        - brandId
        - brandName
        - zoneName
        - address1
        - storeNumber
        - storeId
        - deviceId
        - outputId
        - channelId
        - isVideo
        - isSignage
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 123
        brandName:
          type: string
          description: Name of the brand
          example: Stingray
        zoneName:
          type: string
          description: Name of the zone
          example: Restaurant
        address1:
          type: string
          description: Line 1 of the address
          example: 666 Hell Street
        storeNumber:
          type: string
          description: Store's number
          example: ABC123
        storeId:
          type: integer
          format: int64
          description: Unique identifier of the related store
          example: 123
        deviceId:
          type: string
          description: Unique identifier of the related device
          example: LOLD00001
        outputId:
          type: integer
          format: int64
          description: Unique identifier of the related output
          example: 123
        channelId:
          type: integer
          format: int64
          description: Unique identifier of the current channel assigned to this location
          example: 123
        isVideo:
          type: boolean
          description: Indicates whether the brand is a video brand
          example: true
        isSignage:
          type: boolean
          description: Indicates whether the brand is a signage brand
          example: true
    BrandAvailableChannels:
      type: object
      description: Represents the link between a brand id and the available channels
      required:
        - brandId
        - availableChannels
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 123
        availableChannels:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
    DevicesShipmentInfo:
      type: object
      description: Information needed for the device preparation
      required:
        - deviceIds
        - shippingType
        - shippingPackageTypeId
        - returnShipmentRequested
        - fedexManualTrackNbr
      properties:
        deviceIds:
          type: array
          items:
            type: string
            description: Unique identifier of the device
            example: LOLD123
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        shippingAddressId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping address
          example: 123
        shippingPackageTypeId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping package type
          example: 123
        returnShipmentRequested:
          type: boolean
          description: Indicates whether the return shipment is requested
          example: false
        fedexManualTrackNbr:
          type: string
          description: Fedex manual tracking number
          example: ASD12312
        returnAddressId:
          type: integer
          format: int64
          description: Unique identifier of the related return address
          example: 123
        workOrder:
          type: string
          description: Work order's ID from business system
          example: "123"
    DevicesPreparationInfo:
      type: object
      description: Information needed for the device preparation
      required:
        - deviceIds
        - playerId
        - platform
        - installerId
        - backdoorId
        - shippingType
        - shippingAddressId
        - shippingPackageTypeId
        - fileSystemId
        - deviceHardwareId
        - returnShipmentRequested
      properties:
        deviceIds:
          type: array
          items:
            type: string
            description: Unique identifier of the devices to prepare
            example: 123
        playerId:
          type: integer
          format: int64
          description: Unique identifier of the device's player software
          example: 123
        platform:
          $ref: "#/components/schemas/Platform"
        installerId:
          type: integer
          format: int64
          description: Unique identifier of the device's installer software
          example: 123
        backdoorId:
          type: integer
          format: int64
          description: Unique identifier of the device's backdoor software
          example: 123
        claperId:
          type: integer
          format: int64
          description: Unique identifier of the device's claper software
          example: 123
        sbFirmwareId:
          type: integer
          format: int64
          description: Unique identifier of the device's sbFirmware software
          example: 123
        sbScreenManagerId:
          type: integer
          format: int64
          description: Unique identifier of the device's sbScreenManager software
          example: 123
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        shippingAddressId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping address
          example: 123
        shippingPackageTypeId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping package type
          example: 123
        fileSystemId:
          type: integer
          format: int64
          description: Unique identifier of the related file system
          example: 123
        deviceHardwareId:
          type: integer
          format: int64
          description: Unique identifier of the related device hardware
          example: 123
        fedexManualTrackNbr:
          type: string
          description: Fedex manual tracking number
          example: ASD12312
        returnShipmentRequested:
          type: boolean
          description: Indicates whether the return shipment is requested
          example: false
        returnAddressId:
          type: integer
          format: int64
          description: Unique identifier of the related return address
          example: 123
        workOrder:
          type: string
          description: Work order's ID from business system
          example: "123"
    DevicesBatchOperation:
      type: object
      description: Results of a batch operation of one or more devices
      required:
        - successList
        - errorList
      properties:
        successList:
          type: array
          items:
            $ref: "#/components/schemas/DeviceOperationSuccessResult"
        errorList:
          type: array
          items:
            $ref: "#/components/schemas/DeviceOperationErrorResult"
    DeviceOperationSuccessResult:
      type: object
      description: When a device operation is successful, this is the object used to show
        results
      required:
        - deviceId
        - newStatus
        - platform
        - playerVersion
        - installerVersion
        - backdoorVersion
        - claperWebVersion
        - shippingInfo
      properties:
        deviceId:
          type: string
          description: Unique identifier of the device
          example: 123
        newStatus:
          $ref: "#/components/schemas/DeviceStatusState"
        platform:
          $ref: "#/components/schemas/Platform"
        playerVersion:
          type: string
          description: Software version of the player
          example: 1.3.4
        installerVersion:
          type: string
          description: Software version of the installer
          example: 1.0.13.installer
        backdoorVersion:
          type: string
          description: Software version of the backdoor
          example: 1.0.7.backdoor
        claperWebVersion:
          type: string
          description: Software version of the claper web
          example: 0.0.2.claperweb
        sbFirmwareVersion:
          type: string
          description: Software version of the SBFirmware
          example: 3.2.1.sbfirmware
        sbScreenManagerVersion:
          type: string
          description: Software version of the SBScreenManager
          example: 1.2.3.sbscreenmanager
        fedexTrackingNumber:
          type: string
          description: Tracking number from the shipping info of the device
          example: "800029115248925"
        shippingInfo:
          $ref: "#/components/schemas/ShippingInfo"
    DeviceOperationErrorResult:
      type: object
      description: When a device operation is not successful, this is the object used to
        show results
      required:
        - deviceId
        - error
      properties:
        deviceId:
          type: string
          description: Unique identifier of the device
          example: 123
        error:
          type: string
          description: The errors that occurred with the operation on this device
          example: NullPointerException
    DeviceSoftwarePushBatchOperation:
      type: object
      description: Results of a software push batch operation of one or more devices
      required:
        - successList
        - errorList
      properties:
        successList:
          type: array
          items:
            $ref: "#/components/schemas/DeviceSoftwarePushOperationSuccessResult"
        errorList:
          type: array
          items:
            $ref: "#/components/schemas/DeviceOperationErrorResult"
    DeviceSoftwarePushOperationSuccessResult:
      type: object
      description: When a device software push operation is successful, this is the object
        used to show results
      required:
        - deviceId
        - player
        - installer
      properties:
        deviceId:
          type: string
          description: Unique identifier of the device
          example: 123
        player:
          $ref: "#/components/schemas/DeviceSoftwareState"
        installer:
          $ref: "#/components/schemas/DeviceSoftwareState"
        backdoor:
          $ref: "#/components/schemas/DeviceSoftwareState"
        claperWeb:
          $ref: "#/components/schemas/DeviceSoftwareState"
        sbFirmware:
          $ref: "#/components/schemas/DeviceSoftwareState"
        sbScreenManager:
          $ref: "#/components/schemas/DeviceSoftwareState"
    DeviceSoftwareImplementation:
      type: object
      description: Implementation of a device software
      required:
        - id
        - platform
        - deviceSoftware
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the implementation
          example: 123
        platform:
          $ref: "#/components/schemas/Platform"
        format:
          $ref: "#/components/schemas/FileFormat"
        deviceSoftware:
          $ref: "#/components/schemas/Software"
        playerDependency:
          $ref: "#/components/schemas/Software"
        installerDependency:
          $ref: "#/components/schemas/Software"
        backdoorDependency:
          $ref: "#/components/schemas/Software"
        claperDependency:
          $ref: "#/components/schemas/Software"
        sbFirmwareDependency:
          $ref: "#/components/schemas/Software"
        sbScreenManagerDependency:
          $ref: "#/components/schemas/Software"
    DeviceSoftwareState:
      type: object
      description: Device software version and info for current and requested software
      required:
        - currentVersion
        - requestedVersion
      properties:
        currentVersion:
          type: string
          description: Current version of the Device Software
          example: 1.2.3.installer
        requestedVersion:
          type: string
          description: Requested version of the Device Software
          example: 3.2.1.backdoor
        requestedVersionInfo:
          type: string
          description: Additional information about the requested software version for this
            device
          example: "Request: Mon May 16 09:02:20 EDT 2016 Force: true Downloaded: Mon
            Jul 04 10:53:49 EDT 2016 Download Retries: 0"
    PrintInfo:
      type: object
      description: Print info of the shipping info
      required:
        - shippingType
        - fedex
        - trackingId
        - shippingDate
      properties:
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        fedex:
          type: boolean
          description: Indicates whether the shipping uses fedex
          example: true
        trackingId:
          type: string
          description: Unique identifier of the tracking
          example: VAR-297-351
        zpl:
          type: string
          description: Zebra shipping label
          example: "^XA^CF,0,0,0^PR4^LS-20^MD30^PW800^POI^CI13^LH0,20^FO0,147^GB800,4,\
            4^FS^FO0,401^GB800,4,4^FS^FO0,736^GB800,4,4^FS^FO35,12^AdN,0,0^FWN^\
            FH^FDFrom:^FS^FO35,31^AdN,0,0^FWN^FH^FD^FS^FO35,51^AdN,0,0^FWN^FH^F\
            DStingray Digital Group Inc.^FS^FO35,71^AdN,0,0^FWN^FH^FD730
            Wellington^FS^FO35,92^AdN,0,0^FWN^FH^FD^FS^FO35,132^AdN,0,0^FWN^FH^\
            FD(514) 664-1244^FS^FO490,72^AdN,0,0^FWN^FH^FDCAD:
            100174692/WSXI2800^FS^FO43,188^A0N,25,27^FWN^FH^FDInstaller^FS^FO43\
            ,218^A0N,25,27^FWN^FH^FD^FS^FO43,248^A0N,25,27^FWN^FH^FD790 Rosemont
            App 810^FS^FO43,278^A0N,25,27^FWN^FH^FD**TEST LABEL - DO NOT
            SHIP**^FS^FO35,112^AdN,0,0^FWN^FH^FDMontreal, PQ
            H3C1T4^FS^FO490,31^AdN,0,0^FWN^FH^FDShip Date:
            16SEP14^FS^FO490,51^AdN,0,0^FWN^FH^FDActWgt: 0.8
            KG^FS^FO43,158^A0N,25,27^FWN^FH^FDMr.
            Installer^FS^FO615,156^AdN,0,0^FWN^FH^FD(555)
            555-5555^FS^FO43,306^A0N,30,30^FWN^FH^FDMontreal, PQ
            H2S0A7^FS^FO530,306^A0N,35,45^FWN^FH^FD(CA)^FS^FO725,216^AdN,0,0^FW\
            N^FH^FDGround^FS^FO670,238^GB105,10,10^FS^FO670,248^GB10,112,10^FS^\
            FO765,248^GB10,112,10^FS^FO670,360^GB105,10,10^FS^FO476,3^GB4,145,4\
            ^FS^FO650,173^A0N,50,55^FWN^FH^FDFedEx^FS^FO690,256^A0N,130,130^FWN\
            ^FH^FDG^FS^FO80,771^BY4,2^BCN,290,N,N,N,N^FWN^FD>;>8961201900000000\
            0000000^FS^FO135,1083^A0N,25,27^FWN^FH^FD(9612019)
            0000000  00000000^FS^FO783,258^A0N,15,15^FWB^FH^FDJ14221409092126^F\
            S^FO10,162^A0N,20,18^FWN^FH^FDTO^FS^FO25,1108^A0N,50,55^FWN^FH^FDGN\
            D^FS^FO25,1150^A0N,35,45^FWN^FH^FDPrepaid^FS^FO300,1115^A0N,35,45^F\
            WN^FH^FD^FS^FO300,1149^A0N,35,45^FWN^FH^FD^FS^FO30,428^BY2,2^B7N,10\
            ,5,12^FH^FWN^FH^FD[)>_1E01_1D02H2S0A7_1D124_1D019_1D000000000000000\
            _1DFDEB_1D0000000_1D259_1D_1D1/1_1D0.71KG_1DN_1D790 Rosemont App
            810_1DMontreal_1DPQ_1DMr.
            Installer_1E06_1D10ZGD008_1D11ZInstaller_1D12Z5555555555_1D14Z**TEST
            LABEL - DO NOT SHIP**_1D23ZN_1D22Z_1CN_1D20Z
            _1C0_1D31Z                                  _1D33Z  _1D34Z01_1D9KVA\
            R-297-350_1D26Ze4e7_1C_1D_1E_04^FS^FO16,358^A0N,15,15^FWN^FH^FDRef:
            VAR-297-350^FS^FO16,373^A0N,15,15^FWN^FH^FDINV:
            ^FS^FO16,388^A0N,15,15^FWN^FH^FDPO:
            ^FS^FO406,388^A0N,15,15^FWN^FH^FDDept:
            ^FS^FO625,495^A0N,20,35^FWN^FH^FD1^FS^FO640,535^A0N,20,35^FWN^FH^FD\
            of^FS^FO625,575^A0N,20,35^FWN^FH^FD1^FS^PQ1^XZ"
        shippingDate:
          type: string
          description: Date of the shipping
          example: 2014-09-16 14:35:27
    AffiliateFedexShipperInfo:
      type: object
      description: Fedex shipper info of an affiliate
      required:
        - companyName
        - phoneNumber
        - streetLine
        - city
        - province
        - postalCode
        - countryCode
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the affiliate fedex shipper info
          example: 123
        companyName:
          type: string
          description: Name of the affiliate company
          example: Stingray Digital Group Inc.
        phoneNumber:
          type: string
          description: Phone number of the affiliate company
          example: (514)123-4567
        streetLine:
          type: string
          description: Street address of the affiliate company
          example: 4555 Boulevard de la Grande Allee
        city:
          type: string
          description: City of the affiliate company
          example: Boisbriand
        postalCode:
          type: string
          description: Postal code of the affiliate company
          example: J7H 1M8
        province:
          type: string
          description: Province of the affiliate company
          example: QC
        countryCode:
          type: string
          description: Country of the affiliate company
          example: CA
        fedexApiAccountNumber:
          type: string
          description: Account number for fedex Api
          example: accountNumber
        fedexApiMeterNumber:
          type: string
          description: Meter number for fedex Api
          example: meterNumber
        fedexApiKey:
          type: string
          description: Key for fedex Api
          example: thisIsAKey
        fedexApiPassword:
          type: string
          description: Password number for fedex Api
          example: password123
    AffiliateFedexShippingLabelInfo:
      type: object
      description: Label info specific to the affiliate
      required:
        - fromAddress
        - trackingStr
        - shipToStr
        - installAtStr
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the affiliate fedex shipping label info
          example: 123
        fromAddress:
          $ref: "#/components/schemas/GenericAddress"
        trackingStr:
          type: string
          description: Tracking string specific to the affiliate
          example: "Tracking:"
        shipToStr:
          type: string
          description: Ship to string specific to the affiliate
          example: Ship To
        installAtStr:
          type: string
          description: Install at string specific to the affiliate
          example: "Install At:"
    ShippingStatus:
      type: string
      enum:
        - New
        - InTransit
        - Delivered
      description: All possible shipping statuses
      example: New
    ShippingInfo:
      type: object
      description: Information about the shipping for a device
      allOf:
        - $ref: "#/components/schemas/PrintInfo"
        - type: object
          required:
            - id
            - shippingPackageType
            - shippingStatus
            - notes
            - instigator
            - shipAddress
            - affiliateFedexShippingLabelInfo
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the shipping info
              example: 123
            affiliateFedexShippingLabelInfo:
              $ref: "#/components/schemas/AffiliateFedexShippingLabelInfo"
            deviceId:
              type: string
              description: Unique identifier of a device
              example: "123"
            store:
              $ref: "#/components/schemas/GenericPair"
            shippingPackageType:
              type: string
              description: Shipping package type
              example: USB Update Envelope
            shippingStatus:
              $ref: "#/components/schemas/ShippingStatus"
            netCharge:
              type: string
              description: Net charge
              example: 13.94 CAD
            notes:
              type: string
              description: Notes
              example: Usb Update
            instigator:
              type: string
              description: "Name of the shipping info's instigator "
              example: admin@stingray.com
            fedexTrackingNumber:
              type: string
              description: Fedex tracking number
              example: "771884690023"
            fedexTrackingNumberType:
              type: string
              description: Fedex tracking number type
              example: FEDEX
            shipAddress:
              $ref: "#/components/schemas/Address"
            endpointAddress:
              $ref: "#/components/schemas/Address"
            returnInfo:
              $ref: "#/components/schemas/PrintInfo"
            workOrder:
              type: string
              description: Work order for a fedex shipment
              example: This is a work order
            statusText:
              type: string
              description: Text explaining the status of the shipping info
              example: >-
                DEV-O001032-368 Routing Details Shipment Billing Weight: 2.0 LB
                Shipment Base Charge: 6.8 CAD Shipment Net Charge: 8.32 CAD
                Shipment Total Surcharge: 0.44 CAD FUEL: 0.44 CAD GROUND
                tracking number: 800029115287894 Billing Weight: 1.0 KG Base
                Charge: 6.8 CAD Net Charge: 8.32 CAD Total Surcharge: 0.44 CAD
                FUEL: 0.44 CAD Ground Service Code: 019 Notification no. 0:

                Severity: WARNING Code: 7035 Message: Estimated duties and taxes are only valid for international requests. Source: ship
    GenericAddress:
      type: object
      description: Simple address consisting of 4 strings mainly used for the shipping label
      required:
        - line1
        - line2
        - line3
        - line4
      properties:
        line1:
          type: string
          description: Line 1 of the address
          example: line1
        line2:
          type: string
          description: Line 2 of the address
          example: line2
        line3:
          type: string
          description: Line 3 of the address
          example: line3
        line4:
          type: string
          description: Line 4 of the address
          example: line4
    ZoneCore:
      type: object
      description: Core information about a zone
      required:
        - name
        - bsTriggerCategoryId
      properties:
        name:
          type: string
          description: Name of the zone
          example: Restaurant
        bsTriggerCategoryId:
          type: integer
          format: int64
          description: Unique identifier of the Broadsign trigger category
          example: 27901283
    Zone:
      type: object
      description: Complete information about a zone
      allOf:
        - $ref: "#/components/schemas/ZoneCore"
        - type: object
          required:
            - id
            - brandId
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of a zone
              example: 123
            brandId:
              type: integer
              format: int64
              description: Unique identifier of the related brand
              example: 123
    SelfServeSubscriptionInfoCore:
      type: object
      description: Required info in order to subscribe a user using the self-serve
        acquisition flow
      required:
        - administratorName
        - email
        - subscribeToNewsletters
      properties:
        administratorName:
          type: string
          description: Name of the user
          example: John Doe
        email:
          type: string
          description: Email of the user
          example: someone@somewhere.com
        industryTypeId:
          type: integer
          format: int64
          description: Unique identifier of an industry type
          example: 123
        affiliateUuid:
          type: string
          description: Unique identifier of an affiliate
          example: 765cf91f-4c07-4d6e-b62a-931caac538f5
        subscribeToNewsletters:
          type: boolean
          description: Indicates whether the user wants to subscribe to the newsletter or
            not
          example: "true"
    SelfServeSubscriptionInfo:
      type: object
      description: Required info in order to subscribe a user using the self-serve
        acquisition flow
      allOf:
        - $ref: "#/components/schemas/SelfServeSubscriptionInfoCore"
        - type: object
          required:
            - password
            - agreeWithTermsConditionsAndPrivacyPolicy
          properties:
            password:
              type: string
              description: Password of the user
              example: qwerty123456
            agreeWithTermsConditionsAndPrivacyPolicy:
              type: boolean
              description: Indicates whether the user has accepted the terms and conditions
                & privacy policy agreement or not
              example: "true"
    SelfServeCompletedSubscription:
      type: object
      description: Info available once the self-serve subscription is completed
      allOf:
        - $ref: "#/components/schemas/SelfServeSubscriptionInfoCore"
        - type: object
          required:
            - brandId
            - affiliateId
            - newlyCreatedUser
            - newlyCreatedBrand
          properties:
            brandId:
              type: integer
              format: int64
              description: Id of the brand linked to the subscription
              example: 123
            affiliateId:
              type: integer
              format: int64
              description: Id of the affiliate of the brand linked to the subscription
              example: 456
            newlyCreatedUser:
              type: boolean
              description: Indicates whether the user was just created during the
                subscription or not
              example: "true"
            newlyCreatedBrand:
              type: boolean
              description: Indicates whether the brand was just created during the
                subscription or not
              example: "true"
    SelfServeBrandInitializationInfo:
      type: object
      description: Required info in order to intialize a brand using the self-serve
        acquisition flow
      allOf:
        - $ref: "#/components/schemas/CompanyInfo"
        - type: object
          required:
            - brandId
          properties:
            brandId:
              type: integer
              format: int64
              description: Unique identifier of a brand
              example: 123
    BillingAccount:
      type: object
      description: Required information to create a new billing account
      required:
        - id
        - status
        - referenceCode
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the billing account
          example: "45"
        status:
          $ref: "#/components/schemas/BillingAccountStatus"
        referenceCode:
          type: string
          description: Reference code of the billing account (UUID)
          example: 711cbac6-b19f-4f18-bf80-a9e165411667
    SelfServeBrandFinalizationInfo:
      type: object
      description: Info about the billing initialization
      required:
        - billingAccount
        - brand
      properties:
        billingAccount:
          $ref: "#/components/schemas/BillingAccount"
        brand:
          $ref: "#/components/schemas/BasicBrand"
    BillingSubscriptionPlan:
      required:
        - id
        - maxLicenseCount
        - referenceCode
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the billing subscription plan
          example: 45
        maxLicenseCount:
          type: integer
          format: int32
          description: Maximum number of licenses available
          example: 3
        referenceCode:
          type: string
          description: Reference code of the billing subscription plan
          example: 343t5dr35
        name:
          type: string
          description: Name of the billing subscription plan
          example: Stingray Business Streaming 1 License
    NewUser:
      type: object
      description: Needed information to create a new user
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          description: Email of the new user. Will be used as username for the login
          example: lol@funny.com
        name:
          type: string
          description: Name of the new user
          example: Bob Cashflow
        password:
          type: string
          description: Password to be used later for login
          example: secret1234
        languageCode:
          type: string
          description: Preferred language code of the new user
          example: fr
    PasswordResetInfo:
      type: object
      description: Needed information to reset user passwords
      required:
        - emails
      properties:
        emails:
          type: array
          items:
            type: string
            description: Email of the user
            example: lol@funny.com
    SoftwareType:
      type: string
      description: Type of software available in the system
      enum:
        - Player
        - Installer
        - Backdoor
        - Claper
        - ClaperAndroid
        - SBFirmware
        - SBScreenManager
      example: Player
    DeviceSoftwarePushInfo:
      type: object
      description: Information to push software on multiple devices
      required:
        - deviceIds
        - softwareType
        - softwareId
        - forceInstall
      properties:
        deviceIds:
          type: array
          items:
            type: string
            description: Unique identifier of the device
            example: O001234
        softwareType:
          $ref: "#/components/schemas/SoftwareType"
        softwareId:
          type: integer
          format: int64
          description: Unique identifier of the software
          example: 123
        forceInstall:
          type: boolean
          description: Indicates whether the installation should be forced even if the
            version we push is older than the one on the device
          example: false
        installStartTime:
          type: string
          description: The beginning of the window where the device can update to the
            requested software version
          example: 00:22:00
        installEndTime:
          type: string
          description: The end of the window where the device can update to the requested
            software version
          example: 00:06:00
    TaskLog:
      type: object
      description: Representation of a task log
      required:
        - id
        - timestamp
        - name
        - type
        - target
        - initiator
        - notes
        - status
        - warningCount
        - errorCount
        - affiliateName
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the task log
          example: 123
        timestamp:
          type: string
          description: Time the task log was created. Will be presented in the format the
            user configured.
          example: 1987/01/01
        name:
          type: string
          description: Name of the task log
          example: Nice log
        type:
          type: string
          description: Type of the task log
          example: PUBLISH_CHANGES_FOR_ALL_BRAND_DEVICES
        target:
          type: string
          description: Target of the task log
          example: 0001/1 INT-JDPOWER-1280X720-10SEC-v2.mpeg
        initiator:
          type: string
          description: Identifier of the user/system who initiated the task
          example: admin@stingray.com
        notes:
          type: string
          description: Additional notes about the task log
          example: This helps do stuff
        status:
          type: string
          description: Status of the task log
          example: STARTED
        warningCount:
          type: integer
          format: int64
          example: 3
        errorCount:
          type: integer
          format: int64
          example: 1
        affiliateName:
          type: string
          description: Name of the related affiliate, if present
          example: Stingray
    TaskLogEntryType:
      type: string
      enum:
        - INFO
        - WARNING
        - ERROR
        - TRACE
      description: The type of task log entry
      example: INFO
    TaskLogEntry:
      type: object
      description: Log entry inside a Task Log
      required:
        - timestamp
        - log
        - type
      properties:
        timestamp:
          type: string
          description: The timestamp when this task log entry was created
          example: 2014-03-27 21:41:54.107000
        log:
          type: string
          description: The log description itself
          example: This is an awesome log
        type:
          $ref: "#/components/schemas/TaskLogEntryType"
    SyncStateSourceType:
      type: string
      enum:
        - MEMORY_ONGOING
        - DISK_NOT_ONGOING
        - UNKNOWN
      description: Type of source for the state snapshot
      example: MEMORY_ONGOING
    SyncStateSnapshot:
      type: object
      description: Snapshot of the state of a device
      required:
        - source
        - startTime
        - endTime
        - snapshotTime
        - brands
        - stations
        - ruleBasedChannels
        - overviews
      properties:
        source:
          $ref: "#/components/schemas/SyncStateSourceType"
        startTime:
          type: string
          description: Sync start date
          example: 2016-01-21 08:45:01.926000
        endTime:
          type: string
          description: Sync end date
          example: 2016-01-21 08:45:01.926000
        snapshotTime:
          type: string
          description: Snapshot date
          example: 2016-01-21 08:45:01.926000
        brands:
          type: array
          items:
            $ref: "#/components/schemas/SyncStateSnapshotDetail"
        stations:
          type: array
          items:
            $ref: "#/components/schemas/SyncStateSnapshotDetail"
        ruleBasedChannels:
          type: array
          items:
            $ref: "#/components/schemas/SyncStateSnapshotDetail"
        overviews:
          type: array
          items:
            $ref: "#/components/schemas/SyncStateSnapshotDetail"
    SyncStateSnapshotDetail:
      type: object
      description: Detailed information about a section of the SyncStateSnapshot
      required:
        - code
        - creationDate
        - role
      properties:
        code:
          type: string
          description: Unique code
          example: CS47
        creationDate:
          type: string
          description: Creation date of this object
          example: 2017-08-08T10:00:26.589-04:00
        role:
          type: string
          description: Role in the SAM system
          example: CS_SIGNAGE_VIDEO_AAC_192KBPS_H264_30FPS
        filesSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
        messagesSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
        albumCoversSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
        mediasSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
        playlistsSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
        overviewSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
        ruleBasedSchedulesSummary:
          $ref: "#/components/schemas/SyncStateSnapshotSummary"
    SyncStateSnapshotSummary:
      type: object
      description: Summary of the status of all files
      required:
        - inconsistentItems
        - missingItems
        - outdatedItems
        - unavailableItems
        - syncedCount
        - syncedSizeBytes
        - alreadySyncedCount
        - alreadySyncedSizeBytes
        - totalCount
        - totalSizeBytes
      properties:
        inconsistentItems:
          type: array
          items:
            type: string
        missingItems:
          type: array
          items:
            type: string
        outdatedItems:
          type: array
          items:
            type: string
        unavailableItems:
          type: array
          items:
            type: string
        syncedCount:
          type: integer
          format: int32
          description: Number of files that have been synced
          example: 32
        syncedSizeBytes:
          type: integer
          format: int64
          description: Size in bytes of what have been synced so far
          example: 1811214
        alreadySyncedCount:
          type: integer
          format: int32
          description: Number of files that were already synced
          example: 32
        alreadySyncedSizeBytes:
          type: integer
          format: int64
          description: Size in bytes of what was already synced
          example: 1811214
        totalCount:
          type: integer
          format: int32
          description: Total Number of files
          example: 32
        totalSizeBytes:
          type: integer
          format: int64
          description: Size in bytes of all the files
          example: 1811214
    Report:
      type: object
      description: Information about a report
      required:
        - reportEntries
      properties:
        reportEntries:
          type: array
          items:
            $ref: "#/components/schemas/ReportEntry"
    ReportEntry:
      type: object
      description: A report entry. Parts of report
      required:
        - timestamp
        - deviceId
        - storeNumber
        - brand
      properties:
        oldStatus:
          type: string
          description: Old status
          example: NotReturned
        newStatus:
          type: string
          description: New status
          example: Recycled
        timestamp:
          type: string
          description: Timestamp when this entry was created
          example: 2014-03-27 21:41:54.107000
        deviceId:
          type: string
          description: Unique identifier of the related device
          example: AD12312
        storeNumber:
          type: string
          description: Unique identifier of the related store
          example: Super 8 Laval
        brand:
          type: string
          description: Name of the related brand
          example: WallMart
    UsbReturnKey:
      type: object
      description: Information about a return scan
      required:
        - devices
      properties:
        imageVersion:
          type: string
          description: Version of the image
          example: "3"
        drive:
          type: string
          description: Drive the USB is connected
          example: D:\
        imageBrand:
          type: string
          description: Image's brand
          example: Subway's
        devices:
          type: array
          items:
            $ref: "#/components/schemas/UsbReturnDeviceInfo"
    UsbReturnKeys:
      type: object
      description: Just a simple array of UsbReturnKey
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/UsbReturnKey"
    UsbReturnDeviceInfo:
      type: object
      description: Information about a device status into a usb return scan
      required:
        - deviceId
      properties:
        deviceId:
          type: string
          description: Unique identifier of a device
          example: AD12323
        status:
          type: string
          description: Status of the device
          example: DONE
    UsbReturnResult:
      type: object
      description: Information about a usb return result
      required:
        - id
        - imageVersion
        - deviceId
        - status
        - scanUser
        - timestamp
        - brands
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the usb return result
          example: 123
        imageVersion:
          type: integer
          format: int64
          description: Image's version of the usb return result
          example: 243
        deviceId:
          type: string
          description: Unique identifier of the device
          example: AB123
        status:
          type: string
          description: Status of the usb return result
          example: DONE
        scanUser:
          type: string
          description: User who has done the scan
          example: gilles@lol.com
        storeNumber:
          type: string
          description: Store number where the device was
          example: Subway's laval
        timestamp:
          type: string
          description: Timestamp when the scan was done
          example: 2014-03-27 21:41:54.107000
        comments:
          type: string
          description: Comments
          example: This is an awesome comment
        brands:
          type: string
          description: Information about the brand of the device and the brand of the usb
            update
          example: MONO
        brandSource:
          type: string
          description: Additional information related to the 'brands' field
          example: Device/USB mismatch
    Comment:
      type: object
      description: A simple object consisting of a comment
      required:
        - comment
      properties:
        comment:
          type: string
          description: Comment
          example: This is an awesome comment
    WebSocketLog:
      type: object
      description: Information about a web socket log
      required:
        - timestamp
        - type
        - title
        - user
        - detail
      properties:
        timestamp:
          type: string
          description: Date when the system log was created
          example: 2014-03-27 21:41:54.107000
        type:
          type: string
          description: Type of web socket log
          example: CurrentPeriod
        title:
          type: string
          description: Title of the system log
          example: This is a title
        user:
          type: string
          description: User that initiated the system log
          example: lol@stingray.com
        detail:
          type: string
          description: Detail about the log
          example: Some more details
    SystemLog:
      type: object
      description: Information about a system log
      required:
        - timestamp
        - type
        - title
        - user
        - detail
      properties:
        timestamp:
          type: string
          description: Date when the system log was created
          example: 2014-03-27 21:41:54.107000
        type:
          $ref: "#/components/schemas/SystemLogType"
        title:
          type: string
          description: Title of the system log
          example: This is a title
        user:
          type: string
          description: User that initiated the system log
          example: lol@stingray.com
        detail:
          type: string
          description: Detail about the log
          example: Some more details
    SystemLogType:
      type: string
      enum:
        - INFO
        - WARNING
        - ERROR
      description: Type of system log
      example: INFO
    UserRightsRole:
      type: object
      description: Info related to a user rights role
      required:
        - id
        - code
        - name
        - description
        - securityTargetType
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user rights role
          example: 1
        code:
          type: string
          description: User rights role's code
          example: BrandManagerAssistant
        name:
          type: string
          description: User rights role's name
          example: "[Client] Brand Manager Assistant"
        description:
          type: string
          description: Description
          example: A Client who is a Read-Only version of the Brand Manager
        securityTargetType:
          $ref: "#/components/schemas/SecurityTargetType"
    SecurityTargetType:
      type: object
      description: Information about a security target type
      required:
        - id
        - code
        - name
        - description
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the security target type
          example: 1
        code:
          $ref: "#/components/schemas/SecurityTargetTypeEnum"
        name:
          type: string
          description: Security target type's name
          example: System
        description:
          type: string
          description: Description
          example: System
    SecurityTargetTypeEnum:
      type: string
      enum:
        - System
        - Affiliate
        - Brand
        - Store
      description: Enum for the Security Target type code
      example: System
    UserRightsPermission:
      type: object
      description: Info about an update to the permission
      required:
        - userRightsRoleId
        - securityActionIds
      properties:
        userRightsRoleId:
          type: integer
          format: int64
          description: Unique identifier of a user rights role id
          example: 123
        securityActionIds:
          type: array
          items:
            type: integer
            format: int64
    UserRightsPermissionDetailedEntry:
      type: object
      description: Detailed Info about an entry in the user rights permission
      required:
        - selected
        - actionId
        - actionCode
        - actionName
        - actionDescription
        - targetTypeName
      properties:
        permissionId:
          type: integer
          format: int64
          description: Unique identifier of the permission
          example: 123
        selected:
          type: boolean
          description: Indicates whether the permission is selected or not
          example: true
        actionId:
          type: integer
          format: int64
          description: Unique identifier of the action
          example: 123
        actionCode:
          type: string
          description: Unique code of the action
          example: ViewDeviceLoggingData
        actionName:
          type: string
          description: Name of the action
          example: View Device Logging Data
        actionDescription:
          type: string
          description: Description of the action
          example: Ability to access Device Logs, Playouts and Lifecycle data
        targetTypeName:
          type: string
          description: Name of the target type
          example: System
    UserRightsRoleAssignment:
      type: object
      description: Info about a role assignment
      required:
        - id
        - userName
        - userEmail
        - roleCode
        - roleName
        - roleDescription
        - targetTypeName
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the role assignment
          example: 123
        userName:
          type: string
          description: Name of the user
          example: John Snow
        userEmail:
          type: string
          description: Email of the user
          example: jsnow@stingray.com
        roleCode:
          type: string
          description: Code of the assigned role
          example: SystemAdmin
        roleName:
          type: string
          description: Name of the assigned role
          example: "[Stingray] System Administrator"
        roleDescription:
          type: string
          description: Description of the assigned role
          example: A Stingray Employee who can administrate the whole Control Site. Top
            Level Access Right Available to Stingray Employees Only
        targetTypeName:
          type: string
          description: Name of the target type
          example: System
        targetInstanceId:
          type: integer
          format: int64
          description: Unique identifier of the target instance
          example: 123
    DeviceCommand:
      type: object
      description: Info about a command to send to a device
      required:
        - type
        - command
      properties:
        type:
          $ref: "#/components/schemas/DeviceCommandType"
        command:
          type: string
          description: The command itself. It can be a json, a string or a semicolon
            separated string.
          example: test-network
    DeviceCommandType:
      type: string
      enum:
        - raw
        - json
      description: The type of device command currently supported by the system
      example: raw
    RoleAssignments:
      type: object
      description: Info about role assignments which could be granted or revoked
      required:
        - userEmails
        - roleId
        - targetType
      properties:
        userEmails:
          type: array
          items:
            type: string
            description: User email for the role assignment
            example: jsnow@got.com
        roleId:
          type: integer
          format: int64
          description: Unique identifier of the role
          example: 123
        targetType:
          $ref: "#/components/schemas/SecurityTargetTypeEnum"
        targetInstanceIds:
          type: array
          items:
            type: integer
            format: int64
            description: Unique identifier of the instance itself
            example: 123
    MessageEventCoreWithTimeListEntries:
      type: object
      description: Base of a message event with Time List entries
      allOf:
        - $ref: "#/components/schemas/MessageEventCore"
        - type: object
          required:
            - timeListEntries
          properties:
            timeListEntries:
              type: array
              items:
                $ref: "#/components/schemas/TimeListEntry"
    MessageEventCore:
      type: object
      description: "Base of a message event "
      required:
        - type
        - brandId
        - eventName
        - onMo
        - onTu
        - onWe
        - onTh
        - onFr
        - onSa
        - onSu
        - everyYear
        - startTime
        - endTime
        - startDate
        - endDate
      properties:
        type:
          $ref: "#/components/schemas/MessageEventType"
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the related brand
          example: 123
        eventName:
          type: string
          description: Name of the message event
          example: My awesome loop
        onMo:
          type: boolean
          description: Indicates whether the message event occurs on Monday
          example: true
        onTu:
          type: boolean
          description: Indicates whether the message event occurs on Tuesday
          example: true
        onWe:
          type: boolean
          description: Indicates whether the message event occurs on Wednesday
          example: true
        onTh:
          type: boolean
          description: Indicates whether the message event occurs on Thursday
          example: true
        onFr:
          type: boolean
          description: Indicates whether the message event occurs on Friday
          example: true
        onSa:
          type: boolean
          description: Indicates whether the message event occurs on Saturday
          example: true
        onSu:
          type: boolean
          description: Indicates whether the message event occurs on Sunday
          example: true
        playIntervalInMin:
          type: integer
          format: int32
          description: Interval in minutes between message events
          minimum: 1
          example: 15
        everyYear:
          type: boolean
          description: Indicates whether the message event occurs every yeay
          example: true
        startTime:
          type: string
          description: Time when the message event can start to play
          example: 03:00:00
        endTime:
          type: string
          description: Time when the message event stops
          example: 06:00:00
        startDate:
          type: string
          description: Date when the message event can start to play
          example: 2016-01-26
        endDate:
          type: string
          description: Date when the message event stops
          example: 2016-01-28
        preview:
          type: string
          description: Preview of this message event schedule
          example: 19h00 - Transition 3 (superman)
    MessageEventType:
      type: string
      enum:
        - timeLoop
        - timeList
      description: Available message event type
      example: timeLoop
    TimeListEntry:
      type: object
      description: Info about a time list entry, used by message events
      required:
        - id
        - name
        - time
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the time list entry
          example: 123
        name:
          type: string
          description: Name of the message
          example: My message
        time:
          type: string
          description: Time for this time list entry
          example: 06:00:00
    MessageEvent:
      type: object
      description: Base of a message event
      allOf:
        - $ref: "#/components/schemas/MessageEventCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the message event
              example: 123
    MessageEventsPreviewRequest:
      type: object
      description: Info needed to request a preview of message events
      required:
        - brandId
        - type
        - onMo
        - onTu
        - onWe
        - onTh
        - onFr
        - onSa
        - onSu
        - timeListEntries
        - startTime
        - endTime
        - processSingleDay
        - includeUnassignedTimes
      properties:
        brandId:
          type: integer
          format: int64
          description: Unique identifier of the related brand
          example: 123
        type:
          $ref: "#/components/schemas/MessageEventType"
        onMo:
          type: boolean
          description: Indicates whether the message event occurs on Monday
          example: true
        onTu:
          type: boolean
          description: Indicates whether the message event occurs on Tuesday
          example: true
        onWe:
          type: boolean
          description: Indicates whether the message event occurs on Wednesday
          example: true
        onTh:
          type: boolean
          description: Indicates whether the message event occurs on Thursday
          example: true
        onFr:
          type: boolean
          description: Indicates whether the message event occurs on Friday
          example: true
        onSa:
          type: boolean
          description: Indicates whether the message event occurs on Saturday
          example: true
        onSu:
          type: boolean
          description: Indicates whether the message event occurs on Sunday
          example: true
        timeListEntries:
          type: array
          items:
            $ref: "#/components/schemas/TimeListEntry"
        playIntervalInMin:
          type: integer
          format: int32
          description: Interval in minutes between message events
          minimum: 1
          example: 15
        startTime:
          type: string
          description: Time when the message event can start to play
          example: 03:00:00
        endTime:
          type: string
          description: Time when the message event stops
          example: 06:00:00
        processSingleDay:
          type: boolean
          description: Indicates whether the system must process a single day
          example: true
        includeUnassignedTimes:
          type: boolean
          description: Indicates whether the system should include unassigned times
          example: false
    Calendar:
      type: object
      description: Info about message calendar
      required:
        - id
        - name
        - brandId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the message calendar
          example: 123
        name:
          type: string
          description: Message calendar's name
          example: My calendar message
        brandId:
          type: integer
          format: int64
          description: Id of the brand which contains this message calendar
          example: 23
    NewMessageCalendar:
      type: object
      description: Info needed to create a new message calendar
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the new calendar
          example: My awesome calendar
    Message:
      type: object
      description: Info about a message
      required:
        - id
        - name
        - created
        - updated
        - eventsStringConcatenation
        - assets
        - tags
        - tagLogicGate
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the message
          example: 123
        name:
          type: string
          description: Message's name
          example: My message
        created:
          type: string
          description: Date when the message was created
          example: 2013-09-16 19:17:12
        updated:
          type: string
          description: Date when the message was updated
          example: 2013-09-16 19:17:12
        eventsStringConcatenation:
          type: string
          description: Concatenation of the names of all events
          example: event1 - event2 - event3
        assets:
          type: array
          items:
            $ref: "#/components/schemas/MessageAsset"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
        tagLogicGate:
          $ref: "#/components/schemas/TagLogicGateType"
    MessageAsset:
      type: object
      description: Info about a message's asset
      required:
        - url
        - language
      properties:
        url:
          type: string
          description: URL to download the asset
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/images/initial/17/DAUD-150-INITIAL-20150324141531EDT.tar?AWSAccessKeyId=AKIAJUJTXIUWNASPA25Q&Expires=2128267340&Signature=7rbYrHCl2gqV8dCv6%2BBuXCFl6p8%3D
        language:
          type: string
          description: Language code of the asset
          example: fr
    TagLogicGateType:
      type: string
      enum:
        - AND
        - OR
      description: Available tag logic gate types
      example: AND
    Screen:
      type: object
      description: Full representation of a screen
      required:
        - name
        - status
        - magicInfoImp
        - tagCategories
      properties:
        name:
          type: string
          description: Name of the screen in the system
          example: My screen
        status:
          $ref: "#/components/schemas/MediaPlayerStatus"
        magicInfoImp:
          $ref: "#/components/schemas/ScreenImpMagicInfo"
        tagCategories:
          type: array
          items:
            $ref: "#/components/schemas/TagCategoryInstance"
        channelId:
          type: integer
          format: int64
          description: Unique identifier of the assigned channel
          example: 123
        store:
          $ref: "#/components/schemas/GenericPair"
        miMonitoringInfo:
          type: string
          description: String containing json from magic info with info on the device
          example: Example is too big and can change often
        miScreenshot:
          type: string
          description: Url of the screenshot from Magic Info device
          example: http://www.lol.com/image.jpg
    ScreenImpMagicInfo:
      type: object
      description: Info about a magic info implementation of a screen
      required:
        - id
        - name
        - location
        - deviceId
        - active
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the screen implementation
          example: 123
        name:
          type: string
          description: Name of the screen from Magic Info
          example: MyNiceScreen
        location:
          type: string
          description: Location of the screen from Magic Info
          example: My store
        deviceId:
          type: string
          description: Unique identifier of the device on the Magic Info server
          example: 24-4b-03-02-62-62
        latestPublishHash:
          type: string
          description: Latest publish hash to detect changes
          example: 6e1fb5c43d56d4bf084ed8f63a217c5f
        latestPublishTimestamp:
          type: string
          description: Latest publish timestamp
          example: 2017-08-17 15:40:06.831000
        active:
          type: boolean
          description: Indicates whether the screen is active in the MagicInfo server
          example: true
    ScreenAdministrativeStatusUpdateInfo:
      type: object
      description: Info needed to update the administrative state of a screen. All fields
        are optional and ignored if not set
      properties:
        active:
          type: boolean
          description: Indicates whether the device should be active or inactive
          example: true
        storeId:
          type: integer
          format: int64
          description: Unique identifier of the associated store
          example: 123
        status:
          $ref: "#/components/schemas/MediaPlayerStatus"
    ScreenUpdateInfo:
      type: object
      description: Info needed to do an update of a screen
      required:
        - channelId
        - tags
        - name
      properties:
        channelId:
          type: integer
          format: int64
          description: Unique identifier of the assigned channel
          example: 123
        tags:
          type: array
          items:
            type: string
        name:
          type: string
          minLength: 1
          description: New name wanted for the screen
          example: Better name
    MediaPlayerStatus:
      type: string
      enum:
        - ready
        - installed
      description: State in which a media player can be
      example: ready
    TagCategoryInstance:
      type: object
      description: Representation of a instance of a tag category inside a real object
      required:
        - name
        - currentTags
        - availableTags
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the TagCategory
          example: 123
        name:
          type: string
          description: Name of the tag category
          example: Colors
        currentTags:
          type: array
          items:
            type: string
        availableTags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    PublishInfo:
      type: object
      description: Info needed to publish a state
      required:
        - schedulingMode
      properties:
        schedulingMode:
          $ref: "#/components/schemas/SchedulingMode"
        scheduledDate:
          type: string
          description: Date when the publish will be active
          example: 2017-03-28 05:03:22.859 EDT
    SchedulingMode:
      type: string
      enum:
        - SIGNAGE
        - STATION_SCHEDULING
        - MESSAGING
        - PLAYER_PLAYBACK
        - SIGNAGE_LIBRARY
        - UNKNOWN
      description: Type of scheduling mode
      example: SIGNAGE
    FakeSignageBody:
      type: object
      required:
        - json
      properties:
        json:
          type: string
    BrandLog:
      type: object
      description: Info about a log in a brand
      required:
        - timestamp
        - level
        - message
        - initiator
        - details
      properties:
        timestamp:
          type: string
          description: Timestamp of when the log was created
          example: 2014-01-20 20:49:49.162000
        level:
          type: string
          description: Level of the log
          example: DEBUG
        message:
          type: string
          description: The actual message
          example: Looking if any update is needed...
        initiator:
          type: string
          description: Identifier of the user/system who created the log
          example: admin@stingray.com
        details:
          type: string
          description: Additional information/details
          example: NUM-TMO-AFF-MGRAPH-1080x1920-1406..mp4
    BasicShippingLabel:
      type: object
      description: Basic info needed for a shipping label
      required:
        - shippingType
        - trackingId
        - shipAddress
        - affiliateFedexShippingLabelInfo
      properties:
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        trackingId:
          type: string
          description: Unique identifier of the tracking
          example: VAR-297-351
        shipAddress:
          $ref: "#/components/schemas/Address"
        affiliateFedexShippingLabelInfo:
          $ref: "#/components/schemas/AffiliateFedexShippingLabelInfo"
    NewShippingGroup:
      type: object
      description: Minimum info needed to create a new shipping group
      required:
        - name
        - shippingType
        - shippingPackageTypeId
        - open
      properties:
        name:
          type: string
          description: Name of the shipping group
          example: Updates USB Avril 2014
        workOrder:
          type: string
          description: Optional work order
          example: WO1234
          default: ""
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        shippingPackageTypeId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping package type
          example: 123
        open:
          type: boolean
          description: Indicates whether the shipping group is open
          example: true
    ShippingUsbUpdate:
      type: object
      description: Info about a new shipping usb update
      required:
        - name
        - imageId
        - shippingType
        - shippingPackageTypeId
      properties:
        name:
          type: string
          description: Name of the shipping usb update
          example: Octobre 2014
        imageId:
          type: integer
          format: int64
          description: Unique identifier of the linked image
          example: 588
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        shippingPackageTypeId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping package type
          example: 123
        workOrder:
          type: string
          description: Work order for a fedex shipment
          example: This is a work order
    ShippingUsbUpdateLinkedStoresInfo:
      type: object
      description: Info needed to link or unlink stores to a shipping usb update
      required:
        - link
        - storeIds
      properties:
        link:
          type: boolean
          description: Indicates whether the stores needed to be linked or unlinked
          example: true
        storeIds:
          type: array
          items:
            type: integer
            format: int64
            description: Unique identifier of a store
            example: 123
    UpdateShippingUsbUpdateLinkedStores:
      type: object
      description: Info about the success or failure of linking stores to a shipping usb
        update
      required:
        - results
        - stores
      properties:
        results:
          type: array
          items:
            type: string
            description: Result log of a specific store link
            example: Already Linked
        stores:
          type: array
          items:
            $ref: "#/components/schemas/Store"
    NewShippingInfo:
      type: object
      description: Info about a new shipping info
      required:
        - addressId
        - shippingType
        - shippingPackageTypeId
      properties:
        addressId:
          type: integer
          format: int64
          description: Unique identifier of the related address
          example: 123
        shippingType:
          $ref: "#/components/schemas/ShippingType"
        shippingPackageTypeId:
          type: integer
          format: int64
          description: Unique identifier of the related shipping package type
          example: 123
        description:
          type: string
          description: Shipping info description
          example: This is a nice description
    DevicePrintRequestInfo:
      type: object
      description: Info needed to print a device and to print the label to ship it
      required:
        - devicePrintInfo
        - shippingInfo
      properties:
        devicePrintInfo:
          $ref: "#/components/schemas/DevicePrintInfo"
        shippingInfo:
          $ref: "#/components/schemas/ShippingInfo"
    DevicePrintInfo:
      type: object
      description: Info needed to print a device
      required:
        - deviceId
        - status
        - platform
        - brandCode
        - config
        - player
        - installer
        - storeNumber
        - devicePK
        - wsServerUri
        - wifiSSID
        - wifiKey
        - activationCode
        - claperEnabled
        - video
        - configPath
        - claperPlaylistPath
        - claperPlaylistsBackup
      properties:
        deviceId:
          type: string
          description: Unique identifier of the device
          example: ALDO-SB1-000001
        status:
          $ref: "#/components/schemas/DeviceStatusState"
        platform:
          $ref: "#/components/schemas/Platform"
        brandCode:
          type: string
          description: Code of the related brand
          example: STFU
        config:
          type: string
          description: Complete configuration for the given device
          example: Example to big to fit here
        player:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        playerDeb:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        installer:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        installerDeb:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        backdoor:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        claperWeb:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        sbFirmware:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        sbScreenManager:
          $ref: "#/components/schemas/DeviceSoftwareShippingInfo"
        storeNumber:
          type: string
          description: Store's number
          example: LOL 123
        devicePK:
          type: string
          description: ""
          example: ""
        wsServerUri:
          type: string
          description: Uri of the web server
          example: wss://cs-dev.business.stingray.com
        wifiSSID:
          type: string
          description: Identifier of the wifi
          example: Wifi de gilbert
        wifiKey:
          type: string
          description: Key/password for the wifi
          example: secret123
        activationCode:
          type: string
          description: Activation code of the device use by twilio
          example: A3F6E3D7
        claperEnabled:
          type: boolean
          description: Indicates whether claper is enabled on this device
          example: false
        claperMasterPassword:
          type: string
          description: Master password to access everything on the box
          example: SeCrEt1$3
        video:
          type: boolean
          description: Indicates whether the device is in video mode
          example: false
        configPath:
          type: string
          description: Path to the config
          example: /config
        claperPlaylistPath:
          type: string
          description: Path to the claper playlist (on demand)
          example: /content/app/playlist
        claperPasswordBackup:
          type: string
          description: Backup file for claper password
          example: /config/passwordBackup.json
        claperPlaylistsBackup:
          type: array
          items:
            type: string
            description: Backup file for playlist file
            example: /config/playlist123231Backup.json
    DeviceSoftwareShippingInfo:
      type: object
      description: Info about a software in the shipping info
      properties:
        versionNoSuffix:
          type: string
          description: Version of the software without suffix
          example: 1.4.2
        sync2:
          type: boolean
          description: Indicates whether the device is using sync 2.0
          example: true
        version:
          type: string
          description: Version of the software
          example: CLAP-1.4.2
        url:
          type: string
          description: Url where to download the software
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
        basePaths:
          type: array
          description: Base paths for the application
          items:
            type: string
        fileName:
          type: string
          description: Name of the file
          example: CLAP.apkz
    WebSocketThrottlerSettings:
      type: object
      description: Settings for the web socket throttler
      required:
        - periodDurationMs
        - periodMaxAllowed
      properties:
        periodDurationMs:
          type: integer
          format: int64
          description: Duration in ms of the period
          example: 60
        periodMaxAllowed:
          type: integer
          format: int64
          description: Max connection allowed during the period
          example: 1000
    StoreCreationLog:
      type: object
      description: Log related to the creation of a store using the CSV file
      required:
        - storeNumber
        - action
        - status
      properties:
        storeNumber:
          type: string
          description: Store's number
          example: TEST-123
        action:
          type: string
          description: Action that was performed
          example: Import Stores
        status:
          type: string
          description: Status
          example: Fail
        log:
          type: string
          description: Additional information
          example: Brand has no associated languages
    ApplicationLanguage:
      type: object
      description: Info needed to set the application language
      required:
        - isoLanguageCode
      properties:
        isoLanguageCode:
          type: string
          description: Language's ISO code
          example: fr
    RequestPasswordInfo:
      type: object
      description: Info to request a password
      required:
        - email
      properties:
        email:
          type: string
          description: Email that request the password
          example: lol@funny.com
    AffiliateSupportInfo:
      type: object
      description: Affiliate's support info
      required:
        - currentLanguageCode
        - registerUrlFr
        - helpCenterUrlFr
        - businessUrlFr
        - registerUrlEn
        - helpCenterUrlEn
        - businessUrlEn
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the affiliate support info
          example: 123
        currentLanguageCode:
          type: string
          description: Iso language code assigned to this affiliate
          example: fr
        serviceUrl:
          type: string
          description: Url for the website of the service
          example: businesssupport@stingray.com
        email:
          type: string
          description: Email of the service
          example: cs.business.stingray.com
        registerUrlFr:
          type: string
          description: Url to register/contact the affiliate in french
          example: http://business.stingray.com/contact-us
        helpCenterUrlFr:
          type: string
          description: Url to get help
          example: http://business.stingray.com/customer-support in french
        businessUrlFr:
          type: string
          description: Url to get information on the business in french
          example: http://business.stingray.com
        teamNameFr:
          type: string
          description: Name of the support team in french
          example: L'équipe de Stingray Affaires
        serviceNameFr:
          type: string
          description: Name of the service in french
          example: Stingray Affaires
        registerUrlEn:
          type: string
          description: Url to register/contact the affiliate in english
          example: http://business.stingray.com/contact-us
        helpCenterUrlEn:
          type: string
          description: Url to get help in english
          example: http://business.stingray.com/customer-support
        businessUrlEn:
          type: string
          description: Url to get information on the business in english
          example: http://business.stingray.com
        teamNameEn:
          type: string
          description: Name of the support team in english
          example: Stingray Business Team
        serviceNameEn:
          type: string
          description: Name of the service in english
          example: Stingray Business
    Login:
      type: object
      description: Info needed to login
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email used as username to login in the system
          example: lol@jokes.com
        password:
          type: string
          description: Password associated to the email
          example: superSecretPassword123
    PasswordChangeRequest:
      type: object
      description: Info needed to request a password change
      required:
        - newPassword
        - newPasswordConfirmation
        - token
        - email
      properties:
        newPassword:
          type: string
          description: New password the user wants
          example: myNewPasswordForLife
        newPasswordConfirmation:
          type: string
          description: New password the user wants (for confirmation)
          example: myNewPasswordForLife
        token:
          type: string
          description: Token received by email. Must match the request to confirm user
            identity
          example: EyMoAVETsKaPsY6MzYdNQgRHZoGHMJlkSphRlLKSTkmdvlWvmcxep8AXxPGSInfPubJ3kNTljI6Vs27KF3jNSVZVa9hDV0%2FiajkQ44b%2FFATM%2BiV4n5b%2B%2BQ%3D%3D
        email:
          type: string
          description: Email of the user requesting the password change
          example: lol@hahaha.com
    LoginReply:
      type: object
      description: Info returned by the login
      properties:
        redirectUrl:
          type: string
          description: Url the UI or the client should try to reach after the login
          example: www.google.ca
        twoFactorLoginRequired:
          type: boolean
          description: Indicates whether two-factor authentication login is required
          example: true
        userId:
          type: integer
          format: int64
          description: Unique identifier of the user settings request's user
    CSVCreatorInfo:
      type: object
      description: Info about the CSV Creator version
      required:
        - downloadUrl
        - minimalVersion
      properties:
        downloadUrl:
          type: string
          description: Url do download the CSV Creator
          example: https://business-tools.stingray.com/csvcreator-dev/setup.zip
        minimalVersion:
          type: string
          description: Minimum version required
          example: "5.2"
    StringBooleanMap:
      additionalProperties:
        type: boolean
    ViewType:
      type: string
      description: List of all view types
      enum:
        - Home
        - Affiliates
        - Brand_Home
        - Administration
        - Scheduling
        - New_Rule_Scheduling
        - Options
        - About
        - Preferences
        - Brand_Signage_Screen
        - Brand_Players
        - Brand_Music
        - Brand_Videos
        - Brand_Messages
        - Brand_Signage_Scheduling
        - Brand_Calendar_Scheduling
        - Brand_Station_Scheduling
        - Brand_Station_Scheduling_Style_Settings
        - Brand_Player_Playback_Scheduling
        - Brand_Throttle_Scheme
        - Brand_Logs
        - Brand_Stores
        - Brand_Reviewing_And_Publishing
        - Brand_Access_Rights
        - Brand_Settings
        - Brand_Media_Feeds
        - Brand_Create_Store_And_Box
        - Brand_Store_Import_Logs
        - Brand_Usb_Images
        - Brand_Shipping
        - Brand_Usb_Management_Stores
        - Brand_Stations
        - Brand_Hardware
        - Brand_Users
        - Brand_Address_Book
        - Brand_Account
        - Brand_Invoices
        - Brand_Billing_Info
        - Brand_Company_Info
        - Brand_Subscription_Plan
        - Affiliate_Management
        - Affiliate_Station_Picker
        - Affiliate_Devices
        - Affiliate_Reports
        - Affiliate_Brands
        - Affiliate_Access_Rights
        - Affiliate_Async_Tasks
        - Affiliate_Sync_State
        - Affiliate_Hardware
        - Affiliate_Hardware_Models
        - Affiliate_Settings
        - Affiliate_Media_Feeds
        - Affiliate_Device_Debugging
        - Affiliate_Store_Settings
        - Affiliate_Dashboard
        - System_Device_Software
        - System_Settings
        - System_Access_Rights
        - System_Async_Tasks
        - System_Sync_State
        - System_Sync_Snapshot
        - System_Languages
        - System_File_Upload
        - System_Roles
        - System_Return_Statuses
        - System_Station_Playlist
        - System_Station
        - System_Upload_File_To_S3
    AuthorizedViewTypesInfo:
      type: object
      description: Contains the authorized view types info
      required:
        - authorizedViewTypes
      properties:
        authorizedViewTypes:
          type: array
          items:
            $ref: "#/components/schemas/ViewType"
          description: List of authorized view types
        parentInstanceId:
          type: integer
          format: int64
          description: Unique identifier of the parent instance
          example: 123
    BasicAffiliate:
      type: object
      description: Minimal info of an affiliate
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the affiliate
          example: 24
        name:
          type: string
          description: Name of the affiliate
          example: Stingray
        logoUrlEn:
          type: string
          description: Affiliate logo's url in English
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/AffiliateLogos/1/logo.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180201T212021Z&X-Amz-SignedHeaders=host&X-Amz-Expires=172799&X-Amz-Credential=AKIAIGAX4BNTLDAQ4O2Q%2F20180201%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=ee58bc394a5ea264f557cbac07bfa4ac91b51978c24b943829ea01d0edd92e4f
        logoUrlFr:
          type: string
          description: Affiliate logo's url in French
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/AffiliateLogos/1/logo.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180201T212021Z&X-Amz-SignedHeaders=host&X-Amz-Expires=172799&X-Amz-Credential=AKIAIGAX4BNTLDAQ4O2Q%2F20180201%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=ee58bc394a5ea264f557cbac07bfa4ac91b51978c24b943829ea01d0edd92e4f
    BasicBrand:
      type: object
      description: Minimal info of a brand
      required:
        - id
        - status
        - name
        - clientName
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 123
        status:
          $ref: "#/components/schemas/ProductStatus"
        code:
          type: string
          description: Brand's code
          example: LOL1
        name:
          type: string
          description: Brand's name
          example: Super funny brand
        clientName:
          type: string
          description: Name of the client
          example: ""
        logoUrl:
          type: string
          description: Brand logo's url
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/AffiliateLogos/1/logo.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180201T212021Z&X-Amz-SignedHeaders=host&X-Amz-Expires=172799&X-Amz-Credential=AKIAIGAX4BNTLDAQ4O2Q%2F20180201%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=ee58bc394a5ea264f557cbac07bfa4ac91b51978c24b943829ea01d0edd92e4f
        clientSiteUrl:
          type: string
          description: URL of the client website
          example: http://www.stingray.com
          default: ""
    MinimalBrand:
      type: object
      description: Minimal info of a brand
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the brand
          example: 123
        name:
          type: string
          description: Brand's name
          example: Super funny brand
    MediaFeed:
      type: object
      required:
        - id
        - externalId
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the media feed
          example: 123
        externalId:
          type: string
          description: ID used in the Media Feed Service
          example: f0a84352-4069-4fef-a817-3c406c9b05aa
        name:
          type: string
          description: Name of the media feed
          example: My amazing media feed
        lastUpdateUrl:
          type: string
          description: Url to play the latest update. Can be null is there is no latest
            media or if the user doesn't have the required permission
          example: http://akiai5vkdhs2g3sns2uq-s360-control-site.s3.amazonaws.com/AffiliateLogos/1/logo.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180201T212021Z&X-Amz-SignedHeaders=host&X-Amz-Expires=172799&X-Amz-Credential=AKIAIGAX4BNTLDAQ4O2Q%2F20180201%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=ee58bc394a5ea264f557cbac07bfa4ac91b51978c24b943829ea01d0edd92e4f
        lastUpdateTimestamp:
          type: string
          description: The timestamp when the media feed was last updated
          example: 2014-03-27 21:41:54.107000
    MediaFeedLink:
      type: object
      required:
        - mediaFeedId
      properties:
        mediaFeedId:
          type: integer
          format: int64
          description: Id of the media feed to link
          example: 123
    MediaFeedNotification:
      type: object
      required:
        - mediaFeedExternalId
        - assetId
        - maxPlayTime
        - minPlayTime
        - timeZone
        - publicKey
        - durationMs
        - creationDate
      properties:
        assetId:
          type: integer
          format: int64
          description: SAM asset ID
          example: 123
        mediaFeedExternalId:
          type: string
          description: Unique identifier of the media feed used for the communication
            between the service and the CS
          example: c66113de-3a4f-4c9d-b503-5ab5edbb912c
        maxPlayTime:
          type: string
          description: Maximum date and time where this media can play
          example: 2014-03-27 21:41:54.107000
        minPlayTime:
          type: string
          description: Minimum date and time where this media can play
          example: 2014-03-27 21:41:54.107000
        timeZone:
          type: string
          description: Time zone associated with the provided max and minimum play time
          example: America/Montreal
        publicKey:
          type: string
          description: Public key of the media in the SAM system. Needed to generate an url
            to the file.
          example: "000072869139"
        durationMs:
          type: integer
          format: int64
          description: Duration of the media in milliseconds
          example: 1234567
        creationDate:
          type: string
          description: Date and time when this media was created
          example: 2014-03-27 21:41:54.10
    IndustryType:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the industry type
          example: 123
        name:
          type: string
          description: Name of the industry type
          example: Spa
    GalaxieApiAccount:
      type: object
      required:
        - id
        - csReferenceCode
        - isActive
        - store
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Galaxie Api account
          example: 123
        csReferenceCode:
          type: string
          description: Control Site Reference Code (UUID)
          example: 711cbac6-b19f-4f18-bf80-a9e165411667
        sumReferenceCode:
          type: string
          description: SUM Reference Code (UUID)
          example: 711cbac6-b19f-4f18-bf80-a9e165411667
        isActive:
          type: boolean
          description: Indicates whether the Galaxie Api acount is active
          example: true
        activationKey:
          type: string
          description: Galaxie Api account activation key
          example: 4HT78K
        associatedPlayer:
          $ref: "#/components/schemas/GalaxieApiAccountAssociatedPlayer"
        license:
          $ref: "#/components/schemas/License"
        store:
          $ref: "#/components/schemas/StoreCore"
    License:
      type: object
      required:
        - id
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the industry type
          example: 123
        status:
          $ref: "#/components/schemas/LicenseStatus"
    LicensePackage:
      type: object
      required:
        - id
        - maxLicenseCount
        - licensingFeature
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the license package
          example: 123
        maxLicenseCount:
          type: integer
          format: int32
          description: Maximum number of licenses available
          example: 3
        licensingFeature:
          $ref: "#/components/schemas/LicensingFeature"
    GalaxieApiAccountAssociatedPlayer:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Galaxie Api account associated player
          example: 123
        platform:
          type: string
          description: Player platform
          example: Android
        deviceModel:
          type: string
          description: Device model
          example: Samsung-SM-G903W
        operatingSystem:
          type: string
          description: Player operating system
          example: Android Oreo
        associationDate:
          type: string
          description: Association date of the player with the Galaxie Api account
          example: 2018-10-26 21:02:05
    RecurlyToken:
      type: object
      description: A simple object consisting of a Recurly token
      required:
        - token
      properties:
        token:
          type: string
          description: Token used for communication between Control Site and Recurly
          example: 1RLxIgCpEQlfbxto3iChqw
    BillingSubscriptionCore:
      type: object
      description: Basic information of a billing subscription
      required:
        - provideService
        - billingAccount
        - billingSubscriptionPlan
        - startDate
      properties:
        referenceCode:
          type: string
          description: Reference code of the billing subscription (UUID)
          example: 711cbac6-b19f-4f18-bf80-a9e165411667
        provideService:
          type: boolean
          description: Indicates whether service is provided
          example: true
        serviceInterruptionReason:
          $ref: "#/components/schemas/BillingSubscriptionServiceInterruptionReason"
        expirationDate:
          type: string
          description: Expiration date of the billing subscription (comes from Recurly)
          example: 2016-11-08 21:02:05
        expirationReason:
          $ref: "#/components/schemas/BillingSubscriptionExpirationReason"
        cancellationDate:
          type: string
          description: Cancellation date of the billing subscription service (comes from
            Recurly)
          example: 2016-11-08 21:02:05
        billingAccount:
          $ref: "#/components/schemas/BillingAccount"
        billingSubscriptionPlan:
          $ref: "#/components/schemas/BillingSubscriptionPlan"
        licensePackage:
          $ref: "#/components/schemas/LicensePackage"
        state:
          type: string
          description: State of the subscription (comes from Recurly)
          example: active
        startDate:
          type: string
          description: Start date of the billing subscription (comes from Recurly)
          example: 2016-11-08 21:02:05
        trialEndDate:
          type: string
          description: End date of the trial period (comes from Recurly)
          example: 2016-11-08 21:02:05
        resumeDate:
          type: string
          description: Resume date of the billing subscription service (comes from Recurly)
          example: 2016-11-08 21:02:05
        pauseStartDate:
          type: string
          description: Pause start date of the billing subscription service (comes from
            Recurly)
          example: 2016-11-08 21:02:05
        nextInvoiceDate:
          type: string
          description: Date of the next invoice (comes from Recurly)
          example: 2016-11-08 21:02:05
        remainingPauseCycles:
          type: integer
          format: int32
          description: Remaining pause cycles (comes from Recurly)
          example: 3
    BillingSubscription:
      type: object
      description: Information about a billing subscription
      allOf:
        - $ref: "#/components/schemas/BillingSubscriptionCore"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier of the billing subscription
              example: 24
    InvoiceState:
      type: string
      enum:
        - pending
        - paid
        - past_due
        - open
        - closed
        - processing
        - failed
        - voided
      description: State of the invoice
      example: paid
    BillingSubscriptionUpdateAction:
      type: string
      enum:
        - refresh
        - cancel
      description: Action to take when updating the subscription
      example: cancel
    BillingSubscriptionUpdate:
      type: object
      description: Billing subscription update info
      required:
        - billingSubscriptionUpdateAction
      properties:
        billingSubscriptionUpdateAction:
          $ref: "#/components/schemas/BillingSubscriptionUpdateAction"
    BillingAccountInvoice:
      type: object
      description: Basic information about an invoice
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
          description: Invoice unique Id
          example: 123
        createdAt:
          type: string
          description: Invoice issue date
          example: 2018-10-08 21:02:05
        dueOn:
          type: string
          description: Invoice due date
          example: 2018-11-08 13:54:27
        state:
          $ref: "#/components/schemas/InvoiceState"
        totalInCents:
          type: integer
          format: int32
          description: Invoice total
          example: "1200"
        currency:
          type: string
          description: Invoice currency
          example: CAD
        encryptedInvoiceId:
          type: string
          description: Invoice encrypted Id
          example: Rt%2BtftCGfKP8coTwmaXMew%3D%3D
    BillingAccountAddress:
      type: object
      description: Address of the account
      required:
        - address1
        - city
        - state
        - postalCode
        - country
      properties:
        address1:
          type: string
          description: Account's address 1
          example: 1342 Evergreen Terrace
        address2:
          type: string
          description: Account's address 2
          example: Apt. 2
        city:
          type: string
          description: Account's city
          example: Montreal
        state:
          type: string
          description: Account's state/province
          example: Quebec
        postalCode:
          type: string
          description: Account's postal code
          example: H1H 2H3
        country:
          type: string
          description: Account's country code
          example: CA
        phone:
          type: string
          description: Account's phone number
          example: 514-555-5555
    SelfServeFlowSettings:
      type: object
      description: Self-serve flow settings
      required:
        - enabled
        - recurlyApiKey
        - recurlyBaseUrl
      properties:
        enabled:
          type: boolean
          description: Indicates whether the self-serve flow is active or not
          example: "true"
        recurlyApiKey:
          type: string
          description: Recurly API key
          example: ewr1-SnYxjTVeZDTEcsde35fdfged546746
        recurlyBaseUrl:
          type: string
          description: Recurly base url
          example: https://stingraybusiness.recurly.com
    CompanyInfo:
      type: object
      description: Info about a company
      required:
        - companyName
        - industryTypeId
        - address
      properties:
        companyName:
          type: string
          description: Name of the company
          example: Acme Inc.
        industryTypeId:
          type: integer
          format: int64
          description: Unique identifier of an industry type
          example: 123
        address:
          $ref: "#/components/schemas/BillingAccountAddress"
    DefaultMetaOnlyResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
    GetMagicInfoScreenImplementationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MagicInfoScreenImplementation"
    GetMagicInfoAssetImplementationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MagicInfoAssetImplementation"
    GetUserSettingsRequestResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/UserSettingsRequest"
    GetLoginSettingsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/LoginSettings"
    GetUserDataResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/User"
    GetUsersResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
    GetUserResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/User"
    GetAffiliatesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Affiliate"
    GetAffiliateResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Affiliate"
    GetAffiliateRolesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Role"
    GetAffiliateStationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Station"
    GetChannelPublishedStatusResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/ChannelPublishedStatus"
    GetDevicesViewDataResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DevicesViewData"
    GetDeviceLifecycleResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceLifecycle"
    GetDeviceLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceLogs"
    GetDevicePlayoutsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Playouts"
    GetDeviceLifecycleMetricsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/LifecycleMetrics"
    GetTaskResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Task"
    GetDeviceAdvancedLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/AdvancedDeviceLogs"
    ReplaceDeviceResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/ReplacementDevice"
    GetDeviceDebugViewDataResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceDebugViewData"
    GetDevicePreparationDataResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DevicePreparationData"
    GetDeviceResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Device"
    GetDeviceSoftwareImplementationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeviceSoftwareImplementation"
    GetTagsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    BrandTagCategoriesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TagCategory"
    EntityTypeCategoryAssociationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/EntityTypeCategoryAssociation"
    GetStationSchedulesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/StationSchedule"
    GetStationScheduleStylesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/StationScheduleStyle"
    GetStationScheduleStyleResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/StationScheduleStyle"
    GetBrandStationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BrandStation"
    GetDeviceLifecycleStatusResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceLifecycleStatus"
    GetDeviceLifecycleStatusesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeviceLifecycleStatus"
    GetLanguagesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Language"
    GetHardwareModelsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/HardwareModel"
    GetHardwareListResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Hardware"
    GetHardwareAssignationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/HardwareAssignation"
    GetDevicesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/DeviceCore"
    GetBasicStoresResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/StoreCore"
    GetStoresResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Store"
    GetHardwareResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Hardware"
    GetHardwareModelResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/HardwareModel"
    GetImagesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    GetImageSummaryResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: string
    GetAllSoftwareListResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/AllSoftwareList"
    GetSoftwareListResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Software"
    GetEnumPairsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/EnumPair"
    GetGenericPairsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/GenericPair"
    AsyncTaskConfirmationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/AsyncTaskConfirmation"
    GetSyncLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SyncLog"
    GetSyncStationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SyncStation"
    GetSyncStationDetailsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SyncStationDetails"
    GetSyncBrandsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SyncBrand"
    GetSyncSongsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SyncSong"
    GetStationSyncPlaylistsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SyncPlaylist"
    GetSyncPlaylistResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SyncPlaylistContent"
    GetStationSyncSongsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SyncSong"
    GetMediaPlayerOutputsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MediaPlayerOutput"
    GetBanConfigResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SongBanInfo"
    GetThrottlingSchemeResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/ThrottlingScheme"
    GetBasicStoreResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/StoreCore"
    GetBasicBrandResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/BasicBrand"
    GetSongResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Song"
    GetCreatedIdResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: integer
          format: int64
          description: Unique identifier of the created object
          example: 123
    GetAvailableStationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AvailableStation"
    GetMatchingRolesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/MatchingRoles"
    GetStringListResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            type: string
    GetClaperSupportValidationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/ClaperSupportValidation"
    GetMediaTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MediaType"
    GetTechTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TechType"
    GetBrandingTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BrandingType"
    GetRelatedMediaTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/RelatedMediaType"
    GetAudioSignalsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/AudioSignal"
    GetBrandResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Brand"
    GetAdminBrandProductSettingsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/AdminBrandProductSettings"
    GetBrandsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BrandListingInfo"
    GetAddressResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Address"
    GetSignageConfigsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SignageConfig"
    GetSignageConfigResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SignageConfig"
    GetDefaultValuesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DefaultValues"
    GetMagicInfoConfigResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/MagicInfoConfig"
    GetMagicInfoConfigsResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MagicInfoConfig"
    GetBrandStationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/BrandStation"
    GetThrottlingSchemePreviewResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/ThrottlingSchemePreview"
    GetStoreLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/StoreLog"
    GetMediaFeedLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MediaFeedLog"
    GetScreensResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ScreenCore"
    GetStringResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: string
    GetDevicesBatchOperationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DevicesBatchOperation"
    GetDeviceVideoConfigResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceVideoConfig"
    GetDeviceAudioConfigResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceAudioConfig"
    GetDeviceOutputsConfigResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceOutputsConfig"
    GetDeviceLocationsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Location"
    GetBooleanResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: boolean
    GetZonesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Zone"
    GetZoneResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Zone"
    PasswordResetResultResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            type: string
    GetDeprecatedFilesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: string
          description: URL of the file on the cloud
          example: https://s3.amazonaws.com/AKIAI4ZKWREMK634U2JA-s360-control-site/deviceSoftware/0.0.0?Expires=2014060745&AWSAccessKeyId=AKIAI4ZKWREMK634U2JA&Signature=QcsKOJ0GPu1MDq8zgmRd0TxINHw%3D
    GetNetworkConfigurationResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/NetworkConfig"
    GetTaskLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TaskLog"
    GetTaskLogEntriesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TaskLogEntry"
    GetSyncStateSnapshotResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SyncStateSnapshot"
    GetReportResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Report"
    UsbReturnResultResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/UsbReturnResult"
    UsbReturnResultsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/UsbReturnResult"
    GetSystemLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SystemLog"
    GetWebSocketLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/WebSocketLog"
    GetUserRightsRolesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserRightsRole"
    GetUserRightsRoleResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/UserRightsRole"
    GetUserRightsPermissionDetailedEntriesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserRightsPermissionDetailedEntry"
    GetUserRightsRoleAssignmentsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserRightsRoleAssignment"
    GetDeviceSoftwarePushBatchOperationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DeviceSoftwarePushBatchOperation"
    GetMessageEventResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/MessageEvent"
    GetMessageEventsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MessageEvent"
    GetTimeListEntriesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TimeListEntry"
    GetMessageCalendarResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/GenericPair"
    GetMessageResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Message"
    GetMessagesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Message"
    GetScreenResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Screen"
    GetSignageResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: string
    GetBrandLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BrandLog"
    GetBasicShippingLabelResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/BasicShippingLabel"
    GetShippingGroupsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ShippingGroup"
    GetShippingAddressesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Address"
    UpdateShippingUsbUpdateLinkedStoresResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/UpdateShippingUsbUpdateLinkedStores"
    GetShippingInfoListResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ShippingInfo"
    GetShippingInfoResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/ShippingInfo"
    GetIpAddressFilterResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/IpAddressFilter"
    GetIpAddressFiltersResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/IpAddressFilter"
    GetDevicePrintRequestInfoResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/DevicePrintRequestInfo"
    GetStoreCreationLogsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/StoreCreationLog"
    GetAffiliateSupportInfoResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/AffiliateSupportInfo"
    GetLoginResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/LoginReply"
    GetCSVCreatorInfoResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/CSVCreatorInfo"
    GetFrontEndPermissionsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/StringBooleanMap"
    GetAuthorizedViewTypesInfoResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/AuthorizedViewTypesInfo"
    GetAuthorizationRelatedAffiliatesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BasicAffiliate"
    GetAuthorizationRelatedBrandsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BasicBrand"
    GetMediaFeedsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/MediaFeed"
    GetDeviceSoftwareResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/Software"
    GetIndustryTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/IndustryType"
    GetBillingSubscriptionPlansResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BillingSubscriptionPlan"
    GetFeatureTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/FeatureType"
    GetProductTypesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProductType"
    ResetActivationKeyResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: string
    BrandGalaxieApiAccountsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/GalaxieApiAccount"
    SelfServeSubscriptionResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SelfServeCompletedSubscription"
    SelfServeBrandInitializationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SelfServeBrandInitializationInfo"
    SelfServeBrandFinalizationResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SelfServeBrandFinalizationInfo"
    BillingSubscriptionResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/BillingSubscription"
    BillingInfoResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/BillingInfo"
    BillingSubscriptionsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BillingSubscription"
    BillingAccountInvoicesResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: array
          items:
            $ref: "#/components/schemas/BillingAccountInvoice"
    BillingAccountAddressResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/BillingAccountAddress"
    SelfServeFlowSettingsResponse:
      type: object
      required:
        - meta
        - data
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SelfServeFlowSettings"
    CompanyInfoResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/CompanyInfo"
    SbxTechResponse:
      type: object
      required:
        - meta
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          $ref: "#/components/schemas/SbxTech"